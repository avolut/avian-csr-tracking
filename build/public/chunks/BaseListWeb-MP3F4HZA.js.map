{
  "version": 3,
  "sources": ["../../../pkgs/web/crud/src/list/web/BaseListWeb.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Tooltip/components/Tooltip/Tooltip.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Tooltip/components/Tooltip/Tooltip.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Tooltip/components/Tooltip/Tooltip.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Tooltip/components/Tooltip/Tooltip.types.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Tooltip/components/Tooltip/TooltipHost.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Tooltip/components/Tooltip/TooltipHost.types.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Tooltip/components/Tooltip/TooltipHost.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Tooltip/components/Tooltip/TooltipHost.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Link/components/Link/Link.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Link/components/Link/useLink.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Link/components/Link/Link.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Link/components/Link/Link.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Check/components/Check/Check.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Check/components/Check/Check.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Check/components/Check/Check.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/List/components/List/List.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/List/components/List/List.types.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/utilities/selection/utilities/selection/SelectionZone.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupedList.types.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsHeader.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsList.types.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupSpacer.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupedList.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupedList.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupedListSection.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsRow.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsHeader.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsRowCheck.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupHeader.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupHeader.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupHeader.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupShowAll.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupShowAll.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupShowAll.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupFooter.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupFooter.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupFooter.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupedList.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsRowCheck.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/utilities/dragdrop/utilities/dragdrop/DragDropHelper.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsColumn.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsColumn.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsColumn.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsHeader.types.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsHeader.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsList.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsRow.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsRowFields.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsRow.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/utilities/decorators/utilities/decorators/withViewport.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/utilities/groupedList/utilities/groupedList/GroupedListUtility.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsList.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsList.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/ScrollablePane/components/ScrollablePane/ScrollablePane.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/ScrollablePane/components/ScrollablePane/ScrollablePane.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/ScrollablePane/components/ScrollablePane/ScrollablePane.types.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/ScrollablePane/components/ScrollablePane/ScrollablePane.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Sticky/components/Sticky/Sticky.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Sticky/components/Sticky/Sticky.types.ts", "../../../pkgs/web/crud/src/list/web/BaseListWebCol.tsx", "../../../pkgs/web/crud/src/list/web/BaseListWebRow.tsx"],
  "sourcesContent": ["/** @jsx jsx */\nimport { css, jsx } from '@emotion/react'\nimport {\n  CheckboxVisibility,\n  ConstrainMode,\n  DetailsList,\n  Icon,\n  ProgressIndicator,\n  ScrollablePane,\n  ScrollbarVisibility,\n  SelectionMode,\n  Spinner,\n  SpinnerSize,\n  Sticky,\n  StickyPositionType,\n  TooltipHost,\n} from '@fluentui/react'\nimport { initializeIcons } from '@fluentui/react/lib/Icons'\nimport { waitUntil } from 'libs'\nimport get from 'lodash.get'\nimport throttle from 'lodash.throttle'\nimport { Context, useContext, useEffect, useRef } from 'react'\nimport { BaseWindow } from 'web-init/src/window'\nimport { niceCase } from 'web-utils/src/niceCase'\nimport { useRender } from 'web-utils/src/useRender'\nimport { IBaseListContext } from '../../../../ext/types/__list'\nimport { Loading } from '../../view/loading'\nimport { baseListFormatOrder } from '../BaseList'\nimport { BaseListWebCol } from './BaseListWebCol'\nimport { BaseListWebRow } from './BaseListWebRow'\n\ndeclare const window: BaseWindow\n\nexport const BaseListWeb = ({ ctx }: { ctx: Context<IBaseListContext> }) => {\n  const _ = useRef({\n    ref: null as any,\n    onScroll: (ev) => {\n      if (meta.init && ev && ev.scrollTop && state.table.lastScroll) {\n        state.table.lastScroll.y = ev.scrollTop\n        state.table.lastScroll.x = ev.scrollLeft\n        if (state.table.onScroll) {\n          state.table.onScroll(ev)\n        }\n\n        state.filter.render()\n      }\n    },\n    renderedRowsIndex: new Set(),\n    renderedRows: [] as { ts: number; row: any }[],\n    lateQuery: (row) => {\n      const ts = new Date().getTime()\n      if (!meta.renderedRowsIndex.has(row)) {\n        meta.renderedRows.push({ row, ts })\n        meta.renderedRowsIndex.add(row)\n      }\n      meta.renderedRows = meta.renderedRows.filter((e) => {\n        if (ts - e.ts > 1000) {\n          meta.renderedRowsIndex.delete(e.row)\n          return false\n        }\n        return true\n      })\n      if (meta.renderedRows.length > 1) {\n        throttledLastQuery({ rows: meta.renderedRows.map((e) => e.row), state })\n      }\n    },\n    init: false,\n  })\n\n  const meta = _.current\n  const render = useRender()\n  useEffect(() => {\n    state.table.render = render\n    ;(async () => {\n      if (!(window as any).iconInit) {\n        ;(window as any).iconInit = true\n        initializeIcons()\n      }\n\n      await waitUntil(() => state.table.columns)\n      meta.init = true\n      render()\n    })()\n  }, [])\n\n  const state = useContext(ctx)\n  const throttledLastQuery = throttle(\n    async (prop: { rows: any; state: IBaseListContext }) => {\n      if (typeof state.db.lateQuery === 'function') {\n        await state.db.lateQuery(prop)\n      } else if (typeof state.db.lateQuery === 'object') {\n        for (let [col, lateQuery] of Object.entries(state.db.lateQuery)) {\n          const { rows } = prop\n          const unqueried = rows.filter((e) => !e.a_asset)\n\n          if (unqueried.length > 0) {\n            for (let row of unqueried) {\n              if (!row[col]) {\n                row[col] = {}\n              }\n            }\n\n            const res: any[] = await lateQuery[1](prop)\n\n            const indexed = {}\n            for (let i of res) {\n              indexed[i[lateQuery[0]]] = i\n            }\n\n            for (let row of unqueried) {\n              row[col] = indexed[row[lateQuery[0]]]\n            }\n\n            state.component.render()\n          }\n        }\n      }\n    },\n    800,\n    {\n      trailing: true,\n    }\n  )\n\n  if (!meta.init) return null\n\n  let items = state.db.list || []\n  const grid = state.grid\n  if (grid && grid.colSize > 0) {\n    items = []\n    let row: any[] = []\n    for (let i of state.db.list) {\n      if (row.length < grid.colSize) {\n        row.push(i)\n      } else {\n        items.push(row)\n        row = [i]\n      }\n    }\n\n    if (!state.table.customRenderRow) {\n      console.error('[qlist] columns must be a function when using grid')\n      return null\n    }\n  }\n\n  const isEmpty = (items || []).length == 0\n\n  return (\n    <div\n      className=\"flex flex-1 items-stretch\"\n      css={css`\n        .ms-DetailsHeader {\n          padding-top: 0px;\n        }\n        .ms-DetailsRow-cell {\n          font-size: 14px;\n          display: flex;\n          align-items: center;\n        }\n\n        & * ::-webkit-scrollbar {\n          width: 7px;\n\n          height: 7px;\n        }\n\n        & * ::-webkit-scrollbar-thumb {\n          background-color: rgba(1, 1, 1, 0.2);\n          opacity: 0.7;\n          margin: 2px;\n        }\n      `}\n    >\n      {(state.db.loading || state.db.partialLoading) && (\n        <>\n          <ProgressIndicator\n            css={css`\n              position: absolute !important;\n              top: 0px;\n              left: 0px;\n              right: 0px;\n              z-index: 20;\n              pointer-events: none;\n              > div {\n                margin: 0px;\n                padding: 0px;\n              }\n            `}\n          />\n        </>\n      )}\n\n      <Loading show={state.db.loading || isEmpty}>\n        {isEmpty && !state.db.loading ? (\n          <span className=\"text-gray-700 flex flex-col items-center\">\n            <Icon\n              iconName=\"FileTemplate\"\n              css={css`\n                font-size: 24px;\n              `}\n            />\n            <>Data Not Found</>\n          </span>\n        ) : (\n          <>\n            {(state.db.tableName || state.db.sql) && (\n              <>\n                <Spinner size={SpinnerSize.large} className=\"pb-2\" />\n                {(!state.db.list || state.db.list.length === 0) && 'Loading'}\n              </>\n            )}\n          </>\n        )}\n      </Loading>\n\n      <ScrollablePane\n        scrollbarVisibility={ScrollbarVisibility.auto}\n        componentRef={(e: any) => {\n          if (e) {\n            e.unsubscribe(meta.onScroll)\n            e.subscribe(meta.onScroll)\n            setTimeout(() => {\n              if (e.contentContainer && state.table.lastScroll) {\n                e.contentContainer.scrollLeft = state.table.lastScroll.x\n                e.contentContainer.scrollTop = state.table.lastScroll.y\n              }\n            })\n          }\n        }}\n      >\n        <DetailsList\n          selectionPreservedOnEmptyClick\n          selectionMode={\n            state.table.web.checkbox\n              ? SelectionMode.multiple\n              : SelectionMode.none\n          }\n          items={items}\n          componentRef={(e) => {\n            if (!!e) meta.ref = e\n          }}\n          constrainMode={ConstrainMode.unconstrained}\n          checkboxVisibility={\n            state.table.web.checkbox\n              ? CheckboxVisibility.onHover\n              : CheckboxVisibility.hidden\n          }\n          // onActiveItemChanged={(props) => {\n          //   console.log(props)\n          // }}\n          onRenderDetailsHeader={\n            state.table.web.showHeader === false\n              ? () => {\n                  return null\n                }\n              : (props, defaultRender) => {\n                  if (!props) {\n                    return null\n                  }\n                  const onRenderColumnHeaderTooltip = (tooltipHostProps) => (\n                    <TooltipHost {...tooltipHostProps} />\n                  )\n                  return (\n                    <Sticky\n                      stickyPosition={StickyPositionType.Header}\n                      isScrollSynced\n                    >\n                      {defaultRender!({\n                        ...props,\n                        onRenderColumnHeaderTooltip,\n                      })}\n                    </Sticky>\n                  )\n                }\n          }\n          onColumnHeaderClick={(_, col) => {\n            if (col && col.fieldName) {\n              if (state.db.setSort(col.fieldName)) {\n                state.db.query('sort')\n              }\n            }\n          }}\n          columns={\n            grid\n              ? [\n                  {\n                    key: 0,\n                    idx: 0,\n                    fieldName: '_',\n                    name: '_',\n                    isResizable: false,\n                    customRender: render,\n                  },\n                ]\n              : convertColumns(state)\n          }\n          onShouldVirtualize={() => true}\n          compact={true}\n          onRenderRow={(rowProps, defaultRender) => {\n            if (!rowProps) return null\n            meta.lateQuery(rowProps.item)\n\n            if (state.grid) {\n              if (Array.isArray(rowProps.item)) {\n                return (\n                  <div\n                    className=\"flex flex-row items-stretch\"\n                    css={css`\n                      > div {\n                        flex: 1;\n                      }\n                    `}\n                  >\n                    {rowProps.item.map((e, key) => {\n                      return (\n                        <BaseListWebRow\n                          key={key}\n                          ctx={ctx}\n                          row={e}\n                          idx={rowProps.itemIndex}\n                          rowProps={rowProps}\n                        >\n                          {(rp) =>\n                            (defaultRender && defaultRender(rp)) || <></>\n                          }\n                        </BaseListWebRow>\n                      )\n                    })}\n                  </div>\n                )\n              }\n            }\n\n            return (\n              <BaseListWebRow\n                ctx={ctx}\n                row={rowProps.item}\n                idx={rowProps.itemIndex}\n                rowProps={rowProps}\n              >\n                {(rp) => (defaultRender && defaultRender(rp)) || <></>}\n              </BaseListWebRow>\n            )\n          }}\n          onRenderItemColumn={(row, idx, column) => {\n            if (column)\n              return (\n                <BaseListWebCol\n                  ctx={ctx}\n                  row={row}\n                  idx={idx || 0}\n                  colDef={column}\n                />\n              )\n          }}\n        />\n      </ScrollablePane>\n    </div>\n  )\n}\n\nconst convertColumns = (state: IBaseListContext) => {\n  const columns = state.table.columns\n  const params = state.db.params\n\n  if (!Array.isArray(columns)) return []\n\n  return columns\n    .filter((e) => !!e)\n    .map((column, idx) => {\n      let colName = ''\n      let title = ''\n      let render: any = null\n\n      const format = (col: any) => {\n        if (col.key) {\n          colName = col.key\n        }\n        if (col.title) {\n          title = col.title\n        } else {\n          title = niceCase(colName)\n        }\n      }\n\n      if (typeof column === 'function') {\n      } else if (typeof column === 'string') {\n        colName = column\n        title = niceCase(colName)\n      } else if (Array.isArray(column)) {\n        colName = column[0] as any\n        if (column[1]) {\n          format(column[1])\n        }\n      }\n\n      const result: any = {\n        key: idx.toString(),\n        idx,\n        fieldName: colName,\n        name: title,\n        isResizable: true,\n        minWidth: 60,\n        maxWidth: 120,\n        customRender: render,\n      }\n\n      if (Array.isArray(column)) {\n        if (column[1] && column[1].width) {\n          result.minWidth = column[1].width\n          result.maxWidth = column[1].width\n        }\n      }\n\n      const orderBy = baseListFormatOrder(get(params, 'orderBy') || [])\n      if (orderBy && orderBy.length > 0) {\n        const ord = orderBy[0]\n        const [k, v] = Object.entries(ord)[0]\n\n        if (colName.indexOf('.') > 0) {\n          const col = colName.split('.')\n\n          const ordLen =\n            col.length === 3\n              ? `${col[0]}.${col[1]}.${col[2]}`\n              : `${col[0]}.${col[1]}`\n          const ordering = get(ord, ordLen)\n          if (ordering) {\n            result.isSorted = true\n            result.isSortedDescending = ordering !== 'asc'\n          }\n        } else if (colName === k) {\n          result.isSorted = true\n          result.isSortedDescending = v !== 'asc'\n        }\n      }\n\n      return result\n    })\n}\n", "import * as React from 'react';\nimport { classNamesFunction, divProperties, getNativeProps } from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { ITooltipProps, ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\n\nconst getClassNames = classNamesFunction<ITooltipStyleProps, ITooltipStyles>();\n\nexport class TooltipBase extends React.Component<ITooltipProps, any> {\n  // Specify default props values\n  public static defaultProps: Partial<ITooltipProps> = {\n    directionalHint: DirectionalHint.topCenter,\n    maxWidth: '364px',\n    calloutProps: {\n      isBeakVisible: true,\n      beakWidth: 16,\n      gapSpace: 0,\n      setInitialFocus: true,\n      doNotLayer: false,\n    },\n  };\n\n  private _classNames: IProcessedStyleSet<ITooltipStyles>;\n\n  public render(): JSX.Element {\n    const {\n      className,\n      calloutProps,\n      directionalHint,\n      directionalHintForRTL,\n      styles,\n      id,\n      maxWidth,\n      onRenderContent = this._onRenderContent,\n      targetElement,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: className || (calloutProps && calloutProps.className),\n      beakWidth: calloutProps && calloutProps.beakWidth,\n      gapSpace: calloutProps && calloutProps.gapSpace,\n      maxWidth: maxWidth!,\n    });\n\n    return (\n      <Callout\n        target={targetElement}\n        directionalHint={directionalHint}\n        directionalHintForRTL={directionalHintForRTL}\n        {...calloutProps}\n        {...getNativeProps(this.props, divProperties, ['id'])} // omitting ID due to it being used in the div below\n        className={this._classNames.root}\n      >\n        <div\n          className={this._classNames.content}\n          id={id}\n          onMouseEnter={this.props.onMouseEnter}\n          onMouseLeave={this.props.onMouseLeave}\n        >\n          {onRenderContent(this.props, this._onRenderContent)}\n        </div>\n      </Callout>\n    );\n  }\n\n  private _onRenderContent = (props: ITooltipProps): JSX.Element => {\n    if (typeof props.content === 'string') {\n      return <p className={this._classNames.subText}>{props.content}</p>;\n    } else {\n      return <div className={this._classNames.subText}>{props.content}</div>;\n    }\n  };\n}\n", "import { AnimationClassNames } from '../../Styling';\nimport type { ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\n\nexport const getStyles = (props: ITooltipStyleProps): ITooltipStyles => {\n  const { className, beakWidth = 16, gapSpace = 0, maxWidth, theme } = props;\n  const { semanticColors, fonts, effects } = theme;\n\n  // The math here is done to account for the 45 degree rotation of the beak\n  // and sub-pixel rounding that differs across browsers, which is more noticeable when\n  // the device pixel ratio is larger\n  const tooltipGapSpace = -(Math.sqrt((beakWidth * beakWidth) / 2) + gapSpace) + 1 / window.devicePixelRatio;\n\n  return {\n    root: [\n      'ms-Tooltip',\n      theme.fonts.medium,\n      AnimationClassNames.fadeIn200,\n      {\n        background: semanticColors.menuBackground,\n        boxShadow: effects.elevation8,\n        padding: '8px',\n        maxWidth: maxWidth,\n        selectors: {\n          ':after': {\n            content: `''`,\n            position: 'absolute',\n            bottom: tooltipGapSpace,\n            left: tooltipGapSpace,\n            right: tooltipGapSpace,\n            top: tooltipGapSpace,\n            zIndex: 0,\n          },\n        },\n      },\n      className,\n    ],\n    content: [\n      'ms-Tooltip-content',\n      fonts.small,\n      {\n        position: 'relative',\n        zIndex: 1,\n        color: semanticColors.menuItemText,\n        wordWrap: 'break-word',\n        overflowWrap: 'break-word',\n        overflow: 'hidden',\n      },\n    ],\n    subText: [\n      'ms-Tooltip-subtext',\n      {\n        // Using inherit here to avoid unintentional global overrides of the <p> tag.\n        fontSize: 'inherit',\n        fontWeight: 'inherit',\n        color: 'inherit',\n        margin: 0,\n      },\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TooltipBase } from './Tooltip.base';\nimport { getStyles } from './Tooltip.styles';\nimport type { ITooltipProps, ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\n\nexport const Tooltip: React.FunctionComponent<ITooltipProps> = styled<\n  ITooltipProps,\n  ITooltipStyleProps,\n  ITooltipStyles\n>(TooltipBase, getStyles, undefined, {\n  scope: 'Tooltip',\n});\n", "import * as React from 'react';\nimport { TooltipBase } from './Tooltip.base';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport type { ICalloutProps } from '../../Callout';\nimport type { IRenderFunction, IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IStyle, ITheme } from '../../Styling';\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltip {}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipProps extends React.HTMLAttributes<HTMLDivElement | TooltipBase> {\n  /**\n   * Optional callback to access the ITooltip interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ITooltip>;\n\n  /**\n   * Properties to pass through for Callout.\n   * @defaultvalue `{ isBeakVisible: true, beakWidth: 16, gapSpace: 0, setInitialFocus: true, doNotLayer: false }`\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   * Content to be passed to the tooltip\n   */\n  content?: string | JSX.Element | JSX.Element[];\n\n  /**\n   * Render function to populate tooltip content.\n   */\n  onRenderContent?: IRenderFunction<ITooltipProps>;\n\n  /**\n   * Length of delay. Set to `TooltipDelay.zero` if you do not want a delay.\n   * @defaultvalue TooltipDelay.medium\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * Max width of tooltip\n   * @defaultvalue 364px\n   */\n  maxWidth?: string | null;\n\n  /**\n   * Element to anchor the Tooltip to.\n   */\n  targetElement?: HTMLElement;\n\n  /**\n   * How the tooltip should be anchored to its `targetElement`.\n   * @defaultvalue DirectionalHint.topCenter\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * How the element should be positioned in RTL layouts.\n   * If not specified, a mirror of `directionalHint` will be used instead\n   */\n  directionalHintForRTL?: DirectionalHint;\n\n  /**\n   * Theme provided by higher-order component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ITooltipStyleProps, ITooltipStyles>;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport enum TooltipDelay {\n  zero = 0,\n  /** 300 ms delay before showing the tooltip */\n  medium = 1,\n  /** 500 ms delay before showing the tooltip */\n  long = 2,\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipStyleProps {\n  theme: ITheme;\n\n  className?: string;\n\n  /**\n   * Delay before tooltip appears.\n   * @deprecated Delay logic moved to TooltipHost vs relying on animation delay.\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * Maximum width of tooltip.\n   */\n  maxWidth?: string;\n\n  /**\n   * The gap between the Callout and the target\n   * @defaultvalue 0\n   */\n  gapSpace?: number;\n\n  /**\n   * The width of the Callout's beak\n   * @defaultvalue 16\n   */\n  beakWidth?: number;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipStyles {\n  /**\n   * Style for the root element.\n   */\n  root: IStyle;\n\n  /**\n   * Style for the content element.\n   */\n  content: IStyle;\n\n  /**\n   * Style for the subtext element.\n   */\n  subText: IStyle;\n}\n", "import * as React from 'react';\nimport { hiddenContentStyle } from '../../Styling';\nimport {\n  initializeComponentRef,\n  Async,\n  divProperties,\n  getNativeProps,\n  getId,\n  assign,\n  hasOverflow,\n  portalContainsElement,\n  classNamesFunction,\n  KeyCodes,\n} from '../../Utilities';\nimport { TooltipOverflowMode } from './TooltipHost.types';\nimport { Tooltip } from './Tooltip';\nimport { TooltipDelay } from './Tooltip.types';\nimport type { ITooltipHostProps, ITooltipHostStyles, ITooltipHostStyleProps, ITooltipHost } from './TooltipHost.types';\n\nexport interface ITooltipHostState {\n  isAriaPlaceholderRendered: boolean;\n  isTooltipVisible: boolean;\n}\n\nconst getClassNames = classNamesFunction<ITooltipHostStyleProps, ITooltipHostStyles>();\n\nexport class TooltipHostBase extends React.Component<ITooltipHostProps, ITooltipHostState> implements ITooltipHost {\n  public static defaultProps = {\n    delay: TooltipDelay.medium,\n  };\n\n  private static _currentVisibleTooltip: ITooltipHost | undefined;\n\n  // The wrapping div that gets the hover events\n  private _tooltipHost = React.createRef<HTMLDivElement>();\n\n  private _classNames: { [key in keyof ITooltipHostStyles]: string };\n  private _async: Async;\n  private _dismissTimerId: number;\n  private _openTimerId: number;\n  private _defaultTooltipId = getId('tooltip');\n  private _ignoreNextFocusEvent: boolean;\n\n  // Constructor\n  constructor(props: ITooltipHostProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      isAriaPlaceholderRendered: false,\n      isTooltipVisible: false,\n    };\n\n    this._async = new Async(this);\n  }\n\n  // Render\n  public render(): JSX.Element {\n    const {\n      calloutProps,\n      children,\n      content,\n      directionalHint,\n      directionalHintForRTL,\n      hostClassName: className,\n      id,\n      // eslint-disable-next-line deprecation/deprecation\n      setAriaDescribedBy = true,\n      tooltipProps,\n      styles,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n\n    const { isAriaPlaceholderRendered, isTooltipVisible } = this.state;\n    const tooltipId = id || this._defaultTooltipId;\n    const isContentPresent = !!(\n      content ||\n      (tooltipProps && tooltipProps.onRenderContent && tooltipProps.onRenderContent())\n    );\n    const showTooltip = isTooltipVisible && isContentPresent;\n    const ariaDescribedBy = setAriaDescribedBy && isTooltipVisible && isContentPresent ? tooltipId : undefined;\n\n    return (\n      <div\n        className={this._classNames.root}\n        ref={this._tooltipHost}\n        {...{ onFocusCapture: this._onTooltipFocus }}\n        {...{ onBlurCapture: this._onTooltipBlur }}\n        onMouseEnter={this._onTooltipMouseEnter}\n        onMouseLeave={this._onTooltipMouseLeave}\n        onKeyDown={this._onTooltipKeyDown}\n        role=\"none\"\n        // WARNING: aria-describedby on this node provides no value, since it isn't allowed generic elements\n        aria-describedby={ariaDescribedBy}\n      >\n        {children}\n        {showTooltip && (\n          <Tooltip\n            id={tooltipId}\n            content={content}\n            targetElement={this._getTargetElement()}\n            directionalHint={directionalHint}\n            directionalHintForRTL={directionalHintForRTL}\n            calloutProps={assign({}, calloutProps, {\n              onDismiss: this._hideTooltip,\n              onMouseEnter: this._onTooltipMouseEnter,\n              onMouseLeave: this._onTooltipMouseLeave,\n            })}\n            onMouseEnter={this._onTooltipMouseEnter}\n            onMouseLeave={this._onTooltipMouseLeave}\n            {...getNativeProps(this.props, divProperties)}\n            {...tooltipProps}\n          />\n        )}\n        {isAriaPlaceholderRendered && (\n          <div id={tooltipId} role=\"none\" style={hiddenContentStyle as React.CSSProperties}>\n            {content}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  public componentWillUnmount(): void {\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n\n    this._async.dispose();\n  }\n\n  public show = (): void => {\n    this._toggleTooltip(true);\n  };\n\n  public dismiss = (): void => {\n    this._hideTooltip();\n  };\n\n  private _getTargetElement = (): HTMLElement | undefined => {\n    if (!this._tooltipHost.current) {\n      return undefined;\n    }\n\n    const { overflowMode } = this.props;\n\n    // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\n    // to the parent element, otherwise it might look off.\n    if (overflowMode !== undefined) {\n      switch (overflowMode) {\n        case TooltipOverflowMode.Parent:\n          return this._tooltipHost.current.parentElement!;\n\n        case TooltipOverflowMode.Self:\n          return this._tooltipHost.current;\n      }\n    }\n\n    return this._tooltipHost.current;\n  };\n\n  private _onTooltipFocus = (ev: React.FocusEvent<HTMLElement>) => {\n    if (this._ignoreNextFocusEvent) {\n      this._ignoreNextFocusEvent = false;\n      return;\n    }\n\n    this._onTooltipMouseEnter(ev);\n  };\n\n  private _onTooltipBlur = (ev: React.FocusEvent<HTMLElement>) => {\n    // The focused element gets a blur event when the document loses focus\n    // (e.g. switching tabs in the browser), but we don't want to show the\n    // tooltip again when the document gets focus back. Handle this case by\n    // checking if the blurred element is still the document's activeElement,\n    // and ignoring when it next gets focus back.\n    // See https://github.com/microsoft/fluentui/issues/13541\n    this._ignoreNextFocusEvent = document?.activeElement === ev.target;\n\n    this._hideTooltip();\n  };\n\n  // Show Tooltip\n  private _onTooltipMouseEnter = (ev: any): void => {\n    const { overflowMode, delay } = this.props;\n\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip !== this) {\n      TooltipHostBase._currentVisibleTooltip.dismiss();\n    }\n    TooltipHostBase._currentVisibleTooltip = this;\n\n    if (overflowMode !== undefined) {\n      const overflowElement = this._getTargetElement();\n      if (overflowElement && !hasOverflow(overflowElement)) {\n        return;\n      }\n    }\n\n    if (ev.target && portalContainsElement(ev.target as HTMLElement, this._getTargetElement())) {\n      // Do not show tooltip when target is inside a portal relative to TooltipHost.\n      return;\n    }\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (delay !== TooltipDelay.zero) {\n      this.setState({ isAriaPlaceholderRendered: true });\n      const delayTime = this._getDelayTime(delay!); // non-null assertion because we set it in `defaultProps`\n\n      this._openTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(true);\n      }, delayTime);\n    } else {\n      this._toggleTooltip(true);\n    }\n  };\n\n  // Hide Tooltip\n  private _onTooltipMouseLeave = (ev: any): void => {\n    const { closeDelay } = this.props;\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (closeDelay) {\n      this._dismissTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(false);\n      }, closeDelay);\n    } else {\n      this._toggleTooltip(false);\n    }\n\n    if (TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n  };\n\n  private _onTooltipKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if ((ev.which === KeyCodes.escape || ev.ctrlKey) && this.state.isTooltipVisible) {\n      this._hideTooltip();\n      ev.stopPropagation();\n    }\n  };\n\n  private _clearDismissTimer = (): void => {\n    this._async.clearTimeout(this._dismissTimerId);\n  };\n\n  private _clearOpenTimer = (): void => {\n    this._async.clearTimeout(this._openTimerId);\n  };\n\n  // Hide Tooltip\n  private _hideTooltip = (): void => {\n    this._clearOpenTimer();\n    this._clearDismissTimer();\n    this._toggleTooltip(false);\n  };\n\n  private _toggleTooltip = (isTooltipVisible: boolean): void => {\n    if (this.state.isTooltipVisible !== isTooltipVisible) {\n      this.setState(\n        { isAriaPlaceholderRendered: false, isTooltipVisible },\n        () => this.props.onTooltipToggle && this.props.onTooltipToggle(isTooltipVisible),\n      );\n    }\n  };\n\n  private _getDelayTime = (delay: TooltipDelay): number => {\n    switch (delay) {\n      case TooltipDelay.medium:\n        return 300;\n      case TooltipDelay.long:\n        return 500;\n      default:\n        return 0;\n    }\n  };\n}\n", "import * as React from 'react';\nimport { TooltipHostBase } from './TooltipHost.base';\nimport { TooltipDelay } from './Tooltip.types';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport type { ITooltipProps } from './Tooltip.types';\nimport type { ICalloutProps } from '../../Callout';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IStyle, ITheme } from '../../Styling';\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHost {\n  /**\n   * Shows the tooltip.\n   */\n  show: () => void;\n\n  /**\n   * Dismisses the tooltip.\n   */\n  dismiss: () => void;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport enum TooltipOverflowMode {\n  /** Only show tooltip if parent DOM element is overflowing */\n  Parent,\n\n  /**\n   * Only show tooltip if tooltip host's content is overflowing.\n   * Note that this does not check the children for overflow, only the TooltipHost root.\n   */\n  Self,\n}\n\n/**\n * TooltipHost props. Note that native props (such as `id`, `className`, and `aria-` props) are\n * passed through to the Tooltip itself, rather than being used on the host element.\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHostProps extends React.HTMLAttributes<HTMLDivElement | TooltipHostBase> {\n  /**\n   * Optional callback to access the ITooltipHost interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ITooltipHost>;\n\n  /**\n   * Additional properties to pass through for Callout.\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   * Number of milliseconds to delay closing the tooltip, so that the user has time to hover over\n   * the tooltip and interact with it. Hovering over the tooltip will count as hovering over the\n   * host, so that the tooltip will stay open if the user is actively interacting with it.\n   */\n  closeDelay?: number;\n\n  /**\n   * Content to display in the Tooltip.\n   */\n  content?: string | JSX.Element | JSX.Element[];\n\n  /**\n   * Length of delay before showing the tooltip on hover.\n   * @defaultvalue TooltipDelay.medium\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * How the tooltip should be anchored to its `targetElement`.\n   * @defaultvalue DirectionalHint.topCenter\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * How the element should be positioned in RTL layouts.\n   * If not specified, a mirror of `directionalHint` will be used.\n   */\n  directionalHintForRTL?: DirectionalHint;\n\n  /**\n   * Class name to apply to tooltip host.\n   */\n  hostClassName?: string;\n\n  /**\n   * Class name to apply to the *tooltip itself*, not the host.\n   * To apply a class to the host, use `hostClassName` or `styles.root`.\n   */\n  className?: string;\n\n  /**\n   * If this is unset (the default), the tooltip is always shown even if there's no overflow.\n   *\n   * If set, only show the tooltip if the specified element (`Self` or `Parent`) has overflow.\n   * When set to `Parent`, the parent element is also used as the tooltip's target element.\n   *\n   * Note that even with `Self` mode, the TooltipHost *does not* check whether any children have overflow.\n   */\n  overflowMode?: TooltipOverflowMode;\n\n  /**\n   * Whether or not to mark the TooltipHost root element as described by the tooltip.\n   * Since this applies aria-describedby to a generic <div>, the description will not be\n   * read by screen readers. Instead, the caller should pass an `id` to the TooltipHost\n   * (to be passed through to the Tooltip) and mark the appropriate element as `aria-describedby`\n   * with the `id`.\n   * @defaultvalue true\n   * @deprecated use aria-describedby on the appropriate element instead\n   */\n  setAriaDescribedBy?: boolean;\n\n  /**\n   * Additional properties to pass through for Tooltip.\n   */\n  tooltipProps?: ITooltipProps;\n\n  /**\n   * Optional ID to pass through to the tooltip (not used on the host itself).\n   * Auto-generated if not provided.\n   */\n  id?: string;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ITooltipHostStyleProps, ITooltipHostStyles>;\n\n  /**\n   * Theme provided by higher-order component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Notifies when tooltip becomes visible or hidden, whatever the trigger was.\n   */\n  onTooltipToggle?(isTooltipVisible: boolean): void;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHostStyleProps {\n  theme: ITheme;\n  className?: string;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHostStyles {\n  /**\n   * Style for the host wrapper element.\n   */\n  root: IStyle;\n}\n", "import { getGlobalClassNames } from '../../Styling';\nimport type { ITooltipHostStyleProps, ITooltipHostStyles } from './TooltipHost.types';\n\nconst GlobalClassNames = {\n  root: 'ms-TooltipHost',\n  ariaPlaceholder: 'ms-TooltipHost-aria-placeholder',\n};\n\nexport const getStyles = (props: ITooltipHostStyleProps): ITooltipHostStyles => {\n  const { className, theme } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'inline',\n      },\n      className,\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TooltipHostBase } from './TooltipHost.base';\nimport { getStyles } from './TooltipHost.styles';\nimport type { ITooltipHostProps, ITooltipHostStyleProps, ITooltipHostStyles } from './TooltipHost.types';\n\nexport const TooltipHost: React.FunctionComponent<ITooltipHostProps> = styled<\n  ITooltipHostProps,\n  ITooltipHostStyleProps,\n  ITooltipHostStyles\n>(TooltipHostBase, getStyles, undefined, {\n  scope: 'TooltipHost',\n});\n", "import * as React from 'react';\nimport { useLink } from './useLink';\nimport type { ILinkProps } from './Link.types';\n\nexport const LinkBase: React.FunctionComponent<ILinkProps> = React.forwardRef<HTMLElement, ILinkProps>((props, ref) => {\n  const { slots, slotProps } = useLink(props, ref);\n\n  return <slots.root {...slotProps.root} />;\n});\n\nLinkBase.displayName = 'LinkBase';\n", "import * as React from 'react';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport { classNamesFunction, useFocusRects } from '@fluentui/utilities';\nimport type { ILink, ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\n\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\n\n/**\n * The useLink hook processes the Link component props and returns\n * state, slots and slotProps for consumption by the component.\n */\nexport const useLink = (props: ILinkProps, forwardedRef: React.Ref<HTMLElement>): any => {\n  const { as, className, disabled, href, onClick, styles, theme, underline } = props;\n  const rootRef = React.useRef<HTMLDivElement | null>(null);\n  const mergedRootRefs: React.Ref<HTMLElement> = useMergedRefs(rootRef, forwardedRef);\n\n  useComponentRef(props, rootRef);\n  useFocusRects(rootRef);\n\n  const classNames = getClassNames(styles!, {\n    className,\n    isButton: !href,\n    isDisabled: disabled,\n    isUnderlined: underline,\n    theme: theme!,\n  });\n\n  const _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  const rootType = as ? as : href ? 'a' : 'button';\n\n  const state = {};\n  const slots = { root: rootType };\n  const slotProps = {\n    root: {\n      ...adjustPropsForRootType(rootType, props),\n      'aria-disabled': disabled,\n      className: classNames.root,\n      onClick: _onClick,\n      ref: mergedRootRefs,\n    },\n  };\n\n  return { state, slots, slotProps };\n};\n\nconst useComponentRef = (props: ILinkProps, link: React.RefObject<ILink>) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      focus() {\n        if (link.current) {\n          link.current.focus();\n        }\n      },\n    }),\n    [link],\n  );\n};\n\nconst adjustPropsForRootType = (\n  RootType: string | React.ComponentClass | React.FunctionComponent,\n  props: ILinkProps & { getStyles?: any },\n): Partial<ILinkProps> => {\n  // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n  // as those will always be removed. We also take some props that are optional\n  // based on the RootType.\n  const { as, disabled, target, href, theme, getStyles, styles, componentRef, underline, ...restProps } = props;\n\n  // RootType will be a string if we're dealing with an html component\n  if (typeof RootType === 'string') {\n    // Remove the disabled prop for anchor elements\n    if (RootType === 'a') {\n      return {\n        target,\n        href: disabled ? undefined : href,\n        ...restProps,\n      };\n    }\n\n    // Add the type='button' prop for button elements\n    if (RootType === 'button') {\n      return {\n        type: 'button',\n        disabled,\n        ...restProps,\n      };\n    }\n\n    // Remove the target and href props for all other non anchor elements\n    return { ...restProps, disabled };\n  }\n\n  // Retain all props except 'as' for ReactComponents\n  return { target, href, disabled, ...restProps };\n};\n", "import { getGlobalClassNames, HighContrastSelector } from '@fluentui/style-utilities';\nimport type { ILinkStyleProps, ILinkStyles } from './Link.types';\n\nexport const GlobalClassNames = {\n  root: 'ms-Link',\n};\n\nexport const getStyles = (props: ILinkStyleProps): ILinkStyles => {\n  const { className, isButton, isDisabled, isUnderlined, theme } = props;\n  const { semanticColors } = theme;\n\n  // Tokens\n  const linkColor = semanticColors.link;\n  const linkInteractedColor = semanticColors.linkHovered;\n  const linkDisabledColor = semanticColors.disabledText;\n  const focusBorderColor = semanticColors.focusBorder;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        color: linkColor,\n        outline: 'none',\n        fontSize: 'inherit',\n        fontWeight: 'inherit',\n        textDecoration: isUnderlined ? 'underline' : 'none',\n\n        selectors: {\n          '.ms-Fabric--isFocusVisible &:focus': {\n            // Can't use getFocusStyle because it doesn't support wrapping links\n            // https://github.com/microsoft/fluentui/issues/4883#issuecomment-406743543\n            // Using box-shadow and outline allows the focus rect to wrap links that span multiple lines\n            // and helps the focus rect avoid getting clipped.\n            boxShadow: `0 0 0 1px ${focusBorderColor} inset`,\n            outline: `1px auto ${focusBorderColor}`,\n            selectors: {\n              [HighContrastSelector]: {\n                outline: '1px solid WindowText',\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            // For IE high contrast mode\n            borderBottom: 'none',\n          },\n        },\n      },\n      isButton && {\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        cursor: 'pointer',\n        display: 'inline',\n        margin: 0,\n        overflow: 'inherit',\n        padding: 0,\n        textAlign: 'left',\n        textOverflow: 'inherit',\n        userSelect: 'text',\n        borderBottom: '1px solid transparent', // For Firefox high contrast mode\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'LinkText',\n            forcedColorAdjust: 'none',\n          },\n        },\n      },\n      !isButton && {\n        selectors: {\n          [HighContrastSelector]: {\n            // This is mainly for MessageBar, which sets MsHighContrastAdjust: none by default\n            MsHighContrastAdjust: 'auto',\n            forcedColorAdjust: 'auto',\n          },\n        },\n      },\n\n      isDisabled && [\n        'is-disabled',\n        {\n          color: linkDisabledColor,\n          cursor: 'default',\n        },\n        {\n          selectors: {\n            '&:link, &:visited': {\n              pointerEvents: 'none',\n            },\n          },\n        },\n      ],\n      !isDisabled && {\n        selectors: {\n          '&:active, &:hover, &:active:hover': {\n            color: linkInteractedColor,\n            textDecoration: 'underline',\n\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'LinkText',\n              },\n            },\n          },\n          '&:focus': {\n            color: linkColor,\n\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'LinkText',\n              },\n            },\n          },\n        },\n      },\n      classNames.root,\n      className,\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '@fluentui/utilities';\nimport { LinkBase } from './Link.base';\nimport { getStyles } from './Link.styles';\nimport type { ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\n\nexport const Link: React.FunctionComponent<ILinkProps> = styled<ILinkProps, ILinkStyleProps, ILinkStyles>(\n  LinkBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Link',\n  },\n);\n", "import * as React from 'react';\nimport { Icon, FontIcon } from '../../Icon';\nimport { classNamesFunction } from '../../Utilities';\nimport type { ICheckProps, ICheckStyleProps, ICheckStyles } from './Check.types';\n\nconst getClassNames = classNamesFunction<ICheckStyleProps, ICheckStyles>();\n\nexport const CheckBase: React.FunctionComponent<ICheckProps> = React.forwardRef<HTMLDivElement, ICheckProps>(\n  (props, ref) => {\n    const { checked = false, className, theme, styles, useFastIcons = true } = props;\n\n    const classNames = getClassNames(styles!, { theme: theme!, className, checked });\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    return (\n      <div className={classNames.root} ref={ref}>\n        <IconComponent iconName=\"CircleRing\" className={classNames.circle} />\n        <IconComponent iconName=\"StatusCircleCheckmark\" className={classNames.check} />\n      </div>\n    );\n  },\n);\nCheckBase.displayName = 'CheckBase';\n", "import { HighContrastSelector, getGlobalClassNames, IconFontSizes, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { getRTL } from '../../Utilities';\nimport type { ICheckStyleProps, ICheckStyles } from './Check.types';\nimport type { IStyle } from '../../Styling';\n\nexport const CheckGlobalClassNames = {\n  root: 'ms-Check',\n  circle: 'ms-Check-circle',\n  check: 'ms-Check-check',\n  /** Must be manually applied to the parent element of the check. */\n  checkHost: 'ms-Check-checkHost',\n};\n\nexport const getStyles = (props: ICheckStyleProps): ICheckStyles => {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height = props.checkBoxHeight || '18px', checked, className, theme } = props;\n\n  const { palette, semanticColors, fonts } = theme;\n  const isRTL = getRTL(theme);\n\n  const classNames = getGlobalClassNames(CheckGlobalClassNames, theme);\n\n  const sharedCircleCheck: IStyle = {\n    fontSize: height,\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    width: height,\n    height: height,\n    textAlign: 'center',\n    // inline-flex prevents the check from shifting with custom line height styles\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    verticalAlign: 'middle',\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      {\n        // lineHeight currently needs to be a string to output without 'px'\n        lineHeight: '1',\n        width: height,\n        height: height,\n        verticalAlign: 'top',\n        position: 'relative',\n        userSelect: 'none',\n\n        selectors: {\n          ':before': {\n            content: '\"\"',\n            position: 'absolute',\n            top: '1px',\n            right: '1px',\n            bottom: '1px',\n            left: '1px',\n            borderRadius: '50%',\n            opacity: 1,\n            background: semanticColors.bodyBackground,\n          },\n\n          [`.${classNames.checkHost}:hover &, .${classNames.checkHost}:focus &, &:hover, &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n\n      checked && [\n        'is-checked',\n        {\n          selectors: {\n            ':before': {\n              background: palette.themePrimary,\n              opacity: 1,\n              selectors: {\n                [HighContrastSelector]: {\n                  background: 'Window',\n                },\n              },\n            },\n          },\n        },\n      ],\n      className,\n    ],\n\n    circle: [\n      classNames.circle,\n      sharedCircleCheck,\n\n      {\n        color: palette.neutralSecondary,\n\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'WindowText',\n          },\n        },\n      },\n\n      checked && {\n        color: palette.white,\n      },\n    ],\n\n    check: [\n      classNames.check,\n      sharedCircleCheck,\n\n      {\n        opacity: 0,\n        color: palette.neutralSecondary,\n        fontSize: IconFontSizes.medium,\n        left: isRTL ? '-0.5px' : '.5px', // for centering the check icon inside the circle.\n        top: '-1px', // the check is slightly lower than center compared to the circle.\n\n        selectors: {\n          ':hover': {\n            opacity: 1,\n          },\n\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      checked && {\n        opacity: 1,\n        color: palette.white,\n        fontWeight: 900,\n\n        selectors: {\n          [HighContrastSelector]: {\n            border: 'none',\n            color: 'WindowText',\n          },\n        },\n      },\n    ],\n\n    checkHost: classNames.checkHost,\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { CheckBase } from './Check.base';\nimport { getStyles } from './Check.styles';\nimport type { ICheckProps, ICheckStyleProps, ICheckStyles } from './Check.types';\n\nexport const Check: React.FunctionComponent<ICheckProps> = styled<ICheckProps, ICheckStyleProps, ICheckStyles>(\n  CheckBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Check',\n  },\n  true,\n);\n", "import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  css,\n  divProperties,\n  findIndex,\n  findScrollableParent,\n  getNativeProps,\n  getParent,\n  getWindow,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { ScrollToMode } from './List.types';\nimport { composeRenderFunction } from '../../Utilities';\nimport type { IRectangle, IRenderFunction } from '../../Utilities';\nimport type {\n  IList,\n  IListProps,\n  IPage,\n  IPageProps,\n  IListOnRenderSurfaceProps,\n  IListOnRenderRootProps,\n} from './List.types';\n\nconst RESIZE_DELAY = 16;\nconst MIN_SCROLL_UPDATE_DELAY = 100;\nconst MAX_SCROLL_UPDATE_DELAY = 500;\nconst IDLE_DEBOUNCE_DELAY = 200;\n// The amount of time to wait before declaring that the list isn't scrolling\nconst DONE_SCROLLING_WAIT = 500;\nconst DEFAULT_ITEMS_PER_PAGE = 10;\nconst DEFAULT_PAGE_HEIGHT = 30;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst PAGE_KEY_PREFIX = 'page-';\nconst SPACER_KEY_PREFIX = 'spacer-';\n\nexport interface IListState<T = any> {\n  pages?: IPage<T>[];\n\n  /** The last versionstamp for  */\n  measureVersion?: number;\n  isScrolling?: boolean;\n  getDerivedStateFromProps(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T>;\n}\n\ninterface IPageCacheItem<T> {\n  page: IPage<T>;\n  pageElement?: JSX.Element;\n}\n\ninterface IPageCache<T> {\n  [key: string]: IPageCacheItem<T>;\n}\n\nconst EMPTY_RECT = {\n  top: -1,\n  bottom: -1,\n  left: -1,\n  right: -1,\n  width: 0,\n  height: 0,\n};\n\n// Naming expensive measures so that they're named in profiles.\nconst _measurePageRect = (element: HTMLElement) => element.getBoundingClientRect();\nconst _measureSurfaceRect = _measurePageRect;\nconst _measureScrollRect = _measurePageRect;\n\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback\n * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if\n * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.\n * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\nexport class List<T = any> extends React.Component<IListProps<T>, IListState<T>> implements IList {\n  public static defaultProps = {\n    startIndex: 0,\n    onRenderCell: (item: any, index: number, containsFocus: boolean) => <>{(item && item.name) || ''}</>,\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND,\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _surface = React.createRef<HTMLDivElement>();\n  private _pageRefs: Record<string, unknown> = {};\n  private _async: Async;\n  private _events: EventGroup;\n  private _estimatedPageHeight: number;\n  private _totalEstimates: number;\n  private _cachedPageHeights: {\n    [key: string]: {\n      height: number;\n      measureVersion: number;\n    };\n  };\n  private _focusedIndex: number;\n  private _scrollElement?: HTMLElement;\n  private _hasCompletedFirstRender: boolean;\n\n  // surface rect relative to window\n  private _surfaceRect: IRectangle | undefined;\n\n  // The visible rect that we're required to render given the current list state.\n  private _requiredRect: IRectangle | null;\n\n  // The visible rect that we're allowed to keep rendered. Pages outside of this rect will be removed.\n  private _allowedRect: IRectangle;\n\n  // The rect that is visible to the user\n  private _visibleRect: IRectangle | undefined;\n\n  // materialized rect around visible items, relative to surface\n  private _materializedRect: IRectangle | null;\n\n  private _requiredWindowsAhead: number;\n  private _requiredWindowsBehind: number;\n\n  private _measureVersion: number;\n  private _scrollHeight?: number;\n  private _scrollTop: number;\n  private _pageCache: IPageCache<T>;\n\n  public static getDerivedStateFromProps<U = any>(\n    nextProps: IListProps<U>,\n    previousState: IListState<U>,\n  ): IListState<U> {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IListProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      pages: [],\n      isScrolling: false,\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    this._estimatedPageHeight = 0;\n    this._totalEstimates = 0;\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n\n    // Track the measure version for everything.\n    this._measureVersion = 0;\n\n    // Ensure that scrolls are lazy updated.\n    this._onAsyncScroll = this._async.debounce(this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {\n      leading: false,\n      maxWait: MAX_SCROLL_UPDATE_DELAY,\n    });\n\n    this._onAsyncIdle = this._async.debounce(this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {\n      leading: false,\n    });\n\n    this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n      leading: false,\n    });\n\n    this._onScrollingDone = this._async.debounce(this._onScrollingDone, DONE_SCROLLING_WAIT, {\n      leading: false,\n    });\n\n    this._cachedPageHeights = {};\n    this._estimatedPageHeight = 0;\n    this._focusedIndex = -1;\n    this._pageCache = {};\n  }\n\n  public get pageRefs(): Readonly<Record<string, unknown>> {\n    return this._pageRefs;\n  }\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\n   */\n  public scrollToIndex(\n    index: number,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode: ScrollToMode = ScrollToMode.auto,\n  ): void {\n    const startIndex = this.props.startIndex as number;\n    const renderCount = this._getRenderCount();\n    const endIndex = startIndex + renderCount;\n\n    const allowedRect = this._allowedRect;\n\n    let scrollTop = 0;\n\n    let itemsPerPage = 1;\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n\n      const pageHeight = pageSpecification.height;\n      itemsPerPage = pageSpecification.itemCount;\n\n      const requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;\n      if (requestedIndexIsInPage) {\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in\n        // just the given item, otherwise we'll only bring the page into view\n        if (measureItem && this._scrollElement) {\n          const scrollRect = _measureScrollRect(this._scrollElement);\n          const scrollWindow = {\n            top: this._scrollElement.scrollTop,\n            bottom: this._scrollElement.scrollTop + scrollRect.height,\n          };\n\n          // Adjust for actual item position within page\n          const itemPositionWithinPage = index - itemIndex;\n          for (let itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\n          }\n          const scrollBottom = scrollTop + measureItem(index);\n\n          // If scrollToMode is set to something other than auto, we always want to\n          // scroll the item into a specific position on the page.\n          switch (scrollToMode) {\n            case ScrollToMode.top:\n              this._scrollElement.scrollTop = scrollTop;\n              return;\n            case ScrollToMode.bottom:\n              this._scrollElement.scrollTop = scrollBottom - scrollRect.height;\n              return;\n            case ScrollToMode.center:\n              this._scrollElement.scrollTop = (scrollTop + scrollBottom - scrollRect.height) / 2;\n              return;\n            case ScrollToMode.auto:\n            default:\n              break;\n          }\n\n          const itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\n          if (itemIsFullyVisible) {\n            // Item is already visible, do nothing.\n            return;\n          }\n\n          const itemIsPartiallyAbove = scrollTop < scrollWindow.top;\n          const itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\n\n          if (itemIsPartiallyAbove) {\n            //  We will just scroll to 'scrollTop'\n            //  .------.   - scrollTop\n            //  |Item  |\n            //  | .----|-. - scrollWindow.top\n            //  '------' |\n            //    |      |\n            //    '------'\n          } else if (itemIsPartiallyBelow) {\n            //  Adjust scrollTop position to just bring in the element\n            // .------.  - scrollTop\n            // |      |\n            // | .------.\n            // '-|----' | - scrollWindow.bottom\n            //   | Item |\n            //   '------' - scrollBottom\n            scrollTop = scrollBottom - scrollRect.height;\n          }\n        }\n\n        if (this._scrollElement) {\n          this._scrollElement.scrollTop = scrollTop;\n        }\n        return;\n      }\n\n      scrollTop += pageHeight;\n    }\n  }\n\n  public getStartItemIndexInView(measureItem?: (itemIndex: number) => number): number {\n    const pages = this.state.pages || [];\n    for (const page of pages) {\n      const isPageVisible =\n        !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;\n      if (isPageVisible) {\n        if (!measureItem) {\n          const rowHeight = Math.floor(page.height / page.itemCount);\n          return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);\n        } else {\n          let totalRowHeight = 0;\n          for (let itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {\n            const rowHeight = measureItem(itemIndex);\n            if (\n              page.top + totalRowHeight <= this._scrollTop &&\n              this._scrollTop < page.top + totalRowHeight + rowHeight\n            ) {\n              return itemIndex;\n            } else {\n              totalRowHeight += rowHeight;\n            }\n          }\n        }\n      }\n    }\n    return 0;\n  }\n\n  public componentDidMount(): void {\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n    this._scrollElement = findScrollableParent(this._root.current) as HTMLElement;\n\n    this._events.on(window, 'resize', this._onAsyncResize);\n    if (this._root.current) {\n      this._events.on(this._root.current, 'focus', this._onFocus, true);\n    }\n    if (this._scrollElement) {\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n    }\n  }\n\n  public componentDidUpdate(): void {\n    // Multiple updates may have been queued, so the callback will reflect all of them.\n    // Re-fetch the current props and states to avoid using a stale props or state captured in the closure.\n    const finalProps = this.props;\n    const finalState = this.state;\n\n    // If we weren't provided with the page height, measure the pages\n    if (!finalProps.getPageHeight) {\n      // If measured version is invalid since we've updated the DOM\n      const heightsChanged = this._updatePageMeasurements(finalState.pages!);\n\n      // On first render, we should re-measure so that we don't get a visual glitch.\n      if (heightsChanged) {\n        this._materializedRect = null;\n        if (!this._hasCompletedFirstRender) {\n          this._hasCompletedFirstRender = true;\n          this.setState(this._updatePages(finalProps, finalState));\n        } else {\n          this._onAsyncScroll();\n        }\n      } else {\n        // Enqueue an idle bump.\n        this._onAsyncIdle();\n      }\n    } else {\n      // Enqueue an idle bump\n      this._onAsyncIdle();\n    }\n\n    // Notify the caller that rendering the new pages has completed\n    if (finalProps.onPagesUpdated) {\n      finalProps.onPagesUpdated(finalState.pages as IPage<T>[]);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n\n    delete this._scrollElement;\n  }\n\n  public shouldComponentUpdate(newProps: IListProps<T>, newState: IListState<T>): boolean {\n    const { pages: oldPages } = this.state;\n    const { pages: newPages } = newState;\n    let shouldComponentUpdate = false;\n\n    // Update if the page stops scrolling\n    if (!newState.isScrolling && this.state.isScrolling) {\n      return true;\n    }\n\n    if (newProps.version !== this.props.version) {\n      return true;\n    }\n\n    if (newProps.items === this.props.items && oldPages!.length === newPages!.length) {\n      for (let i = 0; i < oldPages!.length; i++) {\n        const oldPage = oldPages![i];\n        const newPage = newPages![i];\n\n        if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {\n          shouldComponentUpdate = true;\n          break;\n        }\n      }\n    } else {\n      shouldComponentUpdate = true;\n    }\n\n    return shouldComponentUpdate;\n  }\n\n  public forceUpdate(): void {\n    this._invalidatePageCache();\n    // Ensure that when the list is force updated we update the pages first before render.\n    this._updateRenderRects(this.props, this.state, true);\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n\n    super.forceUpdate();\n  }\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  public getTotalListHeight(): number {\n    return this._surfaceRect!.height;\n  }\n\n  public render(): JSX.Element | null {\n    const { className, role = 'list', onRenderSurface, onRenderRoot } = this.props;\n    const { pages = [] } = this.state;\n    const pageElements: JSX.Element[] = [];\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    for (const page of pages) {\n      pageElements.push(this._renderPage(page));\n    }\n\n    const finalOnRenderSurface = onRenderSurface\n      ? composeRenderFunction(onRenderSurface, this._onRenderSurface)\n      : this._onRenderSurface;\n\n    const finalOnRenderRoot = onRenderRoot\n      ? composeRenderFunction(onRenderRoot, this._onRenderRoot)\n      : this._onRenderRoot;\n\n    return finalOnRenderRoot({\n      rootRef: this._root,\n      pages,\n      surfaceElement: finalOnRenderSurface({\n        surfaceRef: this._surface,\n        pages,\n        pageElements,\n        divProps: {\n          role: 'presentation',\n          className: 'ms-List-surface',\n        },\n      }),\n      divProps: {\n        ...divProps,\n        className: css('ms-List', className),\n        role: pageElements.length > 0 ? role : undefined,\n      },\n    });\n  }\n\n  private _getDerivedStateFromProps = (nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> => {\n    if (\n      nextProps.items !== this.props.items ||\n      nextProps.renderCount !== this.props.renderCount ||\n      nextProps.startIndex !== this.props.startIndex ||\n      nextProps.version !== this.props.version\n    ) {\n      // We have received new items so we want to make sure that initially we only render a single window to\n      // fill the currently visible rect, and then later render additional windows.\n      this._resetRequiredWindows();\n      this._requiredRect = null;\n\n      this._measureVersion++;\n      this._invalidatePageCache();\n\n      return this._updatePages(nextProps, previousState);\n    }\n\n    return previousState;\n  };\n\n  private _shouldVirtualize(props: IListProps<T> = this.props): boolean {\n    const { onShouldVirtualize } = props;\n    return !onShouldVirtualize || onShouldVirtualize(props);\n  }\n\n  /**\n   * when props.items change or forceUpdate called, throw away cached pages\n   */\n  private _invalidatePageCache(): void {\n    this._pageCache = {};\n  }\n\n  private _renderPage(page: IPage<T>): JSX.Element {\n    const { usePageCache } = this.props;\n    let cachedPage;\n    // if usePageCache is set and cached page element can be found, just return cached page\n    if (usePageCache) {\n      cachedPage = this._pageCache[page.key];\n      if (cachedPage && cachedPage.pageElement) {\n        return cachedPage.pageElement;\n      }\n    }\n\n    const pageStyle = this._getPageStyle(page);\n\n    const { onRenderPage = this._onRenderPage } = this.props;\n\n    const pageElement = onRenderPage(\n      {\n        page: page,\n        className: 'ms-List-page',\n        key: page.key,\n        ref: (newRef: unknown) => {\n          this._pageRefs[page.key] = newRef;\n        },\n        style: pageStyle,\n        role: 'presentation',\n      },\n      this._onRenderPage,\n    );\n\n    // cache the first page for now since it is re-rendered a lot times unnecessarily.\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\n    if (usePageCache && page.startIndex === 0) {\n      this._pageCache[page.key] = {\n        page: page,\n        pageElement: pageElement,\n      };\n    }\n    return pageElement;\n  }\n\n  private _onRenderRoot = (props: IListOnRenderRootProps<T>): JSX.Element => {\n    const { rootRef, surfaceElement, divProps } = props;\n\n    return (\n      <div ref={rootRef} {...divProps}>\n        {surfaceElement}\n      </div>\n    );\n  };\n\n  private _onRenderSurface = (props: IListOnRenderSurfaceProps<T>): JSX.Element => {\n    const { surfaceRef, pageElements, divProps } = props;\n\n    return (\n      <div ref={surfaceRef} {...divProps}>\n        {pageElements}\n      </div>\n    );\n  };\n\n  /** Generate the style object for the page. */\n  private _getPageStyle(page: IPage<T>): React.StyleHTMLAttributes<HTMLDivElement> {\n    const { getPageStyle } = this.props;\n\n    return {\n      ...(getPageStyle ? getPageStyle(page) : {}),\n      ...(!page.items\n        ? {\n            height: page.height,\n          }\n        : {}),\n    };\n  }\n\n  private _onRenderPage = (pageProps: IPageProps<T>, defaultRender?: IRenderFunction<IPageProps<T>>): any => {\n    const { onRenderCell, role } = this.props;\n\n    const {\n      page: { items = [], startIndex },\n      ...divProps\n    } = pageProps;\n\n    // only assign list item role if no role is assigned\n    const cellRole = role === undefined ? 'listitem' : 'presentation';\n    const cells: React.ReactNode[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n      const index = startIndex + i;\n      const item = items[i];\n\n      let itemKey = this.props.getKey ? this.props.getKey(item, index) : item && (item as any).key;\n\n      if (itemKey === null || itemKey === undefined) {\n        itemKey = index;\n      }\n\n      cells.push(\n        <div\n          role={cellRole}\n          className={'ms-List-cell'}\n          key={itemKey}\n          data-list-index={index}\n          data-automationid=\"ListCell\"\n        >\n          {onRenderCell &&\n            onRenderCell(item, index, !this.props.ignoreScrollingState ? this.state.isScrolling : undefined)}\n        </div>,\n      );\n    }\n\n    return <div {...divProps}>{cells}</div>;\n  };\n\n  /** Track the last item index focused so that we ensure we keep it rendered. */\n  private _onFocus(ev: any): void {\n    let target = ev.target as HTMLElement;\n\n    while (target !== this._surface.current) {\n      const indexString = target.getAttribute('data-list-index');\n\n      if (indexString) {\n        this._focusedIndex = Number(indexString);\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  }\n\n  /**\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n   * we will call onAsyncIdle which will reset it back to it's correct value.\n   */\n  private _onScroll(): void {\n    if (!this.state.isScrolling && !this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: true });\n    }\n    this._resetRequiredWindows();\n    this._onScrollingDone();\n  }\n\n  private _resetRequiredWindows(): void {\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n  }\n\n  /**\n   * Debounced method to asynchronously update the visible region on a scroll event.\n   */\n  private _onAsyncScroll(): void {\n    this._updateRenderRects(this.props, this.state);\n\n    // Only update pages when the visible rect falls outside of the materialized rect.\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect as IRectangle, this._materializedRect)) {\n      this.setState(this._updatePages(this.props, this.state));\n    } else {\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n    }\n  }\n\n  /**\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\n   * either, we increase the amount we render and re-evaluate.\n   */\n  private _onAsyncIdle(): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = this.props;\n    const { _requiredWindowsAhead: requiredWindowsAhead, _requiredWindowsBehind: requiredWindowsBehind } = this;\n    const windowsAhead = Math.min(renderedWindowsAhead as number, requiredWindowsAhead + 1);\n    const windowsBehind = Math.min(renderedWindowsBehind as number, requiredWindowsBehind + 1);\n\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n      // console.log('idling', windowsBehind, windowsAhead);\n\n      this._requiredWindowsAhead = windowsAhead;\n      this._requiredWindowsBehind = windowsBehind;\n      this._updateRenderRects(this.props, this.state);\n      this.setState(this._updatePages(this.props, this.state));\n    }\n\n    if (renderedWindowsAhead! > windowsAhead || renderedWindowsBehind! > windowsBehind) {\n      // Async increment on next tick.\n      this._onAsyncIdle();\n    }\n  }\n\n  /**\n   * Function to call when the list is done scrolling.\n   * This function is debounced.\n   */\n  private _onScrollingDone(): void {\n    if (!this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: false });\n    }\n  }\n\n  private _onAsyncResize(): void {\n    this.forceUpdate();\n  }\n\n  private _updatePages(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> {\n    // console.log('updating pages');\n\n    if (!this._requiredRect) {\n      this._updateRenderRects(nextProps, previousState);\n    }\n\n    const newListState = this._buildPages(nextProps, previousState);\n    const oldListPages = previousState.pages!;\n\n    this._notifyPageChanges(oldListPages, newListState.pages!, this.props);\n\n    return {\n      ...previousState,\n      ...newListState,\n    };\n  }\n\n  /**\n   * Notify consumers that the rendered pages have changed\n   * @param oldPages - The old pages\n   * @param newPages - The new pages\n   * @param props - The props to use\n   */\n  private _notifyPageChanges(oldPages: IPage<T>[], newPages: IPage<T>[], props: IListProps<T>): void {\n    const { onPageAdded, onPageRemoved } = props;\n\n    if (onPageAdded || onPageRemoved) {\n      const renderedIndexes: {\n        [index: number]: IPage<T>;\n      } = {};\n\n      for (const page of oldPages) {\n        if (page.items) {\n          renderedIndexes[page.startIndex] = page;\n        }\n      }\n\n      for (const page of newPages) {\n        if (page.items) {\n          if (!renderedIndexes[page.startIndex]) {\n            this._onPageAdded(page);\n          } else {\n            delete renderedIndexes[page.startIndex];\n          }\n        }\n      }\n\n      for (const index in renderedIndexes) {\n        if (renderedIndexes.hasOwnProperty(index)) {\n          this._onPageRemoved(renderedIndexes[index]);\n        }\n      }\n    }\n  }\n\n  private _updatePageMeasurements(pages: IPage<T>[]): boolean {\n    let heightChanged = false;\n\n    // when not in virtualize mode, we render all the items without page measurement\n    if (!this._shouldVirtualize()) {\n      return heightChanged;\n    }\n\n    for (let i = 0; i < pages.length; i++) {\n      const page = pages[i];\n\n      if (page.items) {\n        heightChanged = this._measurePage(page) || heightChanged;\n      }\n    }\n\n    return heightChanged;\n  }\n\n  /**\n   * Given a page, measure its dimensions, update cache.\n   * @returns True if the height has changed.\n   */\n  private _measurePage(page: IPage<T>): boolean {\n    let hasChangedHeight = false;\n    const pageElement = this._pageRefs[page.key] as HTMLElement;\n    const cachedHeight = this._cachedPageHeights[page.startIndex];\n\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\n\n    if (\n      pageElement &&\n      this._shouldVirtualize() &&\n      (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)\n    ) {\n      const newClientRect = {\n        width: pageElement.clientWidth,\n        height: pageElement.clientHeight,\n      };\n\n      if (newClientRect.height || newClientRect.width) {\n        hasChangedHeight = page.height !== newClientRect.height;\n\n        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n\n        page.height = newClientRect.height;\n\n        this._cachedPageHeights[page.startIndex] = {\n          height: newClientRect.height,\n          measureVersion: this._measureVersion,\n        };\n\n        this._estimatedPageHeight = Math.round(\n          (this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1),\n        );\n\n        this._totalEstimates++;\n      }\n    }\n\n    return hasChangedHeight;\n  }\n\n  /** Called when a page has been added to the DOM. */\n  private _onPageAdded(page: IPage<T>): void {\n    const { onPageAdded } = this.props;\n\n    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageAdded) {\n      onPageAdded(page);\n    }\n  }\n\n  /** Called when a page has been removed from the DOM. */\n  private _onPageRemoved(page: IPage<T>): void {\n    const { onPageRemoved } = this.props;\n\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageRemoved) {\n      onPageRemoved(page);\n    }\n  }\n\n  /** Build up the pages that should be rendered. */\n  private _buildPages(props: IListProps<T>, state: IListState<T>): IListState<T> {\n    let { renderCount } = props;\n    const { items, startIndex, getPageHeight } = props;\n\n    renderCount = this._getRenderCount(props);\n\n    const materializedRect = { ...EMPTY_RECT };\n    const pages: IPage<T>[] = [];\n\n    let itemsPerPage = 1;\n    let pageTop = 0;\n    let currentSpacer = null;\n    const focusedIndex = this._focusedIndex;\n    const endIndex = startIndex! + renderCount;\n    const shouldVirtualize = this._shouldVirtualize(props);\n\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\n    // So we should default to rendering only the first page so that we can get information.\n    // However if the user provides a measure function, let's just assume they know the right heights.\n    const isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\n\n    const allowedRect = this._allowedRect;\n\n    for (let itemIndex = startIndex!; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n      const pageHeight = pageSpecification.height;\n      const pageData = pageSpecification.data;\n      const key = pageSpecification.key;\n\n      itemsPerPage = pageSpecification.itemCount;\n\n      const pageBottom = pageTop + pageHeight - 1;\n\n      const isPageRendered =\n        findIndex(state.pages as IPage<T>[], (page: IPage<T>) => !!page.items && page.startIndex === itemIndex) > -1;\n      const isPageInAllowedRange = !allowedRect || (pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom!);\n      const isPageInRequiredRange =\n        !this._requiredRect || (pageBottom >= this._requiredRect.top && pageTop <= this._requiredRect.bottom!);\n      const isPageVisible =\n        (!isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered))) || !shouldVirtualize;\n      const isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;\n      const isFirstPage = itemIndex === startIndex;\n\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +\n      // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n\n      // Only render whats visible, focused, or first page,\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\n      if (isPageVisible || isPageFocused || isFirstPage) {\n        if (currentSpacer) {\n          pages.push(currentSpacer);\n          currentSpacer = null;\n        }\n\n        const itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n        const newPage = this._createPage(\n          key,\n          items!.slice(itemIndex, itemIndex + itemsInPage),\n          itemIndex,\n          undefined,\n          undefined,\n          pageData,\n        );\n\n        newPage.top = pageTop;\n        newPage.height = pageHeight;\n        if (this._visibleRect && this._visibleRect.bottom) {\n          newPage.isVisible = pageBottom >= this._visibleRect.top && pageTop <= this._visibleRect.bottom;\n        }\n\n        pages.push(newPage);\n\n        if (isPageInRequiredRange && this._allowedRect) {\n          _mergeRect(materializedRect, {\n            top: pageTop,\n            bottom: pageBottom,\n            height: pageHeight,\n            left: allowedRect.left,\n            right: allowedRect.right,\n            width: allowedRect.width,\n          });\n        }\n      } else {\n        if (!currentSpacer) {\n          currentSpacer = this._createPage(\n            SPACER_KEY_PREFIX + itemIndex,\n            undefined,\n            itemIndex,\n            0,\n            undefined,\n            pageData,\n            true /*isSpacer*/,\n          );\n        }\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n        currentSpacer.itemCount += itemsPerPage;\n      }\n      pageTop += pageBottom - pageTop + 1;\n\n      // in virtualized mode, we render need to render first page then break and measure,\n      // otherwise, we render all items without measurement to make rendering fast\n      if (isFirstRender && shouldVirtualize) {\n        break;\n      }\n    }\n\n    if (currentSpacer) {\n      currentSpacer.key = SPACER_KEY_PREFIX + 'end';\n      pages.push(currentSpacer);\n    }\n\n    this._materializedRect = materializedRect;\n\n    // console.log('materialized: ', materializedRect);\n    return {\n      ...state,\n      pages: pages,\n      measureVersion: this._measureVersion,\n    };\n  }\n\n  private _getPageSpecification(\n    itemIndex: number,\n    visibleRect: IRectangle,\n  ): {\n    // These return values are now no longer optional.\n    itemCount: number;\n    height: number;\n    data?: any;\n    key?: string;\n  } {\n    const { getPageSpecification } = this.props;\n    if (getPageSpecification) {\n      const pageData = getPageSpecification(itemIndex, visibleRect);\n\n      const { itemCount = this._getItemCountForPage(itemIndex, visibleRect) } = pageData;\n\n      const { height = this._getPageHeight(itemIndex, visibleRect, itemCount) } = pageData;\n\n      return {\n        itemCount: itemCount,\n        height: height,\n        data: pageData.data,\n        key: pageData.key,\n      };\n    } else {\n      const itemCount = this._getItemCountForPage(itemIndex, visibleRect);\n\n      return {\n        itemCount: itemCount,\n        height: this._getPageHeight(itemIndex, visibleRect, itemCount),\n      };\n    }\n  }\n\n  /**\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n   * cached height, or estimated page height, or default page height.\n   */\n  private _getPageHeight(itemIndex: number, visibleRect: IRectangle, itemsPerPage: number): number {\n    if (this.props.getPageHeight) {\n      return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);\n    } else {\n      const cachedHeight = this._cachedPageHeights[itemIndex];\n\n      return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;\n    }\n  }\n\n  private _getItemCountForPage(itemIndex: number, visibileRect: IRectangle): number {\n    const itemsPerPage = this.props.getItemCountForPage\n      ? this.props.getItemCountForPage(itemIndex, visibileRect)\n      : DEFAULT_ITEMS_PER_PAGE;\n\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n  }\n\n  private _createPage(\n    pageKey: string | undefined,\n    items: any[] | undefined,\n    startIndex: number = -1,\n    count: number = items ? items.length : 0,\n    style: React.CSSProperties = {},\n    data?: any,\n    isSpacer?: boolean,\n  ): IPage<T> {\n    pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;\n    const cachedPage = this._pageCache[pageKey];\n    if (cachedPage && cachedPage.page) {\n      return cachedPage.page;\n    }\n\n    return {\n      key: pageKey,\n      startIndex: startIndex,\n      itemCount: count,\n      items: items,\n      style: style,\n      top: 0,\n      height: 0,\n      data: data,\n      isSpacer: isSpacer || false,\n    };\n  }\n\n  private _getRenderCount(props?: IListProps<T>): number {\n    const { items, startIndex, renderCount } = props || this.props;\n\n    return renderCount === undefined ? (items ? items.length - startIndex! : 0) : renderCount;\n  }\n\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n  private _updateRenderRects(props: IListProps<T>, state: IListState<T>, forceUpdate?: boolean): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = props;\n    const { pages } = state;\n    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\n    if (!this._shouldVirtualize(props)) {\n      return;\n    }\n\n    let surfaceRect = this._surfaceRect || { ...EMPTY_RECT };\n    const scrollHeight = this._scrollElement && this._scrollElement.scrollHeight;\n    const scrollTop = this._scrollElement ? this._scrollElement.scrollTop : 0;\n\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n    // This needs to be called to recalculate when new pages should be loaded.\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\n    if (\n      this._surface.current &&\n      (forceUpdate ||\n        !pages ||\n        !this._surfaceRect ||\n        !scrollHeight ||\n        scrollHeight !== this._scrollHeight ||\n        Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)\n    ) {\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);\n      this._scrollTop = scrollTop;\n    }\n\n    // If the scroll height has changed, something in the container likely resized and\n    // we should redo the page heights incase their content resized.\n    if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {\n      this._measureVersion++;\n    }\n\n    this._scrollHeight = scrollHeight || 0;\n\n    // If the surface is above the container top or below the container bottom, or if this is not the first\n    // render return empty rect.\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n    // used to calculate the width of the list items.\n    const visibleTop = Math.max(0, -surfaceRect.top);\n    const win = getWindow(this._root.current);\n    const visibleRect = {\n      top: visibleTop,\n      left: surfaceRect.left,\n      bottom: visibleTop + win!.innerHeight,\n      right: surfaceRect.right,\n      width: surfaceRect.width,\n      height: win!.innerHeight,\n    };\n\n    // The required/allowed rects are adjusted versions of the visible rect.\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind!, renderedWindowsAhead!);\n\n    // store the visible rect for later use.\n    this._visibleRect = visibleRect;\n  }\n}\n\nfunction _expandRect(rect: IRectangle, pagesBefore: number, pagesAfter: number): IRectangle {\n  const top = rect.top - pagesBefore * rect.height;\n  const height = rect.height + (pagesBefore + pagesAfter) * rect.height;\n\n  return {\n    top: top,\n    bottom: top + height,\n    height: height,\n    left: rect.left,\n    right: rect.right,\n    width: rect.width,\n  };\n}\n\nfunction _isContainedWithin(innerRect: IRectangle, outerRect: IRectangle): boolean {\n  return (\n    innerRect.top >= outerRect.top &&\n    innerRect.left >= outerRect.left &&\n    innerRect.bottom! <= outerRect.bottom! &&\n    innerRect.right! <= outerRect.right!\n  );\n}\n\nfunction _mergeRect(targetRect: IRectangle, newRect: IRectangle): IRectangle {\n  targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;\n  targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;\n  targetRect.bottom =\n    newRect.bottom! > targetRect.bottom! || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;\n  targetRect.right = newRect.right! > targetRect.right! || targetRect.right === -1 ? newRect.right : targetRect.right;\n  targetRect.width = targetRect.right! - targetRect.left + 1;\n  targetRect.height = targetRect.bottom! - targetRect.top + 1;\n\n  return targetRect;\n}\n", "import * as React from 'react';\nimport { List } from './List';\nimport type { IRefObject, IRectangle, IRenderFunction } from '../../Utilities';\n\n/**\n * {@docCategory List}\n */\nexport const ScrollToMode = {\n  /**\n   * Does not make any consideration to where in the viewport the item should align to.\n   */\n  auto: 0 as 0,\n  /**\n   * Attempts to scroll the list so the top of the desired item is aligned with the top of the viewport.\n   */\n  top: 1 as 1,\n  /**\n   * Attempts to scroll the list so the bottom of the desired item is aligned with the bottom of the viewport.\n   */\n  bottom: 2 as 2,\n  /**\n   * Attempts to scroll the list so the desired item is in the exact center of the viewport.\n   */\n  center: 3 as 3,\n};\n\n/**\n * {@docCategory List}\n */\nexport type ScrollToMode = typeof ScrollToMode[keyof typeof ScrollToMode];\n\n/**\n * Props passed to the render override for the list root.\n * {@docCategory List}\n */\nexport interface IListOnRenderRootProps<T> {\n  /**\n   * The ref to be applied to the list root.\n   * The `List` uses this element to track scroll position and sizing.\n   */\n  rootRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list root element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered as the list surface element.\n   * This will have been rendered using `onRenderSurface`.\n   */\n  surfaceElement: JSX.Element | null;\n}\n\n/**\n * Props passed to the render override for the list surface.\n * {@docCategory List}\n */\nexport interface IListOnRenderSurfaceProps<T> {\n  /**\n   * A ref to be applied to the surface element.\n   * The `List` uses this element to track content size and focus.\n   */\n  surfaceRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list surface element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered representing all active pages.\n   */\n  pageElements: JSX.Element[];\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IList {\n  /**\n   * Force the component to update.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  getTotalListHeight?: () => number;\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines the behavior of the scrolling alignment. Defaults to auto.\n   *  Note: The scrollToMode requires the measureItem callback is provided to function.\n   */\n  scrollToIndex: (index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IListProps<T = any> extends React.HTMLAttributes<List<T> | HTMLDivElement> {\n  /**\n   * Optional callback to access the IList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IList>;\n\n  /** Optional classname to append to root list. */\n  className?: string;\n\n  /** Items to render. */\n  items?: T[];\n\n  /**\n   * Method to call when trying to render an item.\n   * @param item - The data associated with the cell that is being rendered.\n   * @param index - The index of the cell being rendered.\n   * @param isScrolling - True if the list is being scrolled. May be useful for rendering a placeholder if your cells\n   * are complex.\n   */\n  onRenderCell?: (item?: T, index?: number, isScrolling?: boolean) => React.ReactNode;\n\n  /**\n   * Optional callback invoked when List rendering completed.\n   * This can be on initial mount or on re-render due to scrolling.\n   * This method will be called as a result of changes in List pages (added or removed),\n   * and after ALL the changes complete.\n   * To track individual page Add / Remove use onPageAdded / onPageRemoved instead.\n   * @param pages - The current array of pages in the List.\n   */\n  onPagesUpdated?: (pages: IPage<T>[]) => void;\n\n  /** Optional callback for monitoring when a page is added. */\n  onPageAdded?: (page: IPage<T>) => void;\n\n  /** Optional callback for monitoring when a page is removed. */\n  onPageRemoved?: (page: IPage<T>) => void;\n\n  /** Optional callback to get the item key, to be used on render. */\n  getKey?: (item: T, index?: number) => string;\n\n  /**\n   * Called by the list to get the specification for a page.\n   * Use this method to provide an allocation of items per page,\n   * as well as an estimated rendered height for the page.\n   * The list will use this to optimize virtualization.\n   */\n  getPageSpecification?: (itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification;\n\n  /**\n   * Method called by the list to get how many items to render per page from specified index.\n   * In general, use `getPageSpecification` instead.\n   */\n  getItemCountForPage?: (itemIndex?: number, visibleRect?: IRectangle) => number;\n\n  /**\n   * Method called by the list to get the pixel height for a given page. By default, we measure the first\n   * page's height and default all other pages to that height when calculating the surface space. It is\n   * ideal to be able to adequately predict page heights in order to keep the surface space from jumping\n   * in pixels, which has been seen to cause browser performance issues.\n   * In general, use `getPageSpecification` instead.\n   */\n  getPageHeight?: (itemIndex?: number, visibleRect?: IRectangle, itemCount?: number) => number;\n\n  /**\n   * Method called by the list to derive the page style object. For spacer pages, the list will derive\n   * the height and passed in heights will be ignored.\n   */\n  getPageStyle?: (page: IPage<T>) => any;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render ahead.\n   * @defaultvalue 2\n   */\n  renderedWindowsAhead?: number;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render behind.\n   * @defaultvalue 2\n   */\n  renderedWindowsBehind?: number;\n\n  /**\n   * Index in `items` array to start rendering from.\n   * @default 0\n   */\n  startIndex?: number;\n\n  /**\n   * Number of items to render.\n   * @default items.length\n   */\n  renderCount?: number;\n\n  /**\n   * Boolean value to enable render page caching. This is an experimental performance optimization\n   * that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps<T>) => boolean;\n\n  /**\n   * The role to assign to the list root element.\n   * Use this to override the default assignment of 'list' to the root and 'listitem' to the cells.\n   */\n  role?: string;\n\n  /**\n   * Called when the List will render a page.\n   * Override this to control how cells are rendered within a page.\n   */\n  onRenderPage?: IRenderFunction<IPageProps<T>>;\n\n  /**\n   * Render override for the element at the root of the `List`.\n   * Use this to apply some final attributes or structure to the content\n   * each time the list is updated with new active pages or items.\n   */\n  onRenderRoot?: IRenderFunction<IListOnRenderRootProps<T>>;\n\n  /**\n   * Render override for the element representing the surface of the `List`.\n   * Use this to alter the structure of the rendered content if necessary on each update.\n   */\n  onRenderSurface?: IRenderFunction<IListOnRenderSurfaceProps<T>>;\n\n  /**\n   * For perf reasons, List avoids re-rendering unless certain props have changed.\n   * Use this prop if you need to force it to re-render in other cases. You can pass any type of\n   * value as long as it only changes (`===` comparison) when a re-render should happen.\n   */\n  version?: any;\n\n  /**\n   * Whether to disable scroll state updates. This causes the isScrolling arg in onRenderCell to always be undefined.\n   * This is a performance optimization to let List skip a render cycle by not updating its scrolling state.\n   */\n  ignoreScrollingState?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPage<T = any> {\n  key: string;\n  items: T[] | undefined;\n  startIndex: number;\n  itemCount: number;\n  style: React.CSSProperties;\n  top: number;\n  height: number;\n  data?: any;\n  isSpacer?: boolean;\n  isVisible?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageProps<T = any>\n  extends React.HTMLAttributes<HTMLDivElement>,\n    React.ClassAttributes<HTMLDivElement> {\n  /**\n   * The role being assigned to the rendered page element by the list.\n   */\n  role?: string;\n  /**\n   * The allocation data for the page.\n   */\n  page: IPage<T>;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageSpecification {\n  /**\n   * The number of items to allocate to the page.\n   */\n  itemCount?: number;\n  /**\n   * The estimated pixel height of the page.\n   */\n  height?: number;\n  /**\n   * Data to pass through to the page when rendering.\n   */\n  data?: any;\n  /**\n   * The key to use when creating the page.\n   */\n  key?: string;\n}\n", "import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  KeyCodes,\n  elementContains,\n  findScrollableParent,\n  getParent,\n  getDocument,\n  getWindow,\n  isElementTabbable,\n  css,\n  initializeComponentRef,\n  FocusRects,\n} from '../../Utilities';\nimport { SelectionMode } from './interfaces';\nimport type { ISelection, IObjectWithKey } from './interfaces';\n\n// Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\n\nconst SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\nconst SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nconst SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nconst SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\nconst SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME = 'data-selection-touch-invoke';\nconst SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\nconst SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZone {\n  /**\n   * Method to ignore subsequent focus.\n   */\n  ignoreNextFocus: () => void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneProps extends React.ClassAttributes<SelectionZone> {\n  /**\n   * Reference to the component interface.\n   */\n  componentRef?: () => void;\n  /**\n   * Required {@link ISelection} instance bound to the {@link SelectionZone}.\n   */\n  selection: ISelection;\n  /**\n   * @deprecated No longer in use, focus is now managed by {@link FocusZone}.\n   */\n  layout?: {};\n  /**\n   * The mode of Selection, where the value is one of\n   * 'none', 'single', or 'multiple'.\n   *\n   * @defaultvalue {@link SelectionMode.multiple}\n   */\n  selectionMode?: SelectionMode;\n  /**\n   * If true, selection is preserved on outer click.\n   */\n  selectionPreservedOnEmptyClick?: boolean;\n  /**\n   * If true, disables automatic selection on input elements.\n   */\n  disableAutoSelectOnInputElements?: boolean;\n  /**\n   * If true, modal selection is enabled on touch event.\n   */\n  enterModalOnTouch?: boolean;\n  /**\n   * Determines whether elements with the attribute `data-selection-touch-invoke` should be used as invocation targets\n   * for an item if the user is using touch.\n   *\n   * @defaultvalue false\n   */\n  enableTouchInvocationTarget?: boolean;\n  /**\n   * Determines if an item is selected on focus.\n   *\n   * @defaultvalue true\n   */\n  isSelectedOnFocus?: boolean;\n  /**\n   * Optional callback for when an item is\n   * invoked via ENTER or double-click.\n   */\n  onItemInvoked?: (item?: IObjectWithKey, index?: number, ev?: Event) => void;\n  /**\n   * Optional callback for when an\n   * item's contextual menu action occurs.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n  /**\n   * Additional CSS class(es) to apply to the SelectionZone.\n   */\n  className?: string;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneState {\n  isModal: boolean | undefined;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport class SelectionZone extends React.Component<ISelectionZoneProps, ISelectionZoneState> {\n  public static defaultProps = {\n    isSelectedOnFocus: true,\n    selectionMode: SelectionMode.multiple,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _isCtrlPressed: boolean;\n  private _isShiftPressed: boolean;\n  private _isMetaPressed: boolean;\n  private _isTabPressed: boolean;\n  private _shouldHandleFocus: boolean;\n  private _shouldHandleFocusTimeoutId: number | undefined;\n  private _isTouch: boolean;\n  private _isTouchTimeoutId: number | undefined;\n\n  public static getDerivedStateFromProps(\n    nextProps: ISelectionZoneProps,\n    prevState: ISelectionZoneState,\n  ): ISelectionZoneState {\n    const isModal = nextProps.selection.isModal && nextProps.selection.isModal();\n\n    return {\n      ...prevState,\n      isModal,\n    };\n  }\n\n  constructor(props: ISelectionZoneProps) {\n    super(props);\n\n    this._events = new EventGroup(this);\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    const { selection } = this.props;\n\n    // Reflect the initial modal state of selection into the state.\n    const isModal = selection.isModal && selection.isModal();\n\n    this.state = {\n      isModal,\n    };\n  }\n\n  public componentDidMount(): void {\n    const win = getWindow(this._root.current);\n\n    // Track the latest modifier keys globally.\n    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\n    this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);\n    this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);\n\n    // Subscribe to the selection to keep modal state updated.\n    this._events.on(this.props.selection, 'change', this._onSelectionChange);\n  }\n\n  public render(): JSX.Element {\n    const { isModal } = this.state;\n\n    return (\n      <div\n        className={css('ms-SelectionZone', this.props.className, {\n          'ms-SelectionZone--modal': !!isModal,\n        })}\n        ref={this._root}\n        onKeyDown={this._onKeyDown}\n        onMouseDown={this._onMouseDown}\n        onKeyDownCapture={this._onKeyDownCapture}\n        onClick={this._onClick}\n        role=\"presentation\"\n        onDoubleClick={this._onDoubleClick}\n        onContextMenu={this._onContextMenu}\n        onMouseDownCapture={this._onMouseDownCapture}\n        onFocusCapture={this._onFocus}\n        data-selection-is-modal={isModal ? true : undefined}\n      >\n        {this.props.children}\n        <FocusRects />\n      </div>\n    );\n  }\n\n  public componentDidUpdate(previousProps: ISelectionZoneProps): void {\n    const { selection } = this.props;\n\n    if (selection !== previousProps.selection) {\n      // Whenever selection changes, update the subscripton to keep modal state updated.\n      this._events.off(previousProps.selection);\n      this._events.on(selection, 'change', this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  /**\n   * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\n   * react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has\n   * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\n   * focus event that occurs. This method does that.\n   */\n  public ignoreNextFocus = (): void => {\n    this._handleNextFocus(false);\n  };\n\n  private _onSelectionChange = (): void => {\n    const { selection } = this.props;\n\n    const isModal = selection.isModal && selection.isModal();\n\n    this.setState({\n      isModal,\n    });\n  };\n\n  private _onMouseDownCapture = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    if (document.activeElement !== target && !elementContains(document.activeElement as HTMLElement, target)) {\n      this.ignoreNextFocus();\n      return;\n    }\n\n    if (!elementContains(target, this._root.current)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n        this.ignoreNextFocus();\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  /**\n   * When we focus an item, for single/multi select scenarios, we should try to select it immediately\n   * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\n   * specially.\n   */\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (this._shouldHandleFocus && selectionMode !== SelectionMode.none) {\n      const isToggle = this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n      const itemRoot = this._findItemRoot(target);\n\n      if (!isToggle && itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (isToggleModifierPressed) {\n          // set anchor only.\n          selection.setIndexSelected(index, selection.isIndexSelected(index), true);\n          if (this.props.enterModalOnTouch && this._isTouch && selection.setModal) {\n            selection.setModal(true);\n            this._setIsTouch(false);\n          }\n        } else {\n          if (this.props.isSelectedOnFocus) {\n            this._onItemSurfaceClick(ev, index);\n          }\n        }\n      }\n    }\n\n    this._handleNextFocus(false);\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    // No-op if selection is disabled\n    if (this._isSelectionDisabled(target)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        break;\n      } else if (itemRoot) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (\n          (target === itemRoot || this._shouldAutoSelect(target)) &&\n          !this._isShiftPressed &&\n          !this._isCtrlPressed &&\n          !this._isMetaPressed\n        ) {\n          this._onInvokeMouseDown(ev, this._getItemIndex(itemRoot));\n          break;\n        } else if (\n          this.props.disableAutoSelectOnInputElements &&\n          (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')\n        ) {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onTouchStartCapture = (ev: React.TouchEvent<HTMLElement>): void => {\n    this._setIsTouch(true);\n  };\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { enableTouchInvocationTarget = false } = this.props;\n\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        if (!isSelectionDisabled) {\n          this._onToggleAllClick(ev);\n        }\n        break;\n      } else if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          if (!isSelectionDisabled) {\n            if (this._isShiftPressed) {\n              this._onItemSurfaceClick(ev, index);\n            } else {\n              this._onToggleClick(ev, index);\n            }\n          }\n          break;\n        } else if (\n          (this._isTouch &&\n            enableTouchInvocationTarget &&\n            this._hasAttribute(target, SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME)) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          // Items should be invokable even if selection is disabled.\n          this._onInvokeClick(ev, index);\n          break;\n        } else if (target === itemRoot) {\n          if (!isSelectionDisabled) {\n            this._onItemSurfaceClick(ev, index);\n          }\n          break;\n        } else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n\n    const { onItemContextMenu, selection } = this.props;\n    if (onItemContextMenu) {\n      const itemRoot = this._findItemRoot(target);\n\n      if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        this._onInvokeMouseDown(ev, index);\n\n        const skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);\n\n        // In order to keep back compat, if the value here is undefined, then we should still\n        // call preventDefault(). Only in the case where true is explicitly returned should\n        // the call be skipped.\n        if (!skipPreventDefault) {\n          ev.preventDefault();\n        }\n      }\n    }\n  };\n\n  private _isSelectionDisabled(target: HTMLElement): boolean {\n    if (this._getSelectionMode() === SelectionMode.none) {\n      return true;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\n        return true;\n      }\n      target = getParent(target) as HTMLElement;\n    }\n\n    return false;\n  }\n\n  /**\n   * In multi selection, if you double click within an item's root (but not within the invoke element or\n   * input elements), we should execute the invoke handler.\n   */\n  private _onDoubleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    const { onItemInvoked } = this.props;\n    const itemRoot = this._findItemRoot(target);\n\n    if (itemRoot && onItemInvoked && !this._isInputElement(target)) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (\n          this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          break;\n        } else if (target === itemRoot) {\n          this._onInvokeClick(ev, index);\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onKeyDownCapture = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    this._handleNextFocus(true);\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean | undefined => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    const { selection } = this.props;\n    // eslint-disable-next-line deprecation/deprecation\n    const isSelectAllKey = ev.which === KeyCodes.a && (this._isCtrlPressed || this._isMetaPressed);\n    // eslint-disable-next-line deprecation/deprecation\n    const isClearSelectionKey = ev.which === KeyCodes.escape;\n\n    // Ignore key downs from input elements.\n    if (this._isInputElement(target)) {\n      // A key was pressed while an item in this zone was focused.\n      return;\n    }\n\n    const selectionMode = this._getSelectionMode();\n\n    // If ctrl-a is pressed, select all (if all are not already selected.)\n    if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(true);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    // If escape is pressed, clear selection (if any are selected.)\n    if (isClearSelectionKey && selection.getSelectedCount() > 0) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(false);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    const itemRoot = this._findItemRoot(target);\n\n    // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\n    if (itemRoot) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\n          // so we can no-op for any keydowns in this case.\n          break;\n        } else if (this._shouldAutoSelect(target)) {\n          if (!isSelectionDisabled) {\n            // If the event went to an element which should trigger auto-select, select it and then let\n            // the default behavior kick in.\n            this._onInvokeMouseDown(ev, index);\n          }\n          break;\n        } else if (\n          // eslint-disable-next-line deprecation/deprecation\n          (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) &&\n          (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT')\n        ) {\n          return false;\n        } else if (target === itemRoot) {\n          // eslint-disable-next-line deprecation/deprecation\n          if (ev.which === KeyCodes.enter) {\n            // Items should be invokable even if selection is disabled.\n            this._onInvokeClick(ev, index);\n            ev.preventDefault();\n            return;\n            // eslint-disable-next-line deprecation/deprecation\n          } else if (ev.which === KeyCodes.space) {\n            if (!isSelectionDisabled) {\n              this._onToggleClick(ev, index);\n            }\n            ev.preventDefault();\n            return;\n          }\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n    }\n  };\n\n  private _onToggleAllClick(ev: React.MouseEvent<HTMLElement>): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleAllSelected();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  }\n\n  private _onToggleClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    selection.setChangeEvents(false);\n\n    if (this.props.enterModalOnTouch && this._isTouch && !selection.isIndexSelected(index) && selection.setModal) {\n      selection.setModal(true);\n      this._setIsTouch(false);\n    }\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleIndexSelected(index);\n    } else if (selectionMode === SelectionMode.single) {\n      const isSelected = selection.isIndexSelected(index);\n      const isModal = selection.isModal && selection.isModal();\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, !isSelected, true);\n      if (isModal && selection.setModal) {\n        // Since the above call to setAllSelected(false) clears modal state,\n        // restore it. This occurs because the SelectionMode of the Selection\n        // may differ from the SelectionZone.\n        selection.setModal(true);\n      }\n    } else {\n      selection.setChangeEvents(true);\n      return;\n    }\n\n    selection.setChangeEvents(true);\n\n    ev.stopPropagation();\n\n    // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\n    // for checkboxes if you use a checkbox for the toggle.\n  }\n\n  private _onInvokeClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection, onItemInvoked } = this.props;\n\n    if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onItemSurfaceClick(ev: React.SyntheticEvent<HTMLElement>, index: number): void {\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      if (this._isShiftPressed && !this._isTabPressed) {\n        selection.selectToIndex(index, !isToggleModifierPressed);\n      } else if (isToggleModifierPressed) {\n        selection.toggleIndexSelected(index);\n      } else {\n        this._clearAndSelectIndex(index);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      this._clearAndSelectIndex(index);\n    }\n  }\n\n  private _onInvokeMouseDown(\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    index: number,\n  ): void {\n    const { selection } = this.props;\n\n    // Only do work if item is not selected.\n    if (selection.isIndexSelected(index)) {\n      return;\n    }\n\n    this._clearAndSelectIndex(index);\n  }\n\n  /**\n   * To avoid high startup cost of traversing the DOM on component mount,\n   * defer finding the scrollable parent until a click interaction.\n   *\n   * The styles will probably already calculated since we're running in a click handler,\n   * so this is less likely to cause layout thrashing then doing it in mount.\n   */\n  private _findScrollParentAndTryClearOnEmptyClick(ev: MouseEvent) {\n    const scrollParent = findScrollableParent(this._root.current) as HTMLElement;\n    // unbind this handler and replace binding with a binding on the actual scrollable parent\n    this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);\n\n    // If we clicked inside the scrollable parent, call through to the handler on this click.\n    if ((scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target)) || scrollParent === ev.target) {\n      this._tryClearOnEmptyClick(ev);\n    }\n  }\n\n  private _tryClearOnEmptyClick(ev: MouseEvent): void {\n    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target as HTMLElement)) {\n      this.props.selection.setAllSelected(false);\n    }\n  }\n\n  private _clearAndSelectIndex(index: number): void {\n    const { selection } = this.props;\n    const isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\n\n    if (!isAlreadySingleSelected) {\n      const isModal = selection.isModal && selection.isModal();\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, true, true);\n      if (isModal || (this.props.enterModalOnTouch && this._isTouch)) {\n        if (selection.setModal) {\n          selection.setModal(true);\n        }\n        if (this._isTouch) {\n          this._setIsTouch(false);\n        }\n      }\n      selection.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * We need to track the modifier key states so that when focus events occur, which do not contain\n   * modifier states in the Event object, we know how to behave.\n   */\n  private _updateModifiers(ev: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\n    this._isShiftPressed = ev.shiftKey;\n    this._isCtrlPressed = ev.ctrlKey;\n    this._isMetaPressed = ev.metaKey;\n\n    const keyCode = (ev as React.KeyboardEvent<HTMLElement>).keyCode;\n    this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;\n  }\n\n  private _findItemRoot(target: HTMLElement): HTMLElement | undefined {\n    const { selection } = this.props;\n\n    while (target !== this._root.current) {\n      const indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n      const index = Number(indexValue);\n\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n\n    if (target === this._root.current) {\n      return undefined;\n    }\n\n    return target;\n  }\n\n  private _getItemIndex(itemRoot: HTMLElement): number {\n    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));\n  }\n\n  private _shouldAutoSelect(element: HTMLElement): boolean {\n    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);\n  }\n\n  private _hasAttribute(element: HTMLElement, attributeName: string): boolean {\n    let isToggle = false;\n\n    while (!isToggle && element !== this._root.current) {\n      isToggle = element.getAttribute(attributeName) === 'true';\n      element = getParent(element) as HTMLElement;\n    }\n\n    return isToggle;\n  }\n\n  private _isInputElement(element: HTMLElement): boolean {\n    return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';\n  }\n\n  private _isNonHandledClick(element: HTMLElement): boolean {\n    const doc = getDocument();\n\n    if (doc && element) {\n      while (element && element !== doc.documentElement) {\n        if (isElementTabbable(element)) {\n          return false;\n        }\n\n        element = getParent(element) as HTMLElement;\n      }\n    }\n\n    return true;\n  }\n\n  private _handleNextFocus(handleFocus: boolean): void {\n    if (this._shouldHandleFocusTimeoutId) {\n      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\n      this._shouldHandleFocusTimeoutId = undefined;\n    }\n\n    this._shouldHandleFocus = handleFocus;\n\n    if (handleFocus) {\n      this._async.setTimeout(() => {\n        this._shouldHandleFocus = false;\n      }, 100);\n    }\n  }\n\n  private _setIsTouch(isTouch: boolean): void {\n    if (this._isTouchTimeoutId) {\n      this._async.clearTimeout(this._isTouchTimeoutId);\n      this._isTouchTimeoutId = undefined;\n    }\n\n    this._isTouch = true;\n\n    if (isTouch) {\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 300);\n    }\n  }\n\n  private _getSelectionMode(): SelectionMode {\n    const { selection } = this.props;\n\n    const { selectionMode = selection ? selection.mode : SelectionMode.none } = this.props;\n\n    return selectionMode;\n  }\n}\n", "import * as React from 'react';\nimport { GroupedListBase } from './GroupedList.base';\nimport { SelectionMode } from '../../Selection';\nimport type { IList, IListProps } from '../../List';\nimport type { IFocusZoneProps } from '../../FocusZone';\nimport type { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IDragDropContext, IDragDropEvents, IDragDropHelper } from '../../DragDrop';\nimport type { ISelection } from '../../Selection';\nimport type { IViewport } from '../../utilities/decorators/withViewport';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IGroupHeaderProps } from './GroupHeader.types';\nimport type { IGroupShowAllProps } from './GroupShowAll.types';\nimport type { IGroupFooterProps } from './GroupFooter.types';\n\n/**\n * {@docCategory GroupedList}\n */\nexport enum CollapseAllVisibility {\n  hidden = 0,\n  visible = 1,\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list props don't change, but the list still\n   * needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change, you can\n   * call this to force a re-evaluation. Be aware that this can be an expensive operation and should be done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Toggles the collapsed state of all the groups in the list.\n   */\n  toggleCollapseAll: (allCollapsed: boolean) => void;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListProps extends React.ClassAttributes<GroupedListBase> {\n  /**\n   * Theme that is passed in from Higher Order Component\n   */\n  theme?: ITheme;\n\n  /**\n   * Style function to be passed in to override the themed or default styles\n   */\n  styles?: IStyleFunctionOrObject<IGroupedListStyleProps, IGroupedListStyles>;\n\n  /**\n   * Optional callback to access the IGroupedList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IGroupedList>;\n\n  /** Optional class name to add to the root element. */\n  className?: string;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to groups and rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Optional grouping instructions. */\n  groups?: IGroup[];\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional properties to pass through to the FocusZone. */\n  focusZoneProps?: IFocusZoneProps;\n\n  /** Optional properties to pass through to the list components being rendered. */\n  listProps?: IListProps;\n\n  /** Optional properties to pass through to the root list component being rendered. */\n  rootListProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Override the default role for GroupedList.  */\n  role?: string;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Optional callback when the group expand state changes between all collapsed and at least one group is expanded. */\n  onGroupExpandStateChanged?: (isSomeGroupExpanded: boolean) => void;\n\n  /**\n   * boolean to control if pages containing unchanged items should be cached, this is a perf optimization\n   * The same property in List.Props\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /**\n   * Optional function to override default group height calculation used by list virtualization.\n   */\n  getGroupHeight?: (group: IGroup, groupIndex: number) => number;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroup {\n  /**\n   * Unique identifier for the group.\n   */\n  key: string;\n\n  /**\n   * Display name for the group, rendered on the header.\n   */\n  name: string;\n\n  /**\n   * Start index for the group within the given items.\n   */\n  startIndex: number;\n\n  /**\n   * How many items should be rendered within the group.\n   */\n  count: number;\n\n  /**\n   * Nested groups, if any.\n   */\n  children?: IGroup[];\n\n  /**\n   * Number indicating the level of nested groups.\n   */\n  level?: number;\n\n  /**\n   * @deprecated At 1.0.0, selection state wil be controlled by the selection store only.\n   */\n  isSelected?: boolean;\n\n  /**\n   * If all the items in the group are collapsed.\n   */\n  isCollapsed?: boolean;\n\n  /**\n   * If the items within the group are summarized or showing all.\n   */\n  isShowingAll?: boolean;\n\n  /**\n   * If drag/drop is enabled for the group header.\n   */\n  isDropEnabled?: boolean;\n\n  /**\n   * Arbitrary data required to be preserved by the caller.\n   */\n  data?: any;\n\n  /**\n   * Optional accessibility label (aria-label) attribute that will be stamped on to the element.\n   * If none is specified, the arai-label attribute will contain the group name\n   */\n  ariaLabel?: string;\n\n  /**\n   * Optional flag to indicate the group has more data to load than the current group count indicated.\n   * This can be used to indicate that a plus should be rendered next to the group count in the header.\n   */\n  hasMoreData?: boolean;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupRenderProps {\n  /** Boolean indicating if all groups are in collapsed state. */\n  isAllGroupsCollapsed?: boolean;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Callback for when all groups are expanded or collapsed. */\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** Information to pass in to the group Show all footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /**\n   * Override which allows the caller to provide a custom header.\n   */\n  onRenderHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /**\n   * Override which allows the caller to provide a custom Show All link.\n   */\n  onRenderShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /**\n   * Override which allows the caller to provide a custom footer.\n   */\n  onRenderFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Flag to indicate whether to ignore the collapsing icon on header.\n   * @defaultvalue CollapseAllVisibility.visible\n   */\n  collapseAllVisibility?: CollapseAllVisibility;\n\n  /**\n   * Boolean indicating if empty groups are shown\n   * @defaultvalue false\n   */\n  showEmptyGroups?: boolean;\n\n  /**\n   * Override which allows the caller to provide a custom aria role\n   */\n  role?: string;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupDividerProps {\n  componentRef?: IRefObject<{}>;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Callback to determine if a group has missing items and needs to load them from the server. */\n  isGroupLoading?: (group: IGroup) => boolean;\n\n  /** Text shown on group headers to indicate the group is being loaded. */\n  loadingText?: string;\n\n  /** The group to be rendered by the header. */\n  group?: IGroup;\n\n  /** The index of the group. */\n  groupIndex?: number;\n\n  /** The indent level of the group. */\n  groupLevel?: number;\n\n  /** Defines the number of columns a group header needs to span in the case of a grid or treegrid */\n  ariaColSpan?: number;\n\n  /** Defines the number of items in the current set of listitems or treeitems */\n  ariaSetSize?: number;\n\n  /** Defines an element's number or position in the current set of listitems or treeitems */\n  ariaPosInSet?: number;\n\n  /** Defines the number of items in the current set of grid items */\n  ariaRowCount?: number;\n\n  /** Defines an element's number or position in the current set of grid items */\n  ariaRowIndex?: number;\n\n  /**\n   * Width corresponding to a single level.\n   * This is multiplied by the groupLevel to get the full spacer width for the group.\n   */\n  indentWidth?: number;\n\n  /** If all items in the group are selected. */\n  selected?: boolean;\n\n  /**\n   * @deprecated Use `selected` instead. Deprecated at v.65.1.\n   */\n  isSelected?: boolean;\n\n  /** A reference to the viewport in which the header is rendered. */\n  viewport?: IViewport;\n\n  /** The selection mode of the list the group lives within. */\n  selectionMode?: SelectionMode;\n\n  /** Text to display for the group footer. */\n  footerText?: string;\n\n  /** Text to display for the group \"Show All\" link. */\n  showAllLinkText?: string;\n\n  /** Callback for when the group \"Show All\" link is clicked */\n  onToggleSummarize?: (group: IGroup) => void;\n\n  /** Callback for when the group header is clicked. */\n  onGroupHeaderClick?: (group: IGroup) => void;\n\n  /** Callback for when the \"keyup\" event is fired on the group header. */\n  onGroupHeaderKeyUp?: (ev: React.KeyboardEvent<HTMLElement>, group?: IGroup) => void;\n\n  /** Callback for when the group is expanded or collapsed. */\n  onToggleCollapse?: (group: IGroup) => void;\n\n  /** Callback for when the group is selected. */\n  onToggleSelectGroup?: (group: IGroup) => void;\n\n  /** Determines if the group selection check box is shown for collapsed groups. */\n  isCollapsedGroupSelectVisible?: boolean;\n\n  /** Override which allows the caller to provider a custom renderer for the GroupHeader title. */\n  onRenderTitle?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Props for expand/collapse button\n   * @deprecated Use {@link IGroupHeaderProps.expandButtonProps} instead.\n   */\n  expandButtonProps?: React.HTMLAttributes<HTMLButtonElement>;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n\n  /** Custom className */\n  className?: string;\n\n  /** Theme provided by the Higher Order Component */\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport type IGroupedListStyleProps = Required<Pick<IGroupedListProps, 'theme'>> &\n  Pick<IGroupedListProps, 'className'> & {\n    /** whether or not the group is collapsed */\n    isCollapsed?: boolean;\n\n    /** Whether the group is in compact mode or not */\n    compact?: boolean;\n  };\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListStyles {\n  root: IStyle;\n  group: IStyle;\n  groupIsDropping: IStyle;\n}\n", "import * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, getRTL, getId, KeyCodes, classNamesFunction } from '../../Utilities';\nimport { ColumnDragEndLocation, CheckboxVisibility } from './DetailsList.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon, FontIcon } from '../../Icon';\nimport { Layer } from '../../Layer';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { DragDropHelper } from '../../DragDrop';\nimport { DetailsColumn } from '../../components/DetailsList/DetailsColumn';\nimport { SelectAllVisibility } from './DetailsHeader.types';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IDisposable } from '../../Utilities';\nimport type { IColumn, IDetailsHeaderBaseProps, IColumnDragDropDetails } from './DetailsList.types';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { ITooltipHostProps } from '../../Tooltip';\nimport type { ISelection } from '../../Selection';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type { IDetailsColumnProps } from '../../components/DetailsList/DetailsColumn';\nimport type {\n  IDropHintDetails,\n  IColumnReorderHeaderProps,\n  IDetailsHeaderState,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles,\n  IDetailsHeader,\n} from './DetailsHeader.types';\n\nconst getClassNames = classNamesFunction<IDetailsHeaderStyleProps, IDetailsHeaderStyles>();\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsHeaderBase\n  extends React.Component<IDetailsHeaderBaseProps, IDetailsHeaderState>\n  implements IDetailsHeader {\n  public static defaultProps = {\n    selectAllVisibility: SelectAllVisibility.visible,\n    collapseAllVisibility: CollapseAllVisibility.visible,\n    useFastIcons: true,\n  };\n\n  private _classNames: IProcessedStyleSet<IDetailsHeaderStyles>;\n  private _rootElement = React.createRef<HTMLElement>();\n  private _events: EventGroup;\n  private _rootComponent = React.createRef<IFocusZone>();\n  private _id: string;\n  private _draggedColumnIndex = -1;\n  private _dropHintDetails: { [key: number]: IDropHintDetails } = {};\n  private _dragDropHelper: DragDropHelper;\n  private _currentDropHintIndex: number;\n  private _subscriptionObject?: IDisposable;\n  private _onDropIndexInfo: {\n    sourceIndex: number;\n    targetIndex: number;\n  };\n\n  constructor(props: IDetailsHeaderBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      columnResizeDetails: undefined,\n      isAllCollapsed: this.props.isAllCollapsed,\n      isAllSelected: !!this.props.selection && this.props.selection.isAllSelected(),\n    };\n\n    this._onDropIndexInfo = {\n      sourceIndex: -1,\n      targetIndex: -1,\n    };\n    this._id = getId('header');\n    this._currentDropHintIndex = -1;\n\n    // The drag drop handler won't do any work until subscribe() is called,\n    // so always set it up for convenience\n    this._dragDropHelper = new DragDropHelper({\n      selection: {\n        getSelection: () => {\n          return;\n        },\n      } as ISelection,\n      minimumPixelsForDrag: this.props.minimumPixelsForDrag,\n    });\n  }\n\n  public componentDidMount(): void {\n    const { selection } = this.props;\n\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n\n    // this._rootElement.current will be null in tests using react-test-renderer\n    if (this._rootElement.current) {\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\n\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\n\n      if (this._getColumnReorderProps()) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void {\n    if (this._getColumnReorderProps()) {\n      if (!this._subscriptionObject && this._rootElement.current) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    } else if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n      const { columns: previousColumns = NO_COLUMNS } = prevProps;\n      const { columns = NO_COLUMNS } = this.props;\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n        this._onDropIndexInfo = {\n          sourceIndex: -1,\n          targetIndex: -1,\n        };\n      }\n    }\n\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\n      this.setState({ isAllCollapsed: this.props.isAllCollapsed });\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    this._dragDropHelper.dispose();\n\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element {\n    const {\n      columns = NO_COLUMNS,\n      ariaLabel,\n      ariaLabelForToggleAllGroupsButton,\n      ariaLabelForSelectAllCheckbox,\n      selectAllVisibility,\n      ariaLabelForSelectionColumn,\n      indentWidth,\n      onColumnClick,\n      onColumnContextMenu,\n      onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip,\n      styles,\n      selectionMode,\n      theme,\n      onRenderDetailsCheckbox,\n      groupNestingDepth,\n      useFastIcons,\n      checkboxVisibility,\n      className,\n    } = this.props;\n    const { isAllSelected, columnResizeDetails, isSizing, isAllCollapsed } = this.state;\n    const showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n    const isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n    const isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\n\n    const columnReorderProps = this._getColumnReorderProps();\n    const frozenColumnCountFromStart =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromStart\n        ? columnReorderProps.frozenColumnCountFromStart\n        : 0;\n    const frozenColumnCountFromEnd =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromEnd\n        ? columnReorderProps.frozenColumnCountFromEnd\n        : 0;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      isAllSelected,\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n      isResizingColumn: !!columnResizeDetails && isSizing,\n      isSizing,\n      isAllCollapsed,\n      isCheckboxHidden,\n      className,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    const isRTL = getRTL(theme);\n    return (\n      <FocusZone\n        role=\"row\"\n        aria-label={ariaLabel}\n        className={classNames.root}\n        componentRef={this._rootComponent}\n        elementRef={this._rootElement}\n        onMouseMove={this._onRootMouseMove}\n        data-automationid=\"DetailsHeader\"\n        direction={FocusZoneDirection.horizontal}\n      >\n        {showCheckbox\n          ? [\n              <div\n                key=\"__checkbox\"\n                className={classNames.cellIsCheck}\n                aria-labelledby={`${this._id}-checkTooltip`}\n                onClick={!isCheckboxHidden ? this._onSelectAllClicked : undefined}\n                aria-colindex={1}\n                role={'columnheader'}\n              >\n                {onRenderColumnHeaderTooltip(\n                  {\n                    hostClassName: classNames.checkTooltip,\n                    id: `${this._id}-checkTooltip`,\n                    setAriaDescribedBy: false,\n                    content: ariaLabelForSelectAllCheckbox,\n                    children: (\n                      <DetailsRowCheck\n                        id={`${this._id}-check`}\n                        aria-label={\n                          selectionMode === SelectionMode.multiple\n                            ? ariaLabelForSelectAllCheckbox\n                            : ariaLabelForSelectionColumn\n                        }\n                        data-is-focusable={!isCheckboxHidden || undefined}\n                        isHeader={true}\n                        selected={isAllSelected}\n                        anySelected={false}\n                        canSelect={!isCheckboxHidden}\n                        className={classNames.check}\n                        onRenderDetailsCheckbox={onRenderDetailsCheckbox}\n                        useFastIcons={useFastIcons}\n                        isVisible={isCheckboxAlwaysVisible}\n                      />\n                    ),\n                  },\n                  this._onRenderColumnHeaderTooltip,\n                )}\n              </div>,\n              !this.props.onRenderColumnHeaderTooltip ? (\n                ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectAllCheckbox}\n                  </label>\n                ) : ariaLabelForSelectionColumn && isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectionColumn}\n                  </label>\n                ) : null\n              ) : null,\n            ]\n          : null}\n        {groupNestingDepth! > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible ? (\n          <div\n            className={classNames.cellIsGroupExpander}\n            onClick={this._onToggleCollapseAll}\n            data-is-focusable={true}\n            aria-label={ariaLabelForToggleAllGroupsButton}\n            aria-expanded={!isAllCollapsed}\n            role=\"columnheader\"\n          >\n            <IconComponent\n              className={classNames.collapseButton}\n              iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'}\n            />\n          </div>\n        ) : null}\n        <GroupSpacer indentWidth={indentWidth} role=\"gridcell\" count={groupNestingDepth! - 1} />\n        {columns.map((column: IColumn, columnIndex: number) => {\n          const _isDraggable = columnReorderProps\n            ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd\n            : false;\n          return [\n            columnReorderProps &&\n              (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&\n              this._renderDropHint(columnIndex),\n            <DetailsColumn\n              column={column}\n              styles={column.styles}\n              key={column.key}\n              columnIndex={(showCheckbox ? 2 : 1) + columnIndex}\n              parentId={this._id}\n              isDraggable={_isDraggable}\n              updateDragInfo={this._updateDragInfo}\n              dragDropHelper={this._dragDropHelper}\n              onColumnClick={onColumnClick}\n              onColumnContextMenu={onColumnContextMenu}\n              // Do not render tooltips by default, but allow for override via props.\n              onRenderColumnHeaderTooltip={this.props.onRenderColumnHeaderTooltip}\n              isDropped={this._onDropIndexInfo.targetIndex === columnIndex}\n              cellStyleProps={this.props.cellStyleProps}\n              useFastIcons={useFastIcons}\n            />,\n            this._renderColumnDivider(columnIndex),\n          ];\n        })}\n        {columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length)}\n        {isSizing && (\n          <Layer>\n            <div\n              className={classNames.sizingOverlay}\n              onMouseMove={this._onSizerMouseMove}\n              onMouseUp={this._onSizerMouseUp}\n            />\n          </Layer>\n        )}\n      </FocusZone>\n    );\n  }\n\n  /** Set focus to the active thing in the focus area. */\n  public focus(): boolean {\n    return !!this._rootComponent.current?.focus();\n  }\n\n  /**\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\n   * (because drag/drop handling will only be set up if reorder props are given).\n   */\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\n    const { columnReorderOptions, columnReorderProps } = this.props;\n    return columnReorderProps || (columnReorderOptions && { ...columnReorderOptions, onColumnDragEnd: undefined });\n  }\n\n  private _getHeaderDragDropOptions(): IDragDropOptions {\n    const options = {\n      selectionIndex: 1,\n      context: { data: this, index: 0 },\n      canDrag: () => false,\n      canDrop: () => true,\n      onDragStart: () => undefined,\n      updateDropState: this._updateDroppingState,\n      onDrop: this._onDrop,\n      onDragEnd: () => undefined,\n      onDragOver: this._onDragOver,\n    };\n    return options;\n  }\n\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\n      this._resetDropHints();\n    }\n  };\n\n  private _isValidCurrentDropHintIndex() {\n    return this._currentDropHintIndex >= 0;\n  }\n\n  private _onDragOver = (item: any, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0) {\n      event.stopPropagation();\n      this._computeDropHintToBeShown(event.clientX);\n    }\n  };\n\n  private _onDrop = (item?: any, event?: DragEvent): void => {\n    // Safe to assume this is defined since we're handling a drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n\n    // Target index will not get changed if draggeditem is after target item.\n    if (this._draggedColumnIndex >= 0 && event) {\n      const targetIndex =\n        this._draggedColumnIndex > this._currentDropHintIndex\n          ? this._currentDropHintIndex\n          : this._currentDropHintIndex - 1;\n      const isValidDrop = this._isValidCurrentDropHintIndex();\n      event.stopPropagation();\n      if (isValidDrop) {\n        this._onDropIndexInfo.sourceIndex = this._draggedColumnIndex;\n        this._onDropIndexInfo.targetIndex = targetIndex;\n\n        if (columnReorderProps.onColumnDrop) {\n          const dragDropDetails: IColumnDragDropDetails = {\n            draggedIndex: this._draggedColumnIndex,\n            targetIndex: targetIndex,\n          };\n          columnReorderProps.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderProps.handleColumnReorder) {\n          columnReorderProps.handleColumnReorder(this._draggedColumnIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n\n    this._resetDropHints();\n    this._dropHintDetails = {};\n    this._draggedColumnIndex = -1;\n  };\n\n  /**\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\n   */\n  private _isCheckboxColumnHidden(): boolean {\n    const { selectionMode, checkboxVisibility } = this.props;\n\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n  }\n\n  private _updateDragInfo = (props: { itemIndex: number }, event?: MouseEvent) => {\n    // Safe to assume this is defined since we're handling a drag event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    const itemIndex = props.itemIndex;\n    if (itemIndex >= 0) {\n      // Column index is set based on the checkbox\n      this._draggedColumnIndex = this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\n      this._getDropHintPositions();\n      if (columnReorderProps.onColumnDragStart) {\n        columnReorderProps.onColumnDragStart(true);\n      }\n    } else if (event && this._draggedColumnIndex >= 0) {\n      this._resetDropHints();\n      this._draggedColumnIndex = -1;\n      this._dropHintDetails = {};\n      if (columnReorderProps.onColumnDragEnd) {\n        const columnDragEndLocation = this._isEventOnHeader(event);\n        columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);\n      }\n    }\n  };\n\n  private _resetDropHints(): void {\n    if (this._currentDropHintIndex >= 0) {\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n      this._currentDropHintIndex = -1;\n    }\n  }\n\n  private _updateDropHintElement(element: HTMLElement, displayProperty: string) {\n    (element.childNodes[1] as HTMLElement).style.display = displayProperty;\n    (element.childNodes[0] as HTMLElement).style.display = displayProperty;\n  }\n\n  private _getDropHintPositions = (): void => {\n    const { columns = NO_COLUMNS } = this.props;\n    // Safe to assume this is defined since we're handling a drag/drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    let prevX = 0;\n    let prevMid = 0;\n    let prevRef: HTMLElement;\n    const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n    const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n    for (let i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n      if (this._rootElement.current) {\n        const dropHintElement = this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0] as HTMLElement;\n        if (dropHintElement) {\n          if (i === frozenColumnCountFromStart) {\n            prevX = dropHintElement.offsetLeft;\n            prevMid = dropHintElement.offsetLeft;\n            prevRef = dropHintElement;\n          } else {\n            const newMid = (dropHintElement.offsetLeft + prevX!) / 2;\n            this._dropHintDetails[i - 1] = {\n              originX: prevX,\n              startX: prevMid!,\n              endX: newMid,\n              dropHintElementRef: prevRef!,\n            };\n            prevMid = newMid;\n            prevRef = dropHintElement;\n            prevX = dropHintElement.offsetLeft;\n            if (i === columns.length - frozenColumnCountFromEnd) {\n              this._dropHintDetails[i] = {\n                originX: prevX,\n                startX: prevMid!,\n                endX: dropHintElement.offsetLeft,\n                dropHintElementRef: prevRef,\n              };\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\n   */\n  private _computeDropHintToBeShown = (clientX: number): void => {\n    const isRtl = getRTL(this.props.theme);\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      const headerOriginX = clientRect.left;\n      const eventXRelativePosition = clientX - headerOriginX;\n      const currentDropHintIndex = this._currentDropHintIndex;\n      if (this._isValidCurrentDropHintIndex()) {\n        if (\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex!].startX,\n            this._dropHintDetails[currentDropHintIndex!].endX,\n          )\n        ) {\n          return;\n        }\n      }\n      const { columns = NO_COLUMNS } = this.props;\n      // Safe to assume this is defined since we're handling a drag/drop event\n      const columnReorderProps = this._getColumnReorderProps()!;\n      const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n      const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n      const currentIndex: number = frozenColumnCountFromStart;\n      const lastValidColumn = columns.length - frozenColumnCountFromEnd;\n      let indexToUpdate = -1;\n      if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[currentIndex].endX)) {\n        indexToUpdate = currentIndex;\n      } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[lastValidColumn].startX)) {\n        indexToUpdate = lastValidColumn;\n      } else if (this._isValidCurrentDropHintIndex()) {\n        if (\n          this._dropHintDetails[currentDropHintIndex! + 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! + 1].startX,\n            this._dropHintDetails[currentDropHintIndex! + 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! + 1;\n        } else if (\n          this._dropHintDetails[currentDropHintIndex! - 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! - 1].startX,\n            this._dropHintDetails[currentDropHintIndex! - 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! - 1;\n        }\n      }\n      if (indexToUpdate === -1) {\n        let startIndex = frozenColumnCountFromStart;\n        let endIndex = lastValidColumn;\n        while (startIndex < endIndex) {\n          const middleIndex = Math.ceil((endIndex + startIndex!) / 2);\n          if (\n            _liesBetween(\n              isRtl,\n              eventXRelativePosition,\n              this._dropHintDetails[middleIndex].startX,\n              this._dropHintDetails[middleIndex].endX,\n            )\n          ) {\n            indexToUpdate = middleIndex;\n            break;\n          } else if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            endIndex = middleIndex;\n          } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            startIndex = middleIndex;\n          }\n        }\n      }\n\n      if (indexToUpdate === this._draggedColumnIndex || indexToUpdate === this._draggedColumnIndex + 1) {\n        if (this._isValidCurrentDropHintIndex()) {\n          this._resetDropHints();\n        }\n      } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n        this._resetDropHints();\n        this._updateDropHintElement(this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n        this._currentDropHintIndex = indexToUpdate;\n      }\n    }\n  };\n\n  private _isEventOnHeader(event: MouseEvent): ColumnDragEndLocation | undefined {\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      if (\n        event.clientX > clientRect.left &&\n        event.clientX < clientRect.right &&\n        event.clientY > clientRect.top &&\n        event.clientY < clientRect.bottom\n      ) {\n        return ColumnDragEndLocation.header;\n      }\n    }\n  }\n\n  private _renderColumnSizer = ({ columnIndex }: IDetailsColumnProps): JSX.Element | null => {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { columnResizeDetails } = this.state;\n    const classNames = this._classNames;\n\n    return column.isResizable ? (\n      <div\n        key={`${column.key}_sizer`}\n        aria-hidden={true}\n        role=\"button\"\n        data-is-focusable={false}\n        onClick={_stopPropagation}\n        data-sizer-index={columnIndex}\n        onBlur={this._onSizerBlur}\n        className={css(\n          classNames.cellSizer,\n          columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd,\n          {\n            [classNames.cellIsResizing]: columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,\n          },\n        )}\n        onDoubleClick={this._onSizerDoubleClick.bind(this, columnIndex)}\n      />\n    ) : null;\n  };\n\n  private _renderColumnDivider(columnIndex: number): JSX.Element | null {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { onRenderDivider } = column;\n    return onRenderDivider\n      ? onRenderDivider({ column, columnIndex }, this._renderColumnSizer)\n      : this._renderColumnSizer({ column, columnIndex });\n  }\n\n  private _renderDropHint(dropHintIndex: number): JSX.Element {\n    const classNames = this._classNames;\n    const IconComponent = this.props.useFastIcons ? FontIcon : Icon;\n    return (\n      <div key={'dropHintKey'} className={classNames.dropHintStyle} id={`columnDropHint_${dropHintIndex}`}>\n        <div\n          role=\"presentation\"\n          key={`dropHintCircleKey`}\n          className={classNames.dropHintCaretStyle}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          aria-hidden={true}\n        >\n          <IconComponent iconName={'CircleShapeSolid'} />\n        </div>\n        <div\n          key={`dropHintLineKey`}\n          aria-hidden={true}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          className={classNames.dropHintLineStyle}\n        />\n      </div>\n    );\n  }\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: ITooltipHostProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  /**\n   * double click on the column sizer will auto ajust column width\n   * to fit the longest content among current rendered rows.\n   *\n   * @param columnIndex - index of the column user double clicked\n   * @param ev - mouse double click event\n   */\n  private _onSizerDoubleClick(columnIndex: number, ev: React.MouseEvent<HTMLElement>): void {\n    const { onColumnAutoResized, columns = NO_COLUMNS } = this.props;\n    if (onColumnAutoResized) {\n      onColumnAutoResized(columns[columnIndex], columnIndex);\n    }\n  }\n\n  /**\n   * Called when the select all toggle is clicked.\n   */\n  private _onSelectAllClicked = (): void => {\n    const { selection } = this.props;\n\n    if (selection) {\n      selection.toggleAllSelected();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n    const columnIndex = Number(columnIndexAttr);\n    const { columns = NO_COLUMNS } = this.props;\n\n    if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    this.setState({\n      columnResizeDetails: {\n        columnIndex: columnIndex,\n        columnMinWidth: columns[columnIndex].calculatedWidth!,\n        originX: ev.clientX,\n      },\n    });\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onRootMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n\n    if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n      this.setState({ isSizing: true });\n    }\n  };\n\n  private _onRootKeyDown = (ev: KeyboardEvent): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n    const { columns = NO_COLUMNS, onColumnResized } = this.props;\n\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n\n    if (!columnIndexAttr || isSizing) {\n      return;\n    }\n\n    const columnIndex = Number(columnIndexAttr);\n\n    if (!columnResizeDetails) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: {\n            columnIndex: columnIndex,\n            columnMinWidth: columns[columnIndex].calculatedWidth!,\n          },\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    } else {\n      let increment: number | undefined;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: undefined,\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.left) {\n        increment = getRTL(this.props.theme) ? 1 : -1;\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.right) {\n        increment = getRTL(this.props.theme) ? -1 : 1;\n      }\n\n      if (increment) {\n        if (!ev.shiftKey) {\n          increment *= 10;\n        }\n\n        this.setState({\n          columnResizeDetails: {\n            ...columnResizeDetails,\n            columnMinWidth: columnResizeDetails.columnMinWidth + increment,\n          },\n        });\n\n        if (onColumnResized) {\n          onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  };\n\n  /**\n   * mouse move event handler in the header\n   * it will set isSizing state to true when user clicked on the sizer and move the mouse.\n   *\n   * @param ev - mouse move event\n   */\n  private _onSizerMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const {\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons,\n    } = ev;\n    const { onColumnIsSizingChanged, onColumnResized, columns = NO_COLUMNS } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onSizerMouseUp(ev);\n      return;\n    }\n\n    if (ev.clientX !== columnResizeDetails!.originX) {\n      if (onColumnIsSizingChanged) {\n        onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], true);\n      }\n    }\n\n    if (onColumnResized) {\n      let movement = ev.clientX - columnResizeDetails!.originX!;\n\n      if (getRTL(this.props.theme)) {\n        movement = -movement;\n      }\n\n      onColumnResized(\n        columns[columnResizeDetails!.columnIndex],\n        columnResizeDetails!.columnMinWidth + movement,\n        columnResizeDetails!.columnIndex,\n      );\n    }\n  };\n\n  private _onSizerBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { columnResizeDetails } = this.state;\n\n    if (columnResizeDetails) {\n      this.setState({\n        columnResizeDetails: undefined,\n        isSizing: false,\n      });\n    }\n  };\n\n  /**\n   * mouse up event handler in the header\n   * clear the resize related state.\n   * This is to ensure we can catch double click event\n   *\n   * @param ev - mouse up event\n   */\n  private _onSizerMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columns = NO_COLUMNS, onColumnIsSizingChanged } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    this.setState({\n      columnResizeDetails: undefined,\n      isSizing: false,\n    });\n\n    if (onColumnIsSizingChanged) {\n      onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], false);\n    }\n  };\n\n  private _onSelectionChanged(): void {\n    const isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n\n    if (this.state.isAllSelected !== isAllSelected) {\n      this.setState({\n        isAllSelected: isAllSelected,\n      });\n    }\n  }\n\n  private _onToggleCollapseAll = (): void => {\n    const { onToggleCollapseAll } = this.props;\n    const newCollapsed = !this.state.isAllCollapsed;\n    this.setState({\n      isAllCollapsed: newCollapsed,\n    });\n    if (onToggleCollapseAll) {\n      onToggleCollapseAll(newCollapsed);\n    }\n  };\n}\n\nfunction _liesBetween(rtl: boolean, target: number, left: number, right: number): boolean {\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\n}\nfunction _isBefore(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a >= b : a <= b;\n}\nfunction _isAfter(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a <= b : a >= b;\n}\n\nfunction _stopPropagation(ev: React.MouseEvent<HTMLElement>): void {\n  ev.stopPropagation();\n}\n", "import * as React from 'react';\nimport { DetailsListBase } from './DetailsList.base';\nimport { SelectionMode } from '../../Selection';\nimport { ScrollToMode } from '../../List';\nimport type { ISelection, ISelectionZoneProps } from '../../Selection';\nimport type { IRefObject, IBaseProps, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IDragDropEvents, IDragDropContext, IDragDropHelper, IDragDropOptions } from '../../DragDrop';\nimport type { IGroup, IGroupRenderProps, IGroupDividerProps, IGroupedListProps } from '../GroupedList/index';\nimport type { IDetailsRowProps, IDetailsRowBaseProps } from '../DetailsList/DetailsRow';\nimport type { IDetailsHeaderProps, IDetailsHeaderBaseProps } from './DetailsHeader';\nimport type { IDetailsFooterProps, IDetailsFooterBaseProps } from './DetailsFooter.types';\nimport type { IWithViewportProps, IViewport } from '../../utilities/decorators/withViewport';\nimport type { IList, IListProps } from '../../List';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\nimport type { IDetailsCheckboxProps } from './DetailsRowCheck.types';\nimport type {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnFilterIconProps,\n} from './DetailsColumn.types';\nimport { IFocusZoneProps } from '../../FocusZone';\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list prop updates don't change, but the list\n   * still needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change,\n   * you can call this to force a re-evaluation. Be aware that this can be an expensive operation and should be\n   * done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Scroll to and focus the item at the given index. focusIndex will call scrollToIndex on the specified index.\n   *\n   * @param index - Index of item to scroll to\n   * @param forceIntoFirstElement - If true, focus will be set to the first focusable child element of the item rather\n   *  than the item itself.\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional setting to determine where in the window the item should be scrolled to\n   * when focused.\n   */\n  focusIndex: (\n    index: number,\n    forceIntoFirstElement?: boolean,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListProps extends IBaseProps<IDetailsList>, IWithViewportProps {\n  /** Theme provided by a higher-order component. */\n  theme?: ITheme;\n\n  /** Custom overrides to the themed or default styles. */\n  styles?: IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>;\n\n  /**\n   * Callback to access the IDetailsList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IDetailsList>;\n\n  /** A key that uniquely identifies the given items. If provided, the selection will be reset when the key changes. */\n  setKey?: string;\n\n  /** The items to render. */\n  items: any[];\n\n  /** Set this to true to indicate that the items being displayed are placeholder data. */\n  isPlaceholderData?: boolean;\n\n  /** Properties to pass through to the List components being rendered. */\n  listProps?: IListProps;\n\n  /** Default index to set focus to once the items have rendered and the index exists. */\n  initialFocusedIndex?: number;\n\n  /** Class name to add to the root element. */\n  className?: string;\n\n  /** Grouping instructions. */\n  groups?: IGroup[];\n\n  /** Override properties to render groups. */\n  groupProps?: IDetailsGroupRenderProps;\n\n  /** Override for the indent width used for group nesting. */\n  indentWidth?: number;\n\n  /** Selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. Options include none, single, multiple */\n  selectionMode?: SelectionMode;\n\n  /**\n   * By default, selection is cleared when clicking on an empty (non-focusable) section of the screen.\n   * Setting this value to true overrides that behavior and maintains selection.\n   * @defaultvalue false\n   **/\n  selectionPreservedOnEmptyClick?: boolean;\n\n  /**\n   * Additional props to pass through to the SelectionZone created by default.\n   */\n  selectionZoneProps?: ISelectionZoneProps;\n\n  /** Controls how the columns are adjusted. */\n  layoutMode?: DetailsListLayoutMode;\n\n  /**\n   * Controls the visibility of selection check box.\n   * @defaultvalue CheckboxVisibility.onHover\n   */\n  checkboxVisibility?: CheckboxVisibility;\n\n  /**\n   * Controls the visibility of the header.\n   * @defaultvalue true\n   */\n  isHeaderVisible?: boolean;\n\n  /** Column definitions. If none are provided, default columns will be created based on the items' properties. */\n  columns?: IColumn[];\n\n  /** Controls how the list constrains overflow. */\n  constrainMode?: ConstrainMode;\n\n  /** Event names and corresponding callbacks that will be registered to rendered row elements. */\n  rowElementEventMap?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Callback for when the list has been updated. Useful for telemetry tracking externally. */\n  onDidUpdate?: (detailsList?: DetailsListBase) => void;\n\n  /**\n   * Callback for when a given row has been mounted. Useful for identifying when a row has been rendered on the page.\n   */\n  onRowDidMount?: (item?: any, index?: number) => void;\n\n  /**\n   * Callback for when a given row has been unmounted.\n   * Useful for identifying when a row has been removed from the page.\n   */\n  onRowWillUnmount?: (item?: any, index?: number) => void;\n\n  /** Callback for when the user clicks on the column header. */\n  onColumnHeaderClick?: (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void;\n\n  /** Callback for when the user asks for a contextual menu (usually via right click) from a column header. */\n  onColumnHeaderContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /** Callback fired on column resize */\n  onColumnResize?: (column?: IColumn, newWidth?: number, columnIndex?: number) => void;\n\n  /** Callback for when a given row has been invoked (by pressing enter while it is selected.) */\n  onItemInvoked?: (item?: any, index?: number, ev?: Event) => void;\n\n  /**\n   * Callback for when the context menu of an item has been accessed.\n   * If undefined or false is returned, `ev.preventDefault()` will be called.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n\n  /**\n   * Callback to override the default row rendering.\n   */\n  onRenderRow?: IRenderFunction<IDetailsRowProps>;\n\n  /**\n   * If provided, will be the \"default\" item column renderer method.\n   * This affects cells within the rows, not the rows themselves.\n   * If a column definition provides its own `onRender` method, that will be used instead of this.\n   */\n  onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => React.ReactNode;\n\n  /**\n   * If provided, will be the \"default\" item column cell value return.\n   * A column's `getValueKey` can override `getCellValueKey`.\n   */\n  getCellValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  /** Map of callback functions related to row drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** Callback for what to render when the item is missing. */\n  onRenderMissingItem?: (index?: number, rowProps?: IDetailsRowProps) => React.ReactNode;\n\n  /** An override to render the details header. */\n  onRenderDetailsHeader?: IRenderFunction<IDetailsHeaderProps>;\n\n  /** An override to render the details footer. */\n  onRenderDetailsFooter?: IRenderFunction<IDetailsFooterProps>;\n\n  /**  If provided, can be used to render a custom checkbox. */\n  onRenderCheckbox?: IRenderFunction<IDetailsListCheckboxProps>;\n\n  /** Viewport info, provided by the `withViewport` decorator. */\n  viewport?: IViewport;\n\n  /**\n   * Callback for when an item in the list becomes active by clicking anywhere inside the row or navigating to it\n   * with the keyboard.\n   */\n  onActiveItemChanged?: (item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void;\n\n  /** Accessible label for the list header. */\n  ariaLabelForListHeader?: string;\n\n  /** Accessible label for the select all checkbox. */\n  ariaLabelForSelectAllCheckbox?: string;\n\n  /** Accessible label for the name of the selection column. */\n  ariaLabelForSelectionColumn?: string;\n\n  /** Callback to get the aria-label string for a given item. */\n  getRowAriaLabel?: (item: any) => string;\n\n  /** Callback to get the aria-describedby IDs (space-separated strings) of elements that describe the item. */\n  getRowAriaDescribedBy?: (item: any) => string;\n\n  /**\n   * Callback to get the item key, to be used in the selection and on render.\n   * Must be provided if sorting or filtering is enabled.\n   */\n  getKey?: (item: any, index?: number) => string;\n\n  /** Accessible label describing or summarizing the list. */\n  ariaLabel?: string;\n\n  /** Accessible label for the row check button, e.g. \"select row\". */\n  checkButtonAriaLabel?: string;\n\n  /** Accessible label for the group header check button, e.g. \"select section\". */\n  checkButtonGroupAriaLabel?: string;\n\n  /** Accessible label for the grid within the list. */\n  ariaLabelForGrid?: string;\n\n  /** An optional margin for proportional columns, to e.g. account for scrollbars when laying out width. */\n  flexMargin?: number;\n\n  /**\n   * Whether the role `application` should be applied to the list.\n   * @defaultvalue false\n   */\n  shouldApplyApplicationRole?: boolean;\n\n  /**\n   * The minimum mouse move distance to interpret the action as drag event.\n   * @defaultvalue 5\n   */\n  minimumPixelsForDrag?: number;\n\n  /**\n   * Whether to render in compact mode.\n   * @defaultvalue false\n   */\n  compact?: boolean;\n\n  /**\n   * Whether to enable render page caching. This is an experimental performance optimization that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Callback to determine whether the list should be rendered in full, or virtualized.\n   *\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance\n   * for smaller lists.\n   *\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Class name to add to the cell of a checkbox. */\n  checkboxCellClassName?: string;\n\n  /** Whether the selection zone should enter modal state on touch. */\n  enterModalSelectionOnTouch?: boolean;\n\n  /** Options for column reordering using drag and drop. */\n  columnReorderOptions?: IColumnReorderOptions;\n\n  /** Callback to override default group height calculation used by list virtualization. */\n  getGroupHeight?: IGroupedListProps['getGroupHeight'];\n\n  /**\n   * Whether to re-render a row only when props changed. Might cause regression when depending on external updates.\n   * @defaultvalue false\n   */\n  useReducedRowRenderer?: boolean;\n\n  /**\n   * Props impacting the render style of cells. Since these have an impact on calculated column widths, they are\n   * handled separately from normal theme styling, but they are passed to the styling system.\n   */\n  cellStyleProps?: ICellStyleProps;\n\n  /** Whether to disable the built-in SelectionZone, so the host component can provide its own. */\n  disableSelectionZone?: boolean;\n\n  /** Whether to animate updates */\n  enableUpdateAnimations?: boolean;\n\n  /**\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\n   * but are still customizable via class names.\n   * @defaultvalue true\n   */\n  useFastIcons?: boolean;\n\n  /** Role for the list. */\n  role?: string;\n\n  /**\n   * Properties to pass through to the FocusZone.\n   */\n  focusZoneProps?: IFocusZoneProps;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumn {\n  /** A unique key for identifying the column. */\n  key: string;\n\n  /** Name to render on the column header. */\n  name: string;\n\n  /**\n   * The field to pull the text value from for the column.\n   * Can be unset if a custom `onRender` method is provided.\n   */\n  fieldName?: string;\n\n  /**\n   * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\n   * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\n   * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (3/4) = 75% of the remaining space. Note that\n   * this relies on viewport measures and will not work well with skipViewportMeasures.\n   */\n  flexGrow?: number;\n\n  /** Class name to apply to the column cell within each row. */\n  className?: string;\n\n  /** Custom overrides to the themed or default styles. */\n  styles?: IStyleFunctionOrObject<IDetailsColumnStyleProps, IDetailsColumnStyles>;\n\n  /** Minimum width for the column. */\n  minWidth: number;\n\n  /**\n   * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\n   * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\n   * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (2/4) = 75% of the remaining space. Note that\n   * this relies on viewport measures and will not work well with skipViewportMeasures.\n   */\n  targetWidthProportion?: number;\n\n  /**\n   * Accessible label for the column. The column name will still be used as the primary label,\n   * but this text (if specified) will be used as the column description.\n   * WARNING: grid column descriptions are often ignored by screen readers, so any necessary information\n   * should go directly in the column content\n   */\n  ariaLabel?: string;\n\n  /** Whether the column is a header for the given row. There should be only one column with this set to true. */\n  isRowHeader?: boolean;\n\n  /** Maximum width for the column, if stretching is allowed in justified scenarios. */\n  maxWidth?: number;\n\n  /**\n   * Defines how the column's header should render.\n   * @defaultvalue ColumnActionsMode.clickable\n   */\n  columnActionsMode?: ColumnActionsMode;\n\n  /** Custom icon to use in the column header. */\n  iconName?: string;\n\n  /**\n   * Whether only the icon should be displayed in the column header.\n   * If true, the column name and dropdown chevron will not be displayed.\n   */\n  isIconOnly?: boolean;\n\n  /** Class name for the icon within the header. */\n  iconClassName?: string;\n\n  /**\n   * If true, allow the column to be collapsed when rendered in justified layout.\n   * @deprecated Use `isCollapsible`\n   */\n  isCollapsable?: boolean;\n\n  /** If true, allow the column to be collapsed when rendered in justified layout. */\n  isCollapsible?: boolean;\n\n  /** Determines if the column is currently sorted. Renders a sort arrow in the column header. */\n  isSorted?: boolean;\n\n  /** Determines if the sort arrow is pointed down (descending) or up. */\n  isSortedDescending?: boolean;\n\n  /** Determines if the column can be resized. */\n  isResizable?: boolean;\n\n  /** Determines if the column can render multi-line text. */\n  isMultiline?: boolean;\n\n  /** Custom renderer for cell content, instead of the default text rendering. */\n  onRender?: (item?: any, index?: number, column?: IColumn) => any;\n\n  /** Custom override for the parent list's `getCellValueKey`. */\n  getValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  /** Custom renderer for column header divider. */\n  onRenderDivider?: IRenderFunction<IDetailsColumnProps>;\n\n  /** Custom renderer for filter icon. */\n  onRenderFilterIcon?: IRenderFunction<IDetailsColumnFilterIconProps>;\n\n  /** Custom renderer for column header content, instead of the default text rendering. */\n  onRenderHeader?: IRenderFunction<IDetailsColumnProps>;\n\n  /** Whether the list is filtered by this column. If true, shows a filter icon next to this column's name. */\n  isFiltered?: boolean;\n\n  /** Callback for when the user clicks on the column header. */\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\n\n  /** Callback for when the user opens the column header context menu. */\n  onColumnContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /**\n   * Callback for when the column is resized (`width` is the current width).\n   *\n   * Prefer this over `DetailsList`'s `onColumnResize` if you require the `IColumn` to report its width\n   * after every resize event. Consider debouncing the callback if resize events occur frequently.\n   */\n  onColumnResize?: (width?: number) => void;\n\n  /** Whether the list is grouped by this column. If true, shows a grouped icon next to this column's name. */\n  isGrouped?: boolean;\n\n  /** Arbitrary data passthrough which can be used by the caller. */\n  data?: any;\n\n  /** Internal only value. */\n  calculatedWidth?: number;\n\n  /**\n   * Internal only value.\n   * Remembers the actual width of the column in any case.\n   * `calculatedWidth` is only saved when it's defined by user, not for justified calculations.\n   */\n  currentWidth?: number;\n\n  /** Class name to apply to the column header cell. */\n  headerClassName?: string;\n\n  /** If true, add additional LTR padding-right to column and cells. */\n  isPadded?: boolean;\n\n  /**\n   * Accessible label for indicating that the list is sorted by this column in ascending order.\n   * This will be read after the main column header label.\n   */\n  sortAscendingAriaLabel?: string;\n\n  /**\n   * Accessible label for indicating that the list is sorted by this column in descending order.\n   * This will be read after the main column header label.\n   */\n  sortDescendingAriaLabel?: string;\n\n  /** Accessible label for the status of this column when grouped. */\n  groupAriaLabel?: string;\n\n  /** Accessible label for the status of this column when filtered. */\n  filterAriaLabel?: string;\n\n  /** Whether a dropdown menu is open so that the appropriate ARIA attributes are rendered. */\n  isMenuOpen?: boolean;\n}\n\n/**\n * Enum to describe how a particular column header behaves.\n * This is used to to specify the property `IColumn.columnActionsMode`.\n * If `IColumn.columnActionsMode` is undefined, it's equivalent to `ColumnActionsMode.clickable`.\n * {@docCategory DetailsList}\n */\nexport enum ColumnActionsMode {\n  /** Renders the column header as disabled. */\n  disabled = 0,\n\n  /** Renders the column header as clickable. Default value. */\n  clickable = 1,\n\n  /** Renders the column header as clickable and displays the dropdown chevron. */\n  hasDropdown = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum ConstrainMode {\n  /** Lets the content grow which allows the page to manage scrolling. */\n  unconstrained = 0,\n\n  /** Constrains the list to the given layout space. */\n  horizontalConstrained = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnReorderOptions {\n  /**\n   * Specifies the number fixed columns from left\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromStart?: number;\n\n  /**\n   * Specifies the number fixed columns from right\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromEnd?: number;\n\n  /**\n   * Callback to handle when dragging on this column's DetailsHeader has started.\n   */\n  onColumnDragStart?: (dragStarted: boolean) => void;\n\n  /**\n   * Callback to handle column reordering.\n   * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\n   * @deprecated Use `onColumnDrop` instead.\n   */\n  handleColumnReorder?: (draggedIndex: number, targetIndex: number) => void;\n\n  /**\n   * Callback to handle column reordering.\n   * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\n   */\n  onColumnDrop?: (dragDropDetails: IColumnDragDropDetails) => void;\n\n  /**\n   * Callback to handle when dragging on this column's DetailsHeader has finished.\n   */\n  onDragEnd?: (columnDropLocationDetails: ColumnDragEndLocation) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnDragDropDetails {\n  /**\n   * Specifies the source column index\n   * @defaultvalue -1\n   */\n  draggedIndex: number;\n\n  /**\n   * Specifies the target column index\n   * @defaultvalue -1\n   */\n  targetIndex: number;\n}\n\n/**\n * Enum to describe where the column has been dropped, after starting the drag\n * {@docCategory DetailsList}\n */\nexport enum ColumnDragEndLocation {\n  /** Drag ended outside of current list */\n  outside = 0,\n\n  /** Drag ended within current list */\n  surface = 1,\n\n  /** Drag ended on header */\n  header = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum DetailsListLayoutMode {\n  /**\n   * Lets the user resize columns and makes not attempt to fit them.\n   */\n  fixedColumns = 0,\n\n  /**\n   * Manages which columns are visible, tries to size them according to their min/max rules and drops\n   * off columns that can't fit and have isCollapsible set.\n   */\n  justified = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum CheckboxVisibility {\n  /** Visible on hover. */\n  onHover = 0,\n\n  /** Visible always. */\n  always = 1,\n\n  /** Hide checkboxes. */\n  hidden = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport type IDetailsListStyleProps = Required<Pick<IDetailsListProps, 'theme'>> &\n  Pick<IDetailsListProps, 'className'> & {\n    /** Whether the list is horizontally constrained */\n    isHorizontalConstrained?: boolean;\n\n    /** Whether the list is in compact mode */\n    compact?: boolean;\n\n    /** Whether the list is fixed in size */\n    isFixed?: boolean;\n  };\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListStyles {\n  root: IStyle;\n  focusZone: IStyle;\n  headerWrapper: IStyle;\n  contentWrapper: IStyle;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupRenderProps extends IGroupRenderProps {\n  onRenderFooter?: IRenderFunction<IDetailsGroupDividerProps>;\n  onRenderHeader?: IRenderFunction<IDetailsGroupDividerProps>;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupDividerProps extends IGroupDividerProps, IDetailsItemProps {}\n\nexport interface IDetailsListCheckboxProps extends IDetailsCheckboxProps {}\n\nexport type {\n  IDetailsHeaderProps,\n  IDetailsRowBaseProps,\n  IDetailsHeaderBaseProps,\n  IDetailsFooterBaseProps,\n  IDragDropContext,\n  IDragDropEvents,\n  IDragDropHelper,\n  IDragDropOptions,\n  IViewport,\n  IWithViewportProps,\n};\n", "import * as React from 'react';\nimport type { IGroupSpacerProps } from './GroupSpacer.types';\n\nexport const SPACER_WIDTH = 36;\n\nexport const GroupSpacer: React.FunctionComponent<IGroupSpacerProps> = props => {\n  const { count, indentWidth = SPACER_WIDTH, role = 'presentation' } = props;\n  const width = count * indentWidth;\n\n  return count > 0 ? (\n    <span className={'ms-GroupSpacer'} style={{ display: 'inline-block', width }} role={role} />\n  ) : null;\n};\n", "import { getGlobalClassNames, AnimationVariables } from '../../Styling';\nimport type { IGroupedListStyleProps, IGroupedListStyles } from './GroupedList.types';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupedList',\n  compact: 'ms-GroupedList--Compact',\n  group: 'ms-GroupedList-group',\n  link: 'ms-Link',\n  listCell: 'ms-List-cell',\n};\n\nconst beziers = {\n  easeInOutSine: 'cubic-bezier(0.445, 0.050, 0.550, 0.950)',\n};\n\nexport const getStyles = (props: IGroupedListStyleProps): IGroupedListStyles => {\n  const { theme, className, compact } = props;\n  const { palette } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        selectors: {\n          [`.${classNames.listCell}`]: {\n            minHeight: 38, // be consistent with DetailsList styles\n          },\n        },\n      },\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32, // be consistent with DetailsList styles\n            },\n          },\n        },\n      ],\n      className,\n    ],\n    group: [\n      classNames.group,\n      {\n        transition: `background-color ${AnimationVariables.durationValue2} ${beziers.easeInOutSine}`,\n      },\n    ],\n    groupIsDropping: {\n      backgroundColor: palette.neutralLight,\n    },\n  };\n};\n", "import * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List, ScrollToMode } from '../../List';\nimport { SelectionMode } from '../../Selection';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup,\n  IGroupedListStyleProps,\n  IGroupedListStyles,\n} from './GroupedList.types';\nimport type { IListProps } from '../../List';\nimport type { IGroupHeaderProps } from './GroupHeader';\nimport type { IGroupShowAllProps } from './GroupShowAll.styles';\nimport type { IGroupFooterProps } from './GroupFooter.types';\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\nconst { rowHeight: ROW_HEIGHT, compactRowHeight: COMPACT_ROW_HEIGHT } = DEFAULT_ROW_HEIGHTS;\n\nexport interface IGroupedListState {\n  selectionMode?: IGroupedListProps['selectionMode'];\n  compact?: IGroupedListProps['compact'];\n  groups?: IGroup[];\n  items?: IGroupedListProps['items'];\n  listProps?: IGroupedListProps['listProps'];\n  version: {};\n}\n\nexport class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false,\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupedListStyles>;\n\n  private _list = React.createRef<List>();\n\n  private _isSomeGroupExpanded: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupedListProps,\n    previousState: IGroupedListState,\n  ): IGroupedListState {\n    const { groups, selectionMode, compact, items, listProps } = nextProps;\n    const listVersion = listProps && listProps.version;\n\n    let nextState = {\n      ...previousState,\n      selectionMode,\n      compact,\n      groups,\n      listProps,\n    };\n\n    let shouldForceUpdates = false;\n\n    const previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (\n      listVersion !== previousListVersion ||\n      items !== previousState.items ||\n      groups !== previousState.groups ||\n      selectionMode !== previousState.selectionMode ||\n      compact !== previousState.compact\n    ) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (groups !== previousState.groups) {\n      nextState = {\n        ...nextState,\n        groups,\n      };\n    }\n\n    if (selectionMode !== previousState.selectionMode || compact !== previousState.compact) {\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  }\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    const { listProps: { version = {} } = {} } = props;\n\n    this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version,\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current!.getStartItemIndexInView() || 0;\n  }\n\n  public componentDidMount() {\n    const { groupProps, groups = [] } = this.props;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      usePageCache,\n      onShouldVirtualize,\n      theme,\n      role = 'treegrid',\n      styles,\n      compact,\n      focusZoneProps = {},\n      rootListProps = {},\n    } = this.props;\n    const { groups, version } = this.state;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      compact: compact,\n    });\n\n    const { shouldEnterInnerZone = this._isInnerZoneKeystroke } = focusZoneProps;\n\n    return (\n      <FocusZone\n        direction={FocusZoneDirection.vertical}\n        data-automationid=\"GroupedList\"\n        data-is-scrollable=\"false\"\n        role=\"presentation\"\n        {...focusZoneProps}\n        shouldEnterInnerZone={shouldEnterInnerZone}\n        className={css(this._classNames.root, focusZoneProps.className)}\n      >\n        {!groups ? (\n          this._renderGroup(undefined, 0)\n        ) : (\n          <List\n            ref={this._list}\n            role={role}\n            items={groups}\n            onRenderCell={this._renderGroup}\n            getItemCountForPage={this._returnOne}\n            getPageHeight={this._getPageHeight}\n            getPageSpecification={this._getPageSpecification}\n            usePageCache={usePageCache}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            {...rootListProps}\n          />\n        )}\n      </FocusZone>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups = [] } = this.state;\n    const { groupProps } = this.props;\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  private _setGroupsCollapsedState(groups: IGroup[], isCollapsed: boolean): void {\n    for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  }\n\n  private _renderGroup = (group: IGroup | undefined, groupIndex: number): React.ReactNode => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport,\n      onShouldVirtualize,\n      groups,\n      compact,\n    } = this.props;\n\n    // override group header/footer props as needed\n    const dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize,\n    };\n\n    const headerProps: IGroupHeaderProps = { ...groupProps!.headerProps, ...dividerProps };\n    const showAllProps: IGroupShowAllProps = { ...groupProps!.showAllProps, ...dividerProps };\n    const footerProps: IGroupFooterProps = { ...groupProps!.footerProps, ...dividerProps };\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\n      return null;\n    }\n\n    const finalListProps: IListProps = {\n      ...(listProps || {}),\n      version: this.state.version,\n    };\n\n    return (\n      <GroupedListSection\n        key={this._getGroupKey(group, groupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={groupProps && groupProps.getGroupItemLimit}\n        group={group}\n        groupIndex={groupIndex}\n        groupNestingDepth={groupNestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        listProps={finalListProps}\n        items={items}\n        onRenderCell={onRenderCell}\n        onRenderGroupHeader={groupProps!.onRenderHeader}\n        onRenderGroupShowAll={groupProps!.onRenderShowAll}\n        onRenderGroupFooter={groupProps!.onRenderFooter}\n        selectionMode={selectionMode}\n        selection={selection}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onShouldVirtualize={onShouldVirtualize}\n        groupedListClassNames={this._classNames}\n        groups={groups}\n        compact={compact}\n      />\n    );\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getDefaultGroupItemLimit = (group: IGroup): number => {\n    return group.children && group.children.length > 0 ? group.children.length : group.count;\n  };\n\n  private _getGroupItemLimit = (group: IGroup): number => {\n    const { groupProps } = this.props;\n    const getGroupItemLimit =\n      groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : this._getDefaultGroupItemLimit;\n\n    return getGroupItemLimit(group);\n  };\n\n  private _getGroupHeight = (group: IGroup): number => {\n    const rowHeight = this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n\n    return rowHeight + (group.isCollapsed ? 0 : rowHeight * this._getGroupItemLimit(group));\n  };\n\n  private _getPageHeight: IListProps['getPageHeight'] = (itemIndex: number) => {\n    const { groups } = this.state;\n    const { getGroupHeight = this._getGroupHeight } = this.props;\n    const pageGroup = groups && groups[itemIndex];\n\n    if (pageGroup) {\n      return getGroupHeight(pageGroup, itemIndex);\n    } else {\n      return 0;\n    }\n  };\n\n  private _getGroupKey(group: IGroup | undefined, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onToggleCollapse = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n\n  private _onToggleSelectGroup = (group: IGroup): void => {\n    const { selection, selectionMode } = this.props;\n\n    if (group && selection && selectionMode === SelectionMode.multiple) {\n      selection.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  private _isInnerZoneKeystroke = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    // eslint-disable-next-line deprecation/deprecation\n    return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n  };\n\n  private _forceListUpdates(groups?: IGroup[]): void {\n    this.setState({\n      version: {},\n    });\n  }\n\n  private _onToggleSummarize = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  };\n\n  private _getPageSpecification = (\n    itemIndex: number,\n  ): {\n    key?: string;\n  } => {\n    const groups = this.state.groups;\n    const pageGroup = groups && groups[itemIndex];\n    return {\n      key: pageGroup && pageGroup.key,\n    };\n  };\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(\n      groups &&\n      groups.some(group => (group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed))\n    );\n  }\n\n  private _updateIsSomeGroupExpanded(): void {\n    const { groups } = this.state;\n    const { onGroupExpandStateChanged } = this.props;\n\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n", "import * as React from 'react';\nimport { initializeComponentRef, css, getId, EventGroup } from '../../Utilities';\n\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\n\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\n\nimport { List } from '../../List';\nimport type { IGroup, IGroupDividerProps, IGroupRenderProps, IGroupedListStyles } from './GroupedList.types';\nimport type { IGroupHeaderProps } from './GroupHeader.types';\nimport type { IGroupFooterProps } from './GroupFooter.types';\nimport type { IGroupShowAllProps } from './GroupShowAll.types';\nimport type { IDragDropContext, IDragDropEvents, IDragDropHelper, IDragDropOptions } from '../../DragDrop';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IRenderFunction, IDisposable } from '../../Utilities';\nimport type { ISelection } from '../../Selection';\nimport type { IListProps } from '../../List';\nimport type { IViewport } from '../../utilities/decorators/withViewport';\n\nexport interface IGroupedListSectionProps extends React.ClassAttributes<GroupedListSection> {\n  /** GroupedList resolved class names */\n  groupedListClassNames?: IProcessedStyleSet<IGroupedListStyles>;\n\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: () => void;\n\n  /** Whether to render in compact mode */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item rows and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Optional grouping instructions. */\n  groupIndex?: number;\n\n  /** Optional group nesting level. */\n  groupNestingDepth?: number;\n\n  /** Optional grouping instructions. */\n  group?: IGroup;\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional list props to pass to list renderer.  */\n  listProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Information to pass in to the group Show All footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Override for rendering the group header. */\n  onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Override for rendering the group Show All link. */\n  onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /** Override for rendering the group footer. */\n  onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n}\n\nexport interface IGroupedListSectionState {\n  isDropping?: boolean;\n  isSelected?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class GroupedListSection extends React.Component<IGroupedListSectionProps, IGroupedListSectionState> {\n  private _root = React.createRef<HTMLDivElement>();\n  private _list = React.createRef<List>();\n  private _subGroupRefs: Record<string, GroupedListSection | null> = {};\n  private _id: string;\n  private _events: EventGroup;\n\n  private _dragDropSubscription?: IDisposable;\n  private _droppingClassName: string = '';\n\n  constructor(props: IGroupedListSectionProps) {\n    super(props);\n\n    const { selection, group } = props;\n\n    initializeComponentRef(this);\n\n    this._id = getId('GroupedListSection');\n\n    this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false,\n    };\n\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount(): void {\n    const { dragDropHelper, selection } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getGroupDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  }\n\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\n    if (\n      this.props.group !== previousProps.group ||\n      this.props.groupIndex !== previousProps.groupIndex ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getGroupDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      getGroupItemLimit,\n      group,\n      groupIndex,\n      headerProps,\n      showAllProps,\n      footerProps,\n      viewport,\n      selectionMode,\n      onRenderGroupHeader = this._onRenderGroupHeader,\n      onRenderGroupShowAll = this._onRenderGroupShowAll,\n      onRenderGroupFooter = this._onRenderGroupFooter,\n      onShouldVirtualize,\n      groupedListClassNames,\n      groups,\n      compact,\n      listProps = {},\n    } = this.props;\n    const { isSelected } = this.state;\n    const renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    const isShowAllVisible =\n      group &&\n      !group.children &&\n      !group.isCollapsed &&\n      !group.isShowingAll &&\n      (group.count > renderCount || group.hasMoreData);\n    const hasNestedGroups = group && group.children && group.children.length > 0;\n\n    const { version } = listProps;\n\n    const dividerProps: IGroupDividerProps = {\n      group,\n      groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected,\n      selected: isSelected,\n      viewport,\n      selectionMode,\n      groups,\n      compact,\n    };\n\n    const ariaControlsProps: IGroupHeaderProps = {\n      groupedListId: this._id,\n      ariaSetSize: groups ? groups.length : undefined,\n      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined,\n    };\n\n    const groupHeaderProps: IGroupHeaderProps = { ...headerProps, ...dividerProps, ...ariaControlsProps };\n    const groupShowAllProps: IGroupShowAllProps = { ...showAllProps, ...dividerProps };\n    const groupFooterProps: IGroupFooterProps = { ...footerProps, ...dividerProps };\n\n    const isDraggable: boolean =\n      !!this.props.dragDropHelper &&\n      this._getGroupDragDropOptions().canDrag!(group) &&\n      !!this.props.dragDropEvents!.canDragGroups;\n\n    return (\n      <div\n        ref={this._root}\n        {...(isDraggable && { draggable: true })}\n        className={css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName())}\n        role=\"presentation\"\n      >\n        {onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader)}\n        {group && group.isCollapsed ? null : hasNestedGroups ? (\n          <List\n            role=\"presentation\"\n            ref={this._list}\n            items={group ? group.children : []}\n            onRenderCell={this._renderSubGroup}\n            getItemCountForPage={this._returnOne}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            id={this._id}\n          />\n        ) : (\n          this._onRenderGroup(renderCount)\n        )}\n        {group && group.isCollapsed\n          ? null\n          : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll)}\n        {onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)}\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this.forceListUpdate();\n  }\n\n  public forceListUpdate() {\n    const { group } = this.props;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        const subGroupCount = group.children.length;\n\n        for (let i = 0; i < subGroupCount; i++) {\n          const subGroup = this._list.current.pageRefs['subGroup_' + String(i)] as GroupedListSection;\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      const subGroup = this._subGroupRefs['subGroup_' + String(0)];\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  }\n\n  private _onRenderGroupHeader = (props: IGroupHeaderProps): JSX.Element => {\n    return <GroupHeader {...props} />;\n  };\n\n  private _onRenderGroupShowAll = (props: IGroupShowAllProps): JSX.Element => {\n    return <GroupShowAll {...props} />;\n  };\n\n  private _onRenderGroupFooter = (props: IGroupFooterProps): JSX.Element => {\n    return <GroupFooter {...props} />;\n  };\n\n  private _onSelectionChange(): void {\n    const { group, selection } = this.props;\n    if (selection && group) {\n      const isSelected = selection.isRangeSelected(group.startIndex, group.count);\n\n      if (isSelected !== this.state.isSelected) {\n        this.setState({ isSelected });\n      }\n    }\n  }\n\n  private _onRenderGroupCell(\n    onRenderCell: any,\n    groupNestingDepth: number | undefined,\n    group: IGroup | undefined,\n  ): (item: any, itemIndex: number | undefined) => React.ReactNode {\n    return (item: any, itemIndex: number | undefined): React.ReactNode => {\n      return onRenderCell(groupNestingDepth, item, itemIndex, group);\n    };\n  }\n\n  private _onRenderGroup(renderCount: number): JSX.Element {\n    const { group, items, onRenderCell, listProps, groupNestingDepth, onShouldVirtualize, groupProps } = this.props;\n    const count = group && !group.isShowingAll ? group.count : items.length;\n    const startIndex = group ? group.startIndex : 0;\n\n    return (\n      <List\n        role={groupProps && groupProps.role ? groupProps.role : 'rowgroup'}\n        aria-label={group?.name}\n        items={items}\n        onRenderCell={this._onRenderGroupCell(onRenderCell, groupNestingDepth, group)}\n        ref={this._list}\n        renderCount={Math.min(count, renderCount)}\n        startIndex={startIndex}\n        onShouldVirtualize={onShouldVirtualize}\n        id={this._id}\n        {...listProps}\n      />\n    );\n  }\n\n  private _renderSubGroup = (subGroup: IGroup, subGroupIndex: number): JSX.Element | null => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      getGroupItemLimit,\n      groupNestingDepth,\n      groupProps,\n      items,\n      headerProps,\n      showAllProps,\n      footerProps,\n      listProps,\n      onRenderCell,\n      selection,\n      selectionMode,\n      viewport,\n      onRenderGroupHeader,\n      onRenderGroupShowAll,\n      onRenderGroupFooter,\n      onShouldVirtualize,\n      group,\n      compact,\n    } = this.props;\n\n    const nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n\n    return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (\n      <GroupedListSection\n        ref={ref => (this._subGroupRefs['subGroup_' + subGroupIndex] = ref)}\n        key={this._getGroupKey(subGroup, subGroupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={getGroupItemLimit}\n        group={subGroup}\n        groupIndex={subGroupIndex}\n        groupNestingDepth={nestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        items={items}\n        listProps={listProps}\n        onRenderCell={onRenderCell}\n        selection={selection}\n        selectionMode={selectionMode}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onRenderGroupHeader={onRenderGroupHeader}\n        onRenderGroupShowAll={onRenderGroupShowAll}\n        onRenderGroupFooter={onRenderGroupFooter}\n        onShouldVirtualize={onShouldVirtualize}\n        groups={group ? group.children : []}\n        compact={compact}\n      />\n    ) : null;\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getGroupKey(group: IGroup, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  }\n\n  /**\n   * collect all the data we need to enable drag/drop for a group\n   */\n  private _getGroupDragDropOptions = (): IDragDropOptions => {\n    const { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: -1,\n      context: { data: group, index: groupIndex, isGroup: true },\n      updateDropState: this._updateDroppingState,\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDrop: dragDropEvents!.onDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      onDragEnter: dragDropEvents!.onDragEnter,\n      onDragLeave: dragDropEvents!.onDragLeave,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n    return options as IDragDropOptions;\n  };\n\n  /**\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * @param newValue - new isDropping state value\n   * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newIsDropping: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, group } = this.props;\n\n    if (isDropping !== newIsDropping) {\n      if (isDropping) {\n        if (dragDropEvents && dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(group, event);\n        }\n      } else {\n        if (dragDropEvents && dragDropEvents.onDragEnter) {\n          this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n        }\n      }\n\n      this.setState({ isDropping: newIsDropping });\n    }\n  };\n\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  private _getDroppingClassName(): string {\n    let { isDropping } = this.state;\n    const { group, groupedListClassNames } = this.props;\n\n    isDropping = !!(group && isDropping);\n\n    return css(\n      isDropping && this._droppingClassName,\n      isDropping && DEFAULT_DROPPING_CSS_CLASS,\n      isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping,\n    );\n  }\n}\n", "import {\n  AnimationClassNames,\n  AnimationStyles,\n  HighContrastSelector,\n  getFocusStyle,\n  getGlobalClassNames,\n  FontWeights,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nimport { GlobalClassNames as LinkGlobalClassNames } from '../../components/Link/Link.styles';\nimport type { IDetailsRowStyleProps, IDetailsRowStyles, ICellStyleProps } from './DetailsRow.types';\nimport type { IStyle } from '../../Styling';\n\nexport const DetailsRowGlobalClassNames = {\n  root: 'ms-DetailsRow',\n  // TODO: in Fabric 7.0 lowercase the 'Compact' for consistency across other components.\n  compact: 'ms-DetailsList--Compact',\n  cell: 'ms-DetailsRow-cell',\n  cellAnimation: 'ms-DetailsRow-cellAnimation',\n  cellCheck: 'ms-DetailsRow-cellCheck',\n  check: 'ms-DetailsRow-check',\n  cellMeasurer: 'ms-DetailsRow-cellMeasurer',\n  listCellFirstChild: 'ms-List-cell:first-child',\n  isContentUnselectable: 'is-contentUnselectable',\n  isSelected: 'is-selected',\n  isCheckVisible: 'is-check-visible',\n  isRowHeader: 'is-row-header',\n  fields: 'ms-DetailsRow-fields',\n};\nconst IsFocusableSelector = \"[data-is-focusable='true']\";\n\nexport const DEFAULT_CELL_STYLE_PROPS: ICellStyleProps = {\n  cellLeftPadding: 12,\n  cellRightPadding: 8,\n  cellExtraRightPadding: 24,\n};\n\n// Source of default row heights to share.\nexport const DEFAULT_ROW_HEIGHTS = {\n  rowHeight: 42,\n  compactRowHeight: 32,\n};\n\n// Constant values\nconst values = {\n  ...DEFAULT_ROW_HEIGHTS,\n  rowVerticalPadding: 11,\n  compactRowVerticalPadding: 6,\n};\n\nexport const getDetailsRowStyles = (props: IDetailsRowStyleProps): IDetailsRowStyles => {\n  const {\n    theme,\n    isSelected,\n    canSelect,\n    droppingClassName,\n    anySelected,\n    isCheckVisible,\n    checkboxCellClassName,\n    compact,\n    className,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    enableUpdateAnimations,\n    disabled,\n  } = props;\n\n  const { palette, fonts } = theme;\n  const {\n    neutralPrimary,\n    white,\n    neutralSecondary,\n    neutralLighter,\n    neutralLight,\n    neutralDark,\n    neutralQuaternaryAlt,\n  } = palette;\n  const { focusBorder, linkHovered: focusedLinkColor } = theme.semanticColors;\n\n  const classNames = getGlobalClassNames(DetailsRowGlobalClassNames, theme);\n\n  const colors = {\n    // Default\n    defaultHeaderText: neutralPrimary,\n    defaultMetaText: neutralSecondary,\n    defaultBackground: white,\n\n    // Default Hover\n    defaultHoverHeaderText: neutralDark,\n    defaultHoverMetaText: neutralPrimary,\n    defaultHoverBackground: neutralLighter,\n\n    // Selected\n    selectedHeaderText: neutralDark,\n    selectedMetaText: neutralPrimary,\n    selectedBackground: neutralLight,\n\n    // Selected Hover\n    selectedHoverHeaderText: neutralDark,\n    selectedHoverMetaText: neutralPrimary,\n    selectedHoverBackground: neutralQuaternaryAlt,\n\n    // Focus\n    focusHeaderText: neutralDark,\n    focusMetaText: neutralPrimary,\n    focusBackground: neutralLight,\n    focusHoverBackground: neutralQuaternaryAlt,\n  };\n\n  const rowHighContrastFocus = {\n    top: 2,\n    right: 2,\n    bottom: 2,\n    left: 2,\n  };\n\n  // Selected row styles\n  const selectedStyles: IStyle = [\n    getFocusStyle(theme, {\n      inset: -1,\n      borderColor: focusBorder,\n      outlineColor: white,\n      highContrastStyle: rowHighContrastFocus,\n    }),\n    classNames.isSelected,\n    {\n      color: colors.selectedMetaText,\n      background: colors.selectedBackground,\n      borderBottom: `1px solid ${white}`,\n      selectors: {\n        '&:before': {\n          position: 'absolute',\n          display: 'block',\n          top: -1,\n          height: 1,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          content: '',\n          borderTop: `1px solid ${white}`,\n        },\n\n        [`.${classNames.cell} > .${LinkGlobalClassNames.root}`]: {\n          color: focusedLinkColor,\n        },\n\n        // Selected State hover\n        '&:hover': {\n          background: colors.selectedHoverBackground,\n          color: colors.selectedHoverMetaText,\n          selectors: {\n            // Selected State hover meta cell\n            [`.${classNames.cell} ${HighContrastSelector}`]: {\n              color: 'HighlightText',\n              selectors: {\n                '> a': {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Selected State hover Header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.selectedHoverHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Ensure high-contrast mode overrides default hover background\n            [HighContrastSelector]: {\n              background: 'Highlight',\n            },\n          },\n        },\n\n        // Focus state\n        '&:focus': {\n          background: colors.focusBackground,\n          selectors: {\n            // Selected State hover meta cell\n            [`.${classNames.cell}`]: {\n              color: colors.focusMetaText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                  selectors: {\n                    '> a': {\n                      color: 'HighlightText',\n                    },\n                  },\n                },\n              },\n            },\n\n            // Row header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.focusHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Ensure high-contrast mode overrides default focus background\n            [HighContrastSelector]: {\n              background: 'Highlight',\n            },\n          },\n        },\n\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n          selectors: {\n            a: {\n              color: 'HighlightText',\n            },\n          },\n        },\n\n        // Focus and hover state\n        '&:focus:hover': {\n          background: colors.focusHoverBackground,\n        },\n      },\n    },\n  ];\n\n  const cannotSelectStyles: IStyle = [\n    classNames.isContentUnselectable,\n    {\n      userSelect: 'none',\n      cursor: 'default',\n    },\n  ];\n\n  const rootCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    border: 0,\n  };\n\n  const cellCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    paddingTop: values.compactRowVerticalPadding,\n    paddingBottom: values.compactRowVerticalPadding,\n    paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n  };\n\n  const defaultCellStyles: IStyle = [\n    getFocusStyle(theme, { inset: -1 }),\n    classNames.cell,\n    {\n      display: 'inline-block',\n      position: 'relative',\n      boxSizing: 'border-box',\n      minHeight: values.rowHeight,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      paddingTop: values.rowVerticalPadding,\n      paddingBottom: values.rowVerticalPadding,\n      paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n      selectors: {\n        '& > button': {\n          maxWidth: '100%',\n        },\n\n        [IsFocusableSelector]: getFocusStyle(theme, { inset: -1, borderColor: neutralSecondary, outlineColor: white }),\n      },\n    },\n\n    isSelected && {\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n          selectors: {\n            a: {\n              color: 'HighlightText',\n            },\n          },\n        },\n      },\n    },\n\n    compact && cellCompactStyles,\n    disabled && { opacity: 0.5 },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      AnimationClassNames.fadeIn400,\n      droppingClassName,\n      theme.fonts.small,\n      isCheckVisible && classNames.isCheckVisible,\n      getFocusStyle(theme, { borderColor: focusBorder, outlineColor: white }),\n      {\n        borderBottom: `1px solid ${neutralLighter}`,\n        background: colors.defaultBackground,\n        color: colors.defaultMetaText,\n        // This ensures that the row always tries to consume is minimum width and does not compress.\n        display: 'inline-flex',\n        minWidth: '100%',\n        minHeight: values.rowHeight,\n        whiteSpace: 'nowrap',\n        padding: 0,\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        textAlign: 'left',\n        selectors: {\n          [`.${classNames.listCellFirstChild} &:before`]: {\n            display: 'none',\n          },\n\n          '&:hover': {\n            background: colors.defaultHoverBackground,\n            color: colors.defaultHoverMetaText,\n            selectors: {\n              [`.${classNames.isRowHeader}`]: {\n                color: colors.defaultHoverHeaderText,\n              },\n\n              [`.${classNames.cell} > .${LinkGlobalClassNames.root}`]: {\n                color: focusedLinkColor,\n              },\n            },\n          },\n\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n\n          '.ms-GroupSpacer': {\n            flexShrink: 0,\n            flexGrow: 0,\n          },\n        },\n      },\n      isSelected && selectedStyles,\n      !canSelect && cannotSelectStyles,\n      compact && rootCompactStyles,\n      className,\n    ],\n\n    cellUnpadded: {\n      paddingRight: `${cellStyleProps.cellRightPadding}px`,\n    },\n\n    cellPadded: {\n      paddingRight: `${cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding}px`,\n      selectors: {\n        [`&.${classNames.cellCheck}`]: {\n          paddingRight: 0,\n        },\n      },\n    },\n\n    cell: defaultCellStyles,\n    cellAnimation: enableUpdateAnimations && AnimationStyles.slideLeftIn40,\n    cellMeasurer: [\n      classNames.cellMeasurer,\n      {\n        overflow: 'visible',\n        whiteSpace: 'nowrap',\n      },\n    ],\n    checkCell: [\n      defaultCellStyles,\n      classNames.cellCheck,\n      checkboxCellClassName,\n      {\n        padding: 0,\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        flexShrink: 0,\n      },\n    ],\n    checkCover: {\n      position: 'absolute',\n      top: -1,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      display: anySelected ? 'block' : 'none',\n    },\n    fields: [\n      classNames.fields,\n      {\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n    isRowHeader: [\n      classNames.isRowHeader,\n      {\n        color: colors.defaultHeaderText,\n        fontSize: fonts.medium.fontSize,\n      },\n      isSelected && {\n        color: colors.selectedHeaderText,\n        fontWeight: FontWeights.semibold,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'HighlightText',\n          },\n        },\n      },\n    ],\n    isMultiline: [\n      defaultCellStyles,\n      {\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n        textOverflow: 'clip',\n      },\n    ],\n    check: [classNames.check],\n  };\n};\n", "import {\n  getFocusStyle,\n  focusClear,\n  getGlobalClassNames,\n  HighContrastSelector,\n  hiddenContentStyle,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL, IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPANDER_WIDTH } from '../GroupedList/GroupSpacer';\nimport type { IDetailsHeaderStyleProps, IDetailsHeaderStyles } from './DetailsHeader.types';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { ICellStyleProps } from './DetailsRow.types';\n\nconst GlobalClassNames = {\n  tooltipHost: 'ms-TooltipHost',\n  root: 'ms-DetailsHeader',\n  cell: 'ms-DetailsHeader-cell',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintCaretStyle: 'ms-DetailsHeader-dropHintCaretStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVertical: 'ms-DetailsColumn-gripperBarVertical',\n  checkTooltip: 'ms-DetailsHeader-checkTooltip',\n  check: 'ms-DetailsHeader-check',\n};\n\nexport const HEADER_HEIGHT = 42;\n\nexport const getCellStyles = (props: { theme: ITheme; cellStyleProps?: ICellStyleProps }): IStyle => {\n  const { theme, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return [\n    classNames.cell,\n    getFocusStyle(theme),\n    {\n      color: semanticColors.bodyText,\n      position: 'relative',\n      display: 'inline-block',\n      boxSizing: 'border-box',\n      padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n      lineHeight: 'inherit',\n      margin: '0',\n      height: HEADER_HEIGHT,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      textAlign: 'left',\n    },\n  ];\n};\n\nexport const getStyles = (props: IDetailsHeaderStyleProps): IDetailsHeaderStyles => {\n  const {\n    theme,\n    className,\n    isAllSelected,\n    isResizingColumn,\n    isSizing,\n    isAllCollapsed,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const cellSizerFadeInStyles: IStyle = {\n    opacity: 1,\n    transition: 'opacity 0.3s linear',\n  };\n\n  const cellStyles = getCellStyles(props);\n\n  return {\n    root: [\n      classNames.root,\n      fonts.small,\n      {\n        display: 'inline-block',\n        background: colors.headerBackgroundColor,\n        position: 'relative',\n        minWidth: '100%',\n        verticalAlign: 'top',\n        height: HEADER_HEIGHT,\n        lineHeight: HEADER_HEIGHT,\n        whiteSpace: 'nowrap',\n        boxSizing: 'content-box',\n        paddingBottom: '1px',\n        paddingTop: '16px',\n        borderBottom: `1px solid ${semanticColors.bodyDivider}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`& .${classNames.tooltipHost} .${classNames.checkTooltip}`]: {\n            display: 'block',\n          },\n        },\n      },\n      isAllSelected && classNames.isAllSelected,\n      isResizingColumn && classNames.isResizingColumn,\n      className,\n    ],\n\n    check: [\n      classNames.check,\n      {\n        height: HEADER_HEIGHT,\n      },\n      {\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n\n    cellWrapperPadded: {\n      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n    },\n\n    cellIsCheck: [\n      cellStyles,\n      classNames.cellIsCheck,\n      {\n        position: 'relative',\n        padding: 0,\n        margin: 0,\n        display: 'inline-flex',\n        alignItems: 'center',\n        border: 'none',\n      },\n      isAllSelected && {\n        opacity: 1,\n      },\n    ],\n\n    cellIsGroupExpander: [\n      cellStyles,\n      {\n        display: 'inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        padding: 0,\n        border: 'none',\n        width: GROUP_EXPANDER_WIDTH, // align with GroupedList's first expandIcon cell width.\n        color: palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: palette.neutralLighter,\n          },\n          ':active': {\n            backgroundColor: palette.neutralLight,\n          },\n        },\n      },\n    ],\n\n    cellIsActionable: {\n      selectors: {\n        ':hover': {\n          color: semanticColors.bodyText,\n          background: semanticColors.listHeaderBackgroundHovered,\n        },\n        ':active': {\n          background: semanticColors.listHeaderBackgroundPressed,\n        },\n      },\n    },\n    cellIsEmpty: {\n      textOverflow: 'clip',\n    },\n\n    cellSizer: [\n      classNames.cellSizer,\n      focusClear(),\n      {\n        display: 'inline-block',\n        position: 'relative',\n        cursor: 'ew-resize',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 'inherit',\n        background: 'transparent',\n        zIndex: 1,\n        width: 16,\n        selectors: {\n          ':after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            width: 1,\n            background: colors.resizerColor,\n            opacity: 0,\n            left: '50%',\n          },\n          ':focus:after': cellSizerFadeInStyles,\n          ':hover:after': cellSizerFadeInStyles,\n          [`&.${classNames.isResizing}:after`]: [\n            cellSizerFadeInStyles,\n            {\n              boxShadow: '0 0 5px 0 rgba(0, 0, 0, 0.4)',\n            },\n          ],\n        },\n      },\n    ],\n\n    cellIsResizing: classNames.isResizing,\n\n    cellSizerStart: {\n      margin: '0 -8px',\n    },\n\n    cellSizerEnd: {\n      margin: 0,\n      marginLeft: -16,\n    },\n\n    collapseButton: [\n      classNames.collapseButton,\n      {\n        transformOrigin: '50% 50%',\n        transition: 'transform .1s linear',\n      },\n      isAllCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n            },\n          ]\n        : {\n            transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n          },\n    ],\n\n    checkTooltip: classNames.checkTooltip,\n\n    sizingOverlay: isSizing && {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      cursor: 'ew-resize',\n      background: 'rgba(255, 255, 255, 0)',\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'transparent',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    dropHintCircleStyle: [\n      classNames.dropHintCircleStyle,\n      {\n        display: 'inline-block',\n        visibility: 'hidden',\n        position: 'absolute',\n        bottom: 0,\n        height: 9,\n        width: 9,\n        borderRadius: '50%',\n        marginLeft: -5,\n        top: 34,\n        overflow: 'visible',\n        zIndex: 10,\n        border: `1px solid ${palette.themePrimary}`,\n        background: palette.white,\n      },\n    ],\n\n    dropHintCaretStyle: [\n      classNames.dropHintCaretStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        top: -28,\n        left: -6.5,\n        fontSize: fonts.medium.fontSize,\n        color: palette.themePrimary,\n        overflow: 'visible',\n        zIndex: 10,\n      },\n    ],\n\n    dropHintLineStyle: [\n      classNames.dropHintLineStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 42,\n        width: 1,\n        background: palette.themePrimary,\n        zIndex: 10,\n      },\n    ],\n\n    dropHintStyle: {\n      display: 'inline-block',\n      position: 'absolute',\n    },\n  };\n};\n", "import { getGlobalClassNames, getFocusStyle } from '../../Styling';\nimport { DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\nimport { HEADER_HEIGHT } from './DetailsHeader.styles';\nimport { CheckGlobalClassNames } from '../../components/Check/Check.styles';\nimport type { IDetailsRowCheckStyleProps, IDetailsRowCheckStyles } from './DetailsRowCheck.types';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsRow-check',\n  isDisabled: 'ms-DetailsRow-check--isDisabled',\n  isHeader: 'ms-DetailsRow-check--isHeader',\n};\n\nexport const CHECK_CELL_WIDTH = 48;\n\nexport const getStyles = (props: IDetailsRowCheckStyleProps): IDetailsRowCheckStyles => {\n  const { theme, className, isHeader, selected, anySelected, canSelect, compact, isVisible } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n  const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\n\n  const height = isHeader ? HEADER_HEIGHT : compact ? compactRowHeight : rowHeight;\n\n  const isCheckVisible = isVisible || selected || anySelected;\n\n  return {\n    root: [classNames.root, className],\n\n    check: [\n      !canSelect && classNames.isDisabled,\n      isHeader && classNames.isHeader,\n      getFocusStyle(theme),\n      theme.fonts.small,\n      CheckGlobalClassNames.checkHost,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: 'default',\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        opacity: isCheckVisible ? 1 : 0,\n        height: height,\n        width: CHECK_CELL_WIDTH,\n        padding: 0,\n        margin: 0,\n      },\n    ],\n\n    isDisabled: [],\n  };\n};\n", "import { getGlobalClassNames, getFocusStyle, AnimationVariables, FontWeights, IconFontSizes } from '../../Styling';\nimport { getRTL, IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from '../DetailsList/DetailsRow.styles';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as EXPAND_BUTTON_WIDTH } from './GroupSpacer';\nimport type { IGroupHeaderStyleProps, IGroupHeaderStyles } from './GroupHeader.types';\nimport type { IStyle } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupHeader',\n  compact: 'ms-GroupHeader--compact',\n  check: 'ms-GroupHeader-check',\n  dropIcon: 'ms-GroupHeader-dropIcon',\n  expand: 'ms-GroupHeader-expand',\n  isCollapsed: 'is-collapsed',\n  title: 'ms-GroupHeader-title',\n  isSelected: 'is-selected',\n  iconTag: 'ms-Icon--Tag',\n  group: 'ms-GroupedList-group',\n  isDropping: 'is-dropping',\n};\n\nconst beziers = {\n  easeOutCirc: 'cubic-bezier(0.075, 0.820, 0.165, 1.000)',\n  easeOutSine: 'cubic-bezier(0.390, 0.575, 0.565, 1.000)',\n  easeInBack: 'cubic-bezier(0.600, -0.280, 0.735, 0.045)',\n};\n\nconst DEFAULT_GROUP_HEADER_HEIGHT = 48;\nconst COMPACT_GROUP_HEADER_HEIGHT = 40;\n\nexport const getStyles = (props: IGroupHeaderStyleProps): IGroupHeaderStyles => {\n  const { theme, className, selected, isCollapsed, compact } = props;\n  // padding from the source to align GroupHeader title with DetailsRow's first cell.\n  const { cellLeftPadding } = DEFAULT_CELL_STYLE_PROPS;\n  const finalRowHeight = compact ? COMPACT_GROUP_HEADER_HEIGHT : DEFAULT_GROUP_HEADER_HEIGHT;\n\n  const { semanticColors, palette, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  const checkExpandResetStyles: IStyle = [\n    getFocusStyle(theme),\n    {\n      cursor: 'default',\n      background: 'none',\n      backgroundColor: 'transparent',\n      border: 'none',\n      padding: 0, // cancel default <button> padding\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      getFocusStyle(theme),\n      theme.fonts.medium,\n      {\n        // keep the border for height but color it so it's invisible.\n        borderBottom: `1px solid ${semanticColors.listBackground}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          ':hover': {\n            background: semanticColors.listItemBackgroundHovered,\n            color: semanticColors.actionLinkHovered,\n          },\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`:global(.${classNames.group}.${classNames.isDropping})`]: {\n            selectors: {\n              [`& > .${classNames.root} .${classNames.dropIcon}`]: {\n                transition:\n                  `transform ${AnimationVariables.durationValue4} ${beziers.easeOutCirc} ` +\n                  `opacity ${AnimationVariables.durationValue1} ${beziers.easeOutSine}`,\n                transitionDelay: AnimationVariables.durationValue3,\n                opacity: 1,\n                transform: `rotate(0.2deg) scale(1);`, // rotation prevents jittery motion in IE\n              },\n\n              [`.${classNames.check}`]: {\n                opacity: 0,\n              },\n            },\n          },\n        },\n      },\n      selected && [\n        classNames.isSelected,\n        {\n          background: semanticColors.listItemBackgroundChecked,\n          selectors: {\n            ':hover': {\n              background: semanticColors.listItemBackgroundCheckedHovered,\n            },\n            [`${classNames.check}`]: {\n              opacity: 1,\n            },\n          },\n        },\n      ],\n      compact && [classNames.compact, { border: 'none' }],\n      className,\n    ],\n    groupHeaderContainer: [\n      {\n        display: 'flex',\n        alignItems: 'center',\n        height: finalRowHeight,\n      },\n    ],\n    headerCount: [\n      {\n        padding: '0px 4px',\n      },\n    ],\n    check: [\n      classNames.check,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        // paddingTop and marginTop brought from the DetailsRow.styles.ts with explanation below.\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        opacity: 0,\n        width: CHECK_CELL_WIDTH,\n        height: finalRowHeight,\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n    expand: [\n      classNames.expand,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        width: EXPAND_BUTTON_WIDTH,\n        height: finalRowHeight,\n        color: selected ? palette.neutralPrimary : palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: selected ? palette.neutralQuaternary : palette.neutralLight,\n          },\n          ':active': {\n            backgroundColor: selected ? palette.neutralTertiaryAlt : palette.neutralQuaternaryAlt,\n          },\n        },\n      },\n    ],\n    expandIsCollapsed: [\n      isCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n              transformOrigin: '50% 50%',\n              transition: 'transform .1s linear',\n            },\n          ]\n        : {\n            transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n            transition: 'transform .1s linear',\n          },\n    ],\n    title: [\n      classNames.title,\n      {\n        paddingLeft: cellLeftPadding,\n        fontSize: compact ? fonts.medium.fontSize : fonts.mediumPlus.fontSize,\n        fontWeight: isCollapsed ? FontWeights.regular : FontWeights.semibold,\n        cursor: 'pointer',\n        outline: 0,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n      },\n    ],\n    dropIcon: [\n      classNames.dropIcon,\n      {\n        position: 'absolute',\n        left: -26,\n        fontSize: IconFontSizes.large,\n        color: palette.neutralSecondary,\n        transition:\n          `transform ${AnimationVariables.durationValue2} ${beziers.easeInBack}, ` +\n          `opacity ${AnimationVariables.durationValue4} ${beziers.easeOutSine}`,\n        opacity: 0,\n        transform: 'rotate(0.2deg) scale(0.65)', // rotation prevents jittery motion in IE\n        transformOrigin: '10px 10px',\n        selectors: {\n          [`:global(.${classNames.iconTag})`]: {\n            position: 'absolute',\n          },\n        },\n      },\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\nimport type { IProcessedStyleSet, ITheme } from '../../Styling';\nimport type {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n  private _id: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupHeaderProps,\n    previousState: IGroupHeaderState,\n  ): IGroupHeaderState {\n    if (nextProps.group) {\n      const newCollapsed = nextProps.group.isCollapsed;\n      const isGroupLoading = nextProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n\n      return {\n        ...previousState,\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      };\n    }\n\n    return previousState;\n  }\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this._id = getId('GroupHeader');\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel = 0,\n      viewport,\n      selectionMode,\n      loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderTitle = this._onRenderTitle,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      compact,\n      ariaPosInSet,\n      ariaSetSize,\n      ariaRowIndex,\n      useFastIcons,\n    } = this.props;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        onClick={this._onHeaderClick}\n        role=\"row\"\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        aria-rowindex={ariaRowIndex}\n        data-is-focusable={true}\n        onKeyUp={this._onKeyUp}\n        aria-label={group.ariaLabel}\n        aria-labelledby={group.ariaLabel ? undefined : this._id}\n        aria-expanded={!this.state.isCollapsed}\n        aria-selected={canSelectGroup ? currentlySelected : undefined}\n        aria-level={groupLevel + 1}\n      >\n        <div className={this._classNames.groupHeaderContainer} role=\"presentation\">\n          {isSelectionCheckVisible ? (\n            <div role=\"gridcell\">\n              <button\n                data-is-focusable={false}\n                type=\"button\"\n                className={this._classNames.check}\n                role=\"checkbox\"\n                id={`${this._id}-check`}\n                aria-checked={currentlySelected}\n                aria-labelledby={`${this._id}-check ${this._id}`}\n                data-selection-toggle={true}\n                onClick={this._onToggleSelectGroupClick}\n                {...selectAllButtonProps}\n              >\n                {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n              </button>\n            </div>\n          ) : (\n            // To make the group header align properly with the column headers, this spacer\n            // needs to be the same width as the check cell in the column header.\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={CHECK_CELL_WIDTH} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon} role=\"presentation\">\n            <Icon iconName=\"Tag\" />\n          </div>\n          <div role=\"gridcell\">\n            <button\n              data-is-focusable={false}\n              type=\"button\"\n              className={this._classNames.expand}\n              onClick={this._onToggleClick}\n              aria-expanded={!this.state.isCollapsed}\n              {...expandButtonProps}\n            >\n              <Icon\n                className={this._classNames.expandIsCollapsed}\n                iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n              />\n            </button>\n          </div>\n\n          {onRenderTitle(this.props, this._onRenderTitle)}\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </div>\n      </div>\n    );\n  }\n\n  private _toggleCollapse = () => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n  };\n\n  private _onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { group, onGroupHeaderKeyUp } = this.props;\n\n    if (onGroupHeaderKeyUp) {\n      onGroupHeaderKeyUp(ev, group);\n    }\n\n    if (!ev.defaultPrevented) {\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldOpen = this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldClose = !this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, this.props.theme);\n      if (shouldClose || shouldOpen) {\n        this._toggleCollapse();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n\n  private _onToggleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._toggleCollapse();\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group, ariaColSpan } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.title} id={this._id} role=\"gridcell\" aria-colspan={ariaColSpan}>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </div>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupHeader.styles';\nimport { GroupHeaderBase } from './GroupHeader.base';\nimport type { IGroupHeaderProps, IGroupHeaderStyles, IGroupHeaderStyleProps } from './GroupHeader.types';\n\nexport const GroupHeader: React.FunctionComponent<IGroupHeaderProps> = styled<\n  IGroupHeaderProps,\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles\n>(GroupHeaderBase, getStyles, undefined, {\n  scope: 'GroupHeader',\n});\n\nexport type { IGroupHeaderProps };\n", "import { getGlobalClassNames } from '../../Styling';\nimport type { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupShowAll',\n  link: 'ms-Link',\n};\n\nexport const getStyles = (props: IGroupShowAllStyleProps): IGroupShowAllStyles => {\n  const { theme } = props;\n  const { fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '10px 84px',\n        cursor: 'pointer',\n        selectors: {\n          [`.${classNames.link}`]: {\n            fontSize: fonts.small.fontSize,\n          },\n        },\n      },\n    ],\n  };\n};\n\nexport type { IGroupShowAllProps };\n", "import * as React from 'react';\nimport { useCallback } from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { Link } from '../../Link';\nimport { GroupSpacer } from './GroupSpacer';\nimport type { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\n\nconst getClassNames = classNamesFunction<IGroupShowAllStyleProps, IGroupShowAllStyles>();\n\nexport const GroupShowAllBase: React.FunctionComponent<IGroupShowAllProps> = props => {\n  const { group, groupLevel, showAllLinkText = 'Show All', styles, theme, onToggleSummarize } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  const memoizedOnClick = useCallback(\n    (ev: React.MouseEvent<HTMLElement>) => {\n      onToggleSummarize!(group!);\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    },\n    [onToggleSummarize, group],\n  );\n\n  if (group) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer count={groupLevel!} />\n        <Link onClick={memoizedOnClick}>{showAllLinkText}</Link>\n      </div>\n    );\n  }\n\n  return null;\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupShowAll.styles';\nimport { GroupShowAllBase } from './GroupShowAll.base';\nimport type { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\n\nexport const GroupShowAll: React.FunctionComponent<IGroupShowAllProps> = styled<\n  IGroupShowAllProps,\n  IGroupShowAllStyleProps,\n  IGroupShowAllStyles\n>(GroupShowAllBase, getStyles, undefined, { scope: 'GroupShowAll' });\n\nexport type { IGroupShowAllProps };\n", "import { getGlobalClassNames } from '../../Styling';\nimport type { IGroupFooterStyleProps, IGroupFooterStyles } from './GroupFooter.types';\n\nconst GlobalClassNames = {\n  root: 'ms-groupFooter',\n};\n\nexport const getStyles = (props: IGroupFooterStyleProps): IGroupFooterStyles => {\n  const { theme, className } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      theme.fonts.medium,\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '5px 38px',\n      },\n      className,\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { GroupSpacer } from './GroupSpacer';\nimport type { IGroupFooterStyleProps, IGroupFooterStyles, IGroupFooterProps } from './GroupFooter.types';\n\nconst getClassNames = classNamesFunction<IGroupFooterStyleProps, IGroupFooterStyles>();\n\nexport const GroupFooterBase: React.FunctionComponent<IGroupFooterProps> = props => {\n  const { group, groupLevel, footerText, indentWidth, styles, theme } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  if (group && footerText) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n        {footerText}\n      </div>\n    );\n  }\n\n  return null;\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupFooter.styles';\nimport { GroupFooterBase } from './GroupFooter.base';\nimport type { IGroupFooterProps, IGroupFooterStyles, IGroupFooterStyleProps } from './GroupFooter.types';\n\nexport const GroupFooter: React.FunctionComponent<IGroupFooterProps> = styled<\n  IGroupFooterProps,\n  IGroupFooterStyleProps,\n  IGroupFooterStyles\n>(GroupFooterBase, getStyles, undefined, {\n  scope: 'GroupFooter',\n});\n\nexport type { IGroupFooterProps };\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupedList.styles';\nimport { GroupedListBase } from './GroupedList.base';\nimport type { IGroupedListProps, IGroupedListStyles, IGroupedListStyleProps } from './GroupedList.types';\n\nexport const GroupedList: React.FunctionComponent<IGroupedListProps> = styled<\n  IGroupedListProps,\n  IGroupedListStyleProps,\n  IGroupedListStyles\n>(GroupedListBase, getStyles, undefined, {\n  scope: 'GroupedList',\n});\n\nexport type { IGroupedListProps };\n", "import * as React from 'react';\nimport { css, styled, classNamesFunction, composeRenderFunction, getNativeElementProps } from '../../Utilities';\nimport { Check } from '../../Check';\nimport { getStyles } from './DetailsRowCheck.styles';\nimport { SelectionMode } from '../../Selection';\nimport type {\n  IDetailsRowCheckProps,\n  IDetailsCheckboxProps,\n  IDetailsRowCheckStyleProps,\n  IDetailsRowCheckStyles,\n} from './DetailsRowCheck.types';\nimport type { ITheme } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>();\n\nconst DetailsRowCheckBase: React.FunctionComponent<IDetailsRowCheckProps> = props => {\n  const {\n    isVisible = false,\n    canSelect = false,\n    anySelected = false,\n    selected = false,\n    selectionMode,\n    isHeader = false,\n    className,\n    checkClassName,\n    styles,\n    theme,\n    compact,\n    onRenderDetailsCheckbox,\n    useFastIcons = true, // must be removed from buttonProps\n    ...buttonProps\n  } = props;\n  const defaultCheckboxRender = useFastIcons ? _fastDefaultCheckboxRender : _defaultCheckboxRender;\n\n  const onRenderCheckbox = onRenderDetailsCheckbox\n    ? composeRenderFunction(onRenderDetailsCheckbox, defaultCheckboxRender)\n    : defaultCheckboxRender;\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    canSelect,\n    selected,\n    anySelected,\n    className,\n    isHeader,\n    isVisible,\n    compact,\n  });\n\n  const detailsCheckboxProps: IDetailsCheckboxProps = {\n    checked: selected,\n    theme,\n  };\n\n  const divProps = getNativeElementProps('div', buttonProps, ['aria-label', 'aria-labelledby', 'aria-describedby']);\n\n  const checkRole = selectionMode === SelectionMode.single ? 'radio' : 'checkbox';\n\n  return canSelect ? (\n    <div\n      {...buttonProps}\n      role={checkRole}\n      // eslint-disable-next-line deprecation/deprecation\n      className={css(classNames.root, classNames.check)}\n      aria-checked={selected}\n      data-selection-toggle={true}\n      data-automationid=\"DetailsRowCheck\"\n      tabIndex={-1}\n    >\n      {onRenderCheckbox(detailsCheckboxProps)}\n    </div>\n  ) : (\n    // eslint-disable-next-line deprecation/deprecation\n    <div {...divProps} className={css(classNames.root, classNames.check)} />\n  );\n};\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n\nfunction _defaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <Check checked={checkboxProps.checked} />;\n}\n\nfunction _fastDefaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n}\n\nexport const DetailsRowCheck = styled<IDetailsRowCheckProps, IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>(\n  DetailsRowCheckBase,\n  getStyles,\n  undefined,\n  { scope: 'DetailsRowCheck' },\n  true,\n);\n", "import { EventGroup, getDocument } from '../../Utilities';\nimport type {\n  IDragDropHelper,\n  IDragDropTarget,\n  IDragDropOptions,\n  IDragDropEvent,\n  IDragDropContext,\n} from './interfaces';\nimport type { ISelection } from '../../utilities/selection/interfaces';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nexport interface IDragDropHelperParams {\n  selection: ISelection;\n  minimumPixelsForDrag?: number;\n}\n\nexport class DragDropHelper implements IDragDropHelper {\n  private _dragEnterCounts: { [key: string]: number };\n  private _isDragging: boolean;\n  private _dragData: {\n    eventTarget: EventTarget | null;\n    clientX: number;\n    clientY: number;\n    dataTransfer?: DataTransfer;\n    dropTarget?: IDragDropTarget;\n    dragTarget?: IDragDropTarget;\n  } | null;\n  private _selection: ISelection;\n  private _activeTargets: {\n    [key: string]: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n  };\n  private _events: EventGroup;\n  private _lastId: number;\n  private _initialized: boolean;\n\n  constructor(params: IDragDropHelperParams) {\n    this._selection = params.selection;\n    this._dragEnterCounts = {};\n    this._activeTargets = {};\n    this._lastId = 0;\n    // To make this class cheap to create, which allows simplifying some logic elsewhere,\n    // only initialize the event group and global event handlers as needed.\n    this._initialized = false;\n  }\n\n  public dispose(): void {\n    if (this._events) {\n      this._events.dispose();\n    }\n  }\n\n  public subscribe(\n    root: HTMLElement,\n    events: EventGroup,\n    dragDropOptions: IDragDropOptions,\n  ): {\n    key: string;\n    dispose(): void;\n  } {\n    if (!this._initialized) {\n      this._events = new EventGroup(this);\n\n      const doc = getDocument();\n\n      // clear drag data when mouse up, use capture event to ensure it will be run\n      if (doc) {\n        this._events.on(doc.body, 'mouseup', this._onMouseUp.bind(this), true);\n        this._events.on(doc, 'mouseup', this._onDocumentMouseUp.bind(this), true);\n      }\n\n      this._initialized = true;\n    }\n\n    const { key = `${++this._lastId}` } = dragDropOptions;\n\n    const handlers: {\n      callback: (context: IDragDropContext, event?: any) => void;\n      eventName: string;\n    }[] = [];\n\n    let onDragStart: (event: DragEvent) => void;\n    let onDragLeave: (event: DragEvent) => void;\n    let onDragEnter: (event: DragEvent) => void;\n    let onDragEnd: (event: DragEvent) => void;\n    let onDrop: (event: DragEvent) => void;\n    let onDragOver: (event: DragEvent) => void;\n    let onMouseDown: (event: MouseEvent) => void;\n\n    let isDraggable: boolean;\n    let isDroppable: boolean;\n\n    let activeTarget: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n\n    if (dragDropOptions && root) {\n      const { eventMap, context, updateDropState } = dragDropOptions;\n\n      const dragDropTarget: IDragDropTarget = {\n        root: root,\n        options: dragDropOptions,\n        key: key,\n      };\n\n      isDraggable = this._isDraggable(dragDropTarget);\n      isDroppable = this._isDroppable(dragDropTarget);\n\n      if (isDraggable || isDroppable) {\n        if (eventMap) {\n          for (const event of eventMap) {\n            const handler = {\n              callback: event.callback.bind(null, context),\n              eventName: event.eventName,\n            };\n\n            handlers.push(handler);\n\n            this._events.on(root, handler.eventName, handler.callback);\n          }\n        }\n      }\n\n      if (isDroppable) {\n        // If the target is droppable, wire up global event listeners to track drop-related events.\n        onDragLeave = (event: DragEvent) => {\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]--;\n            if (this._dragEnterCounts[key] === 0) {\n              updateDropState(false /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnter = (event: DragEvent) => {\n          event.preventDefault(); // needed for IE\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]++;\n            if (this._dragEnterCounts[key] === 1) {\n              updateDropState(true /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnd = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n        };\n\n        onDrop = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n\n          if (dragDropOptions.onDrop) {\n            dragDropOptions.onDrop(dragDropOptions.context.data, event);\n          }\n        };\n\n        onDragOver = (event: DragEvent) => {\n          event.preventDefault();\n          if (dragDropOptions.onDragOver) {\n            dragDropOptions.onDragOver(dragDropOptions.context.data, event);\n          }\n        };\n\n        this._dragEnterCounts[key] = 0;\n\n        // dragenter and dragleave will be fired when hover to the child element\n        // but we only want to change state when enter or leave the current element\n        // use the count to ensure it.\n        events.on(root, 'dragenter', onDragEnter);\n        events.on(root, 'dragleave', onDragLeave);\n        events.on(root, 'dragend', onDragEnd);\n        events.on(root, 'drop', onDrop);\n        events.on(root, 'dragover', onDragOver);\n      }\n\n      if (isDraggable) {\n        // If the target is draggable, wire up local event listeners for mouse events.\n        onMouseDown = this._onMouseDown.bind(this, dragDropTarget);\n        onDragEnd = this._onDragEnd.bind(this, dragDropTarget);\n\n        // We need to add in data so that on Firefox we show the ghost element when dragging\n        onDragStart = (event: DragEvent) => {\n          const options = dragDropOptions;\n          if (options && options.onDragStart) {\n            options.onDragStart(options.context.data, options.context.index, this._selection.getSelection(), event);\n          }\n          this._isDragging = true;\n          if (event.dataTransfer) {\n            event.dataTransfer.setData('id', root.id);\n          }\n        };\n\n        events.on(root, 'dragstart', onDragStart);\n        events.on(root, 'mousedown', onMouseDown);\n        events.on(root, 'dragend', onDragEnd);\n      }\n\n      activeTarget = {\n        target: dragDropTarget,\n        dispose: () => {\n          if (this._activeTargets[key] === activeTarget) {\n            delete this._activeTargets[key];\n          }\n\n          if (root) {\n            for (const handler of handlers) {\n              this._events.off(root, handler.eventName, handler.callback);\n            }\n\n            if (isDroppable) {\n              events.off(root, 'dragenter', onDragEnter);\n              events.off(root, 'dragleave', onDragLeave);\n              events.off(root, 'dragend', onDragEnd);\n              events.off(root, 'dragover', onDragOver);\n              events.off(root, 'drop', onDrop);\n            }\n\n            if (isDraggable) {\n              events.off(root, 'dragstart', onDragStart);\n              events.off(root, 'mousedown', onMouseDown);\n              events.off(root, 'dragend', onDragEnd);\n            }\n          }\n        },\n      };\n\n      this._activeTargets[key] = activeTarget;\n    }\n\n    return {\n      key: key,\n      dispose: () => {\n        if (activeTarget) {\n          activeTarget.dispose();\n        }\n      },\n    };\n  }\n\n  public unsubscribe(root: HTMLElement, key: string): void {\n    const activeTarget = this._activeTargets[key];\n\n    if (activeTarget) {\n      activeTarget.dispose();\n    }\n  }\n\n  private _onDragEnd(target: IDragDropTarget, event: DragEvent): void {\n    const { options } = target;\n    if (options.onDragEnd) {\n      options.onDragEnd(options.context.data, event);\n    }\n  }\n\n  /**\n   * clear drag data when mouse up on body\n   */\n  private _onMouseUp(event: MouseEvent): void {\n    this._isDragging = false;\n    if (this._dragData) {\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n\n        if (activeTarget.target.root) {\n          this._events.off(activeTarget.target.root, 'mousemove');\n          this._events.off(activeTarget.target.root, 'mouseleave');\n        }\n      }\n\n      if (this._dragData.dropTarget) {\n        // raise dragleave event to let dropTarget know it need to remove dropping style\n        EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n        EventGroup.raise(this._dragData.dropTarget.root, 'drop');\n      }\n    }\n    this._dragData = null;\n  }\n\n  /**\n   * clear drag data when mouse up outside of the document\n   */\n  private _onDocumentMouseUp(event: MouseEvent): void {\n    const doc = getDocument();\n\n    if (doc && event.target === doc.documentElement) {\n      this._onMouseUp(event);\n    }\n  }\n\n  /**\n   * when mouse move over a new drop target while dragging some items,\n   * fire dragleave on the old target and fire dragenter to the new target\n   * The target will handle style change on dragenter and dragleave events.\n   */\n  private _onMouseMove(target: IDragDropTarget, event: MouseEvent): void {\n    const {\n      // use buttons property here since ev.button in some edge case is not updating well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = MOUSEMOVE_PRIMARY_BUTTON,\n    } = event;\n\n    if (this._dragData && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onMouseUp(event);\n      return;\n    }\n\n    const { root, key } = target;\n    if (this._isDragging) {\n      if (this._isDroppable(target)) {\n        // we can have nested drop targets in the DOM, like a folder inside a group. In that case, when we drag into\n        // the inner target (folder), we first set dropTarget to the inner element. But the same event is bubbled to the\n        // outer target too, and we need to prevent the outer one from taking over.\n        // So, check if the last dropTarget is not a child of the current.\n\n        if (this._dragData) {\n          if (\n            this._dragData.dropTarget &&\n            this._dragData.dropTarget.key !== key &&\n            !this._isChild(root, this._dragData.dropTarget.root)\n          ) {\n            if (this._dragEnterCounts[this._dragData.dropTarget.key] > 0) {\n              EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n              EventGroup.raise(root, 'dragenter');\n              this._dragData.dropTarget = target;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * when mouse leave a target while dragging some items, fire dragleave to the target\n   */\n  private _onMouseLeave(target: IDragDropTarget, event: MouseEvent): void {\n    if (this._isDragging) {\n      if (this._dragData && this._dragData.dropTarget && this._dragData.dropTarget.key === target.key) {\n        EventGroup.raise(target.root, 'dragleave');\n        this._dragData.dropTarget = undefined;\n      }\n    }\n  }\n\n  /**\n   * when mouse down on a draggable item, we start to track dragdata.\n   */\n  private _onMouseDown(target: IDragDropTarget, event: MouseEvent): void {\n    if (event.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    if (this._isDraggable(target)) {\n      this._dragData = {\n        clientX: event.clientX,\n        clientY: event.clientY,\n        eventTarget: event.target,\n        dragTarget: target,\n      };\n\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n        if (activeTarget.target.root) {\n          this._events.on(activeTarget.target.root, 'mousemove', this._onMouseMove.bind(this, activeTarget.target));\n          this._events.on(activeTarget.target.root, 'mouseleave', this._onMouseLeave.bind(this, activeTarget.target));\n        }\n      }\n    } else {\n      this._dragData = null;\n    }\n  }\n\n  /**\n   * determine whether the child target is a descendant of the parent\n   */\n  private _isChild(parentElement: HTMLElement, childElement: HTMLElement): boolean {\n    while (childElement && childElement.parentElement) {\n      if (childElement.parentElement === parentElement) {\n        return true;\n      }\n      childElement = childElement.parentElement;\n    }\n    return false;\n  }\n\n  private _isDraggable(target: IDragDropTarget): boolean {\n    const { options } = target;\n    return !!(options.canDrag && options.canDrag(options.context.data));\n  }\n\n  private _isDroppable(target: IDragDropTarget): boolean {\n    // TODO: take the drag item into consideration to prevent dragging an item into the same group\n    const { options } = target;\n    const dragContext =\n      this._dragData && this._dragData.dragTarget ? this._dragData.dragTarget.options.context : undefined;\n    return !!(options.canDrop && options.canDrop(options.context, dragContext));\n  }\n}\n", "import * as React from 'react';\nimport { Icon, FontIcon } from '../../Icon';\nimport { initializeComponentRef, EventGroup, Async, classNamesFunction, composeRenderFunction } from '../../Utilities';\nimport { ColumnActionsMode } from './DetailsList.types';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IDisposable } from '../../Utilities';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnRenderTooltipProps,\n  IDetailsColumnFilterIconProps,\n} from './DetailsColumn.types';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nconst getClassNames = classNamesFunction<IDetailsColumnStyleProps, IDetailsColumnStyles>();\nconst TRANSITION_DURATION_DRAG = 200; // ms\nconst TRANSITION_DURATION_DROP = 1500; // ms\nconst CLASSNAME_ADD_INTERVAL = 20; // ms\n\nconst defaultOnRenderHeader = (classNames: IProcessedStyleSet<IDetailsColumnStyles>) => (\n  props?: IDetailsColumnProps,\n): JSX.Element | null => {\n  if (!props) {\n    return null;\n  }\n\n  if (props.column.isIconOnly) {\n    return <span className={classNames.accessibleLabel}>{props.column.name}</span>;\n  }\n\n  return <>{props.column.name}</>;\n};\n\n/**\n * Component for rendering columns in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport class DetailsColumnBase extends React.Component<IDetailsColumnProps> {\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _dragDropSubscription?: IDisposable;\n  private _classNames: IProcessedStyleSet<IDetailsColumnStyles>;\n\n  constructor(props: IDetailsColumnProps) {\n    super(props);\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      column,\n      columnIndex,\n      parentId,\n      isDraggable,\n      styles,\n      theme,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      useFastIcons = true,\n    } = this.props;\n    const { onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip } = this.props;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      headerClassName: column.headerClassName,\n      iconClassName: column.iconClassName,\n      isActionable: column.columnActionsMode !== ColumnActionsMode.disabled,\n      isEmpty: !column.name,\n      isIconVisible: column.isSorted || column.isGrouped || column.isFiltered,\n      isPadded: column.isPadded,\n      isIconOnly: column.isIconOnly,\n      cellStyleProps,\n      transitionDurationDrag: TRANSITION_DURATION_DRAG,\n      transitionDurationDrop: TRANSITION_DURATION_DROP,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    const onRenderFilterIcon = column.onRenderFilterIcon\n      ? composeRenderFunction(column.onRenderFilterIcon, this._onRenderFilterIcon(this._classNames))\n      : this._onRenderFilterIcon(this._classNames);\n\n    const onRenderHeader = column.onRenderHeader\n      ? composeRenderFunction(column.onRenderHeader, defaultOnRenderHeader(this._classNames))\n      : defaultOnRenderHeader(this._classNames);\n\n    const hasInnerButton =\n      column.columnActionsMode !== ColumnActionsMode.disabled &&\n      (column.onColumnClick !== undefined || this.props.onColumnClick !== undefined);\n    const accNameDescription = {\n      'aria-label': column.isIconOnly ? column.name : undefined,\n      'aria-labelledby': column.isIconOnly ? undefined : `${parentId}-${column.key}-name`,\n      'aria-describedby':\n        !this.props.onRenderColumnHeaderTooltip && this._hasAccessibleLabel()\n          ? `${parentId}-${column.key}-tooltip`\n          : undefined,\n    };\n\n    return (\n      <>\n        <div\n          key={column.key}\n          ref={this._root}\n          role={'columnheader'}\n          {...(!hasInnerButton && accNameDescription)}\n          aria-sort={column.isSorted ? (column.isSortedDescending ? 'descending' : 'ascending') : 'none'}\n          aria-colindex={columnIndex}\n          // when the column is not disabled and has no inner button, this node should be in the focus order\n          data-is-focusable={\n            !hasInnerButton && column.columnActionsMode !== ColumnActionsMode.disabled ? 'true' : undefined\n          }\n          className={classNames.root}\n          data-is-draggable={isDraggable}\n          draggable={isDraggable}\n          style={{\n            width:\n              column.calculatedWidth! +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          }}\n          data-automationid={'ColumnsHeaderColumn'}\n          data-item-key={column.key}\n        >\n          {isDraggable && (\n            <IconComponent iconName=\"GripperBarVertical\" className={classNames.gripperBarVerticalStyle} />\n          )}\n          {onRenderColumnHeaderTooltip(\n            {\n              hostClassName: classNames.cellTooltip,\n              id: `${parentId}-${column.key}-tooltip`,\n              setAriaDescribedBy: false,\n              column,\n              content: column.columnActionsMode !== ColumnActionsMode.disabled ? column.ariaLabel : '',\n              children: (\n                <span\n                  id={`${parentId}-${column.key}`}\n                  className={classNames.cellTitle}\n                  // this node should only be focusable when it is a button\n                  data-is-focusable={\n                    hasInnerButton && column.columnActionsMode !== ColumnActionsMode.disabled ? 'true' : undefined\n                  }\n                  role={hasInnerButton ? 'button' : undefined}\n                  {...(hasInnerButton && accNameDescription)}\n                  onContextMenu={this._onColumnContextMenu}\n                  onClick={this._onColumnClick}\n                  aria-haspopup={column.columnActionsMode === ColumnActionsMode.hasDropdown ? 'menu' : undefined}\n                  aria-expanded={\n                    column.columnActionsMode === ColumnActionsMode.hasDropdown ? !!column.isMenuOpen : undefined\n                  }\n                >\n                  <span id={`${parentId}-${column.key}-name`} className={classNames.cellName}>\n                    {(column.iconName || column.iconClassName) && (\n                      <IconComponent className={classNames.iconClassName} iconName={column.iconName} />\n                    )}\n\n                    {onRenderHeader(this.props)}\n                  </span>\n\n                  {column.isFiltered && <IconComponent className={classNames.nearIcon} iconName=\"Filter\" />}\n\n                  {column.isSorted && (\n                    <IconComponent\n                      className={classNames.sortIcon}\n                      iconName={column.isSortedDescending ? 'SortDown' : 'SortUp'}\n                    />\n                  )}\n\n                  {column.isGrouped && <IconComponent className={classNames.nearIcon} iconName=\"GroupedDescending\" />}\n\n                  {column.columnActionsMode === ColumnActionsMode.hasDropdown &&\n                    !column.isIconOnly &&\n                    onRenderFilterIcon({\n                      'aria-hidden': true,\n                      columnProps: this.props,\n                      className: classNames.filterChevron,\n                      iconName: 'ChevronDown',\n                    })}\n                </span>\n              ),\n            },\n            this._onRenderColumnHeaderTooltip,\n          )}\n        </div>\n        {!this.props.onRenderColumnHeaderTooltip ? this._renderAccessibleLabel() : null}\n      </>\n    );\n  }\n\n  public componentDidMount(): void {\n    if (this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    const classNames = this._classNames;\n\n    if (this.props.isDropped) {\n      if (this._root.current) {\n        this._root.current.classList.add(classNames.borderAfterDropping);\n\n        this._async.setTimeout(() => {\n          if (this._root.current) {\n            this._root.current.classList.add(classNames.noBorderAfterDropping);\n          }\n        }, CLASSNAME_ADD_INTERVAL);\n      }\n\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.remove(classNames.borderAfterDropping);\n          this._root.current.classList.remove(classNames.noBorderAfterDropping);\n        }\n      }, TRANSITION_DURATION_DROP + CLASSNAME_ADD_INTERVAL);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public componentDidUpdate(): void {\n    if (!this._dragDropSubscription && this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    if (this._dragDropSubscription && !this.props.isDraggable) {\n      this._dragDropSubscription.dispose();\n      this._events.off(this._root.current, 'mousedown');\n      delete this._dragDropSubscription;\n    }\n  }\n\n  private _onRenderFilterIcon = (classNames: IProcessedStyleSet<IDetailsColumnStyles>) => (\n    props: IDetailsColumnFilterIconProps,\n  ): JSX.Element => {\n    const { columnProps, ...iconProps } = props;\n    const IconComponent = columnProps?.useFastIcons ? FontIcon : Icon;\n\n    return <IconComponent {...iconProps} />;\n  };\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: IDetailsColumnRenderTooltipProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  private _onColumnClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnClick, column } = this.props;\n\n    if (column.columnActionsMode === ColumnActionsMode.disabled) {\n      return;\n    }\n\n    if (column.onColumnClick) {\n      column.onColumnClick(ev, column);\n    }\n\n    if (onColumnClick) {\n      onColumnClick(ev, column);\n    }\n  };\n\n  private _getColumnDragDropOptions(): IDragDropOptions {\n    const { columnIndex } = this.props;\n    const options = {\n      selectionIndex: columnIndex,\n      context: { data: columnIndex, index: columnIndex },\n      canDrag: () => this.props.isDraggable!,\n      canDrop: () => false,\n      onDragStart: this._onDragStart,\n      updateDropState: () => undefined,\n      onDrop: () => undefined,\n      onDragEnd: this._onDragEnd,\n    };\n    return options;\n  }\n\n  private _hasAccessibleLabel(): boolean {\n    const { column } = this.props;\n\n    return !!(\n      column.ariaLabel ||\n      column.filterAriaLabel ||\n      column.sortAscendingAriaLabel ||\n      column.sortDescendingAriaLabel ||\n      column.groupAriaLabel\n    );\n  }\n\n  private _renderAccessibleLabel(): JSX.Element | null {\n    const { column, parentId } = this.props;\n    const classNames = this._classNames;\n\n    return this._hasAccessibleLabel() && !this.props.onRenderColumnHeaderTooltip ? (\n      <label\n        key={`${column.key}_label`}\n        id={`${parentId}-${column.key}-tooltip`}\n        className={classNames.accessibleLabel}\n      >\n        {column.ariaLabel}\n        {(column.isFiltered && column.filterAriaLabel) || null}\n        {(column.isSorted &&\n          (column.isSortedDescending ? column.sortDescendingAriaLabel : column.sortAscendingAriaLabel)) ||\n          null}\n        {(column.isGrouped && column.groupAriaLabel) || null}\n      </label>\n    ) : null;\n  }\n\n  private _onDragStart = (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (itemIndex) {\n      this._updateHeaderDragInfo(itemIndex);\n      this._root.current!.classList.add(classNames.borderWhileDragging);\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.add(classNames.noBorderWhileDragging);\n        }\n      }, CLASSNAME_ADD_INTERVAL);\n    }\n  };\n\n  private _onDragEnd = (item?: any, event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (event) {\n      this._updateHeaderDragInfo(-1, event);\n    }\n    this._root.current!.classList.remove(classNames.borderWhileDragging);\n    this._root.current!.classList.remove(classNames.noBorderWhileDragging);\n  };\n\n  private _updateHeaderDragInfo = (itemIndex: number, event?: MouseEvent) => {\n    /* eslint-disable deprecation/deprecation */\n    if (this.props.setDraggedItemIndex) {\n      this.props.setDraggedItemIndex(itemIndex);\n    }\n    /* eslint-enable deprecation/deprecation */\n    if (this.props.updateDragInfo) {\n      this.props.updateDragInfo({ itemIndex }, event);\n    }\n  };\n\n  private _onColumnContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnContextMenu, column } = this.props;\n    if (column.onColumnContextMenu) {\n      column.onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n    if (onColumnContextMenu) {\n      onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const { isDraggable } = this.props;\n    // Ignore anything except the primary button.\n    if (isDraggable && ev.button === MOUSEDOWN_PRIMARY_BUTTON) {\n      ev.stopPropagation();\n    }\n  };\n\n  private _addDragDropHandling() {\n    this._dragDropSubscription = this.props.dragDropHelper!.subscribe(\n      this._root.current!,\n      this._events,\n      this._getColumnDragDropOptions(),\n    );\n\n    // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n    this._events.on(this._root.current, 'mousedown', this._onRootMouseDown);\n  }\n}\n", "import { getFocusStyle, getGlobalClassNames, hiddenContentStyle, FontWeights } from '../../Styling';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { getCellStyles } from './DetailsHeader.styles';\nimport type { IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\nimport type { IStyle } from '../../Styling';\n\nconst GlobalClassNames = {\n  isActionable: 'is-actionable',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  isEmpty: 'is-empty',\n  isIconVisible: 'is-icon-visible',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVerticalStyle: 'ms-DetailsColumn-gripperBar',\n  nearIcon: 'ms-DetailsColumn-nearIcon',\n};\n\nexport const getStyles = (props: IDetailsColumnStyleProps): IDetailsColumnStyles => {\n  const {\n    theme,\n    headerClassName,\n    iconClassName,\n    isActionable,\n    isEmpty,\n    isIconVisible,\n    isPadded,\n    isIconOnly,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    transitionDurationDrag,\n    transitionDurationDrop,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    dropdownChevronForegroundColor: palette.neutralSecondary,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const nearIconStyle: IStyle = {\n    color: colors.iconForegroundColor,\n    opacity: 1,\n    paddingLeft: 8,\n  };\n\n  const borderWhileDragging: IStyle = {\n    outline: `1px solid ${palette.themePrimary}`,\n  };\n\n  const borderAfterDragOrDrop: IStyle = {\n    outlineColor: 'transparent',\n  };\n\n  return {\n    root: [\n      getCellStyles(props),\n      fonts.small,\n      isActionable && [\n        classNames.isActionable,\n        {\n          selectors: {\n            ':hover': {\n              color: semanticColors.bodyText,\n              background: semanticColors.listHeaderBackgroundHovered,\n            },\n            ':active': {\n              background: semanticColors.listHeaderBackgroundPressed,\n            },\n          },\n        },\n      ],\n      isEmpty && [\n        classNames.isEmpty,\n        {\n          textOverflow: 'clip',\n        },\n      ],\n      isIconVisible && classNames.isIconVisible,\n      isPadded && {\n        paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n      },\n      {\n        selectors: {\n          ':hover i[data-icon-name=\"GripperBarVertical\"]': {\n            display: 'block',\n          },\n        },\n      },\n      headerClassName,\n    ],\n\n    gripperBarVerticalStyle: {\n      display: 'none',\n      position: 'absolute',\n      textAlign: 'left',\n      color: palette.neutralTertiary,\n      left: 1,\n    },\n\n    nearIcon: [classNames.nearIcon, nearIconStyle],\n\n    sortIcon: [\n      nearIconStyle,\n      {\n        paddingLeft: 4,\n        position: 'relative',\n        top: 1,\n      },\n    ],\n\n    iconClassName: [\n      {\n        color: colors.iconForegroundColor,\n        opacity: 1,\n      },\n      iconClassName,\n    ],\n\n    filterChevron: [\n      classNames.filterChevron,\n      {\n        color: colors.dropdownChevronForegroundColor,\n        paddingLeft: 6,\n        verticalAlign: 'middle',\n        fontSize: fonts.small.fontSize,\n      },\n    ],\n\n    cellTitle: [\n      classNames.cellTitle,\n      getFocusStyle(theme),\n      {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'stretch',\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n        padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n        ...(isIconOnly\n          ? {\n              alignContent: 'flex-end',\n              maxHeight: '100%',\n              flexWrap: 'wrap-reverse',\n            }\n          : {}),\n      },\n    ],\n\n    cellName: [\n      classNames.cellName,\n      {\n        flex: '0 1 auto',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontWeight: FontWeights.semibold,\n        fontSize: fonts.medium.fontSize,\n      },\n      isIconOnly && {\n        selectors: {\n          [`.${classNames.nearIcon}`]: {\n            paddingLeft: 0,\n          },\n        },\n      },\n    ],\n\n    cellTooltip: {\n      display: 'block',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    borderWhileDragging: borderWhileDragging,\n\n    noBorderWhileDragging: [borderAfterDragOrDrop, { transition: `outline ${transitionDurationDrag}ms ease` }],\n\n    borderAfterDropping: borderWhileDragging,\n\n    noBorderAfterDropping: [borderAfterDragOrDrop, { transition: `outline  ${transitionDurationDrop}ms ease` }],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsColumnBase } from './DetailsColumn.base';\nimport { getStyles } from './DetailsColumn.styles';\nimport type { IDetailsColumnProps, IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\n\nexport const DetailsColumn: React.FunctionComponent<IDetailsColumnProps> = styled<\n  IDetailsColumnProps,\n  IDetailsColumnStyleProps,\n  IDetailsColumnStyles\n>(DetailsColumnBase, getStyles, undefined, { scope: 'DetailsColumn' });\n\nexport type { IDetailsColumnProps };\n", "import * as React from 'react';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsHeaderBase } from './DetailsHeader.base';\nimport { DetailsListLayoutMode, ColumnDragEndLocation } from './DetailsList.types';\nimport { SelectionMode } from '../../Selection';\nimport type { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IColumn, IColumnReorderOptions } from './DetailsList.types';\nimport type { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\nimport type { ISelection } from '../../Selection';\nimport type { IDetailsCheckboxProps } from './DetailsRowCheck.types';\nimport type { IDetailsColumnRenderTooltipProps } from './DetailsColumn.types';\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeader {\n  /** sets focus into the header */\n  focus: () => boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderBaseProps extends React.ClassAttributes<DetailsHeaderBase>, IDetailsItemProps {\n  /** Theme from the Higher Order Component */\n  theme?: ITheme;\n\n  /** Call to provide customized styling that will layer on top of the variant rules. */\n  styles?: IStyleFunctionOrObject<IDetailsHeaderStyleProps, IDetailsHeaderStyles>;\n\n  /** Ref to the component itself */\n  componentRef?: IRefObject<IDetailsHeader>;\n\n  /** Layout mode - fixedColumns or justified */\n  layoutMode: DetailsListLayoutMode;\n\n  /** Callback for when column sizing has changed */\n  onColumnIsSizingChanged?: (column: IColumn, isSizing: boolean) => void;\n\n  /** Callback for when column is resized */\n  onColumnResized?: (column: IColumn, newWidth: number, columnIndex: number) => void;\n\n  /** Callback for when column is automatically resized */\n  onColumnAutoResized?: (column: IColumn, columnIndex: number) => void;\n\n  /** Callback for when the column is clicked */\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\n\n  /** Callback for when the column needs to show a context menu */\n  onColumnContextMenu?: (column: IColumn, ev: React.MouseEvent<HTMLElement>) => void;\n\n  /** Callback to render a tooltip for the column header */\n  onRenderColumnHeaderTooltip?: IRenderFunction<IDetailsColumnRenderTooltipProps>;\n\n  /** Whether to collapse for all visibility */\n  collapseAllVisibility?: CollapseAllVisibility;\n\n  /** Whether or not all is collapsed */\n  isAllCollapsed?: boolean;\n\n  /** Callback for when collapse all is toggled */\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\n\n  /** ariaLabel for the entire header */\n  ariaLabel?: string;\n\n  /** ariaLabel for expand/collapse group button */\n  ariaLabelForToggleAllGroupsButton?: string;\n\n  /** ariaLabel for the header checkbox that selects or deselects everything */\n  ariaLabelForSelectAllCheckbox?: string;\n\n  /** ariaLabel for the selection column */\n  ariaLabelForSelectionColumn?: string;\n\n  /** Select all button visibility */\n  selectAllVisibility?: SelectAllVisibility;\n\n  /** Column reordering options */\n  columnReorderOptions?: IColumnReorderOptions;\n\n  /** Column reordering options */\n  columnReorderProps?: IColumnReorderHeaderProps;\n\n  /** Minimum pixels to be moved before dragging is registered */\n  minimumPixelsForDrag?: number;\n\n  /** Overriding class name */\n  className?: string;\n\n  /** If provided, can be used to render a custom checkbox */\n  onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;\n\n  /**\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\n   * but are still customizable via class names.\n   * @defaultvalue true\n   */\n  useFastIcons?: boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderProps extends IDetailsHeaderBaseProps {\n  /**\n   * Column metadata\n   */\n  columns: IColumn[];\n\n  /**\n   * Selection from utilities\n   */\n  selection: ISelection;\n\n  /**\n   * Selection mode\n   */\n  selectionMode: SelectionMode;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum SelectAllVisibility {\n  none = 0,\n  hidden = 1,\n  visible = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderState {\n  columnResizeDetails?: IColumnResizeDetails;\n  isAllSelected?: boolean;\n  isSizing?: boolean;\n  isAllCollapsed?: boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnResizeDetails {\n  columnIndex: number;\n  originX?: number;\n  columnMinWidth: number;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnReorderHeaderProps extends IColumnReorderOptions {\n  /** Callback to notify the column dragEnd event to List\n   * Need this to check whether the dragEnd has happened on\n   * corresponding list or outside of the list\n   */\n  onColumnDragEnd?: (props: { dropLocation?: ColumnDragEndLocation }, event: MouseEvent) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDropHintDetails {\n  originX: number; // X index of dropHint Element relative to header\n  startX: number; // start index of the range for the current drophint\n  endX: number; // end index of the range for the current drophint\n  dropHintElementRef: HTMLElement; // Reference for drophint to change the style when needed\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport type IDetailsHeaderStyleProps = Required<Pick<IDetailsHeaderProps, 'theme'>> &\n  Pick<IDetailsHeaderProps, 'className'> & {\n    /** Whether to hide select all checkbox */\n    isSelectAllHidden?: boolean;\n\n    /** Whether the \"select all\" checkbox is checked */\n    isAllSelected?: boolean;\n\n    /** Is column being resized */\n    isResizingColumn?: boolean;\n\n    /** Are all columns collapsed */\n    isAllCollapsed?: boolean;\n\n    /** Whether the header is sizing */\n    isSizing?: boolean;\n\n    /** Whether checkbox is hidden  */\n    isCheckboxHidden?: boolean;\n\n    cellStyleProps?: ICellStyleProps;\n  };\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderStyles {\n  root: IStyle;\n  check: IStyle;\n\n  /**\n   * @deprecated Not used\n   */\n  cellWrapperPadded: IStyle;\n  cellIsCheck: IStyle;\n\n  /**\n   * @deprecated Not used\n   */\n  cellIsActionable: IStyle;\n\n  /**\n   * @deprecated Not used\n   */\n  cellIsEmpty: IStyle;\n  cellSizer: IStyle;\n  cellSizerStart: IStyle;\n  cellSizerEnd: IStyle;\n  cellIsResizing: IStyle;\n  cellIsGroupExpander: IStyle;\n  collapseButton: IStyle;\n  checkTooltip: IStyle;\n  sizingOverlay: IStyle;\n  dropHintCircleStyle: IStyle;\n  dropHintCaretStyle: IStyle;\n  dropHintLineStyle: IStyle;\n  dropHintStyle: IStyle;\n  accessibleLabel: IStyle;\n}\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsHeaderBase } from './DetailsHeader.base';\nimport { getStyles } from './DetailsHeader.styles';\nimport type {\n  IDetailsHeaderProps,\n  IDetailsHeaderBaseProps,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles,\n} from './DetailsHeader.types';\n\nexport const DetailsHeader: React.FunctionComponent<IDetailsHeaderBaseProps> = styled<\n  IDetailsHeaderBaseProps,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles\n>(DetailsHeaderBase, getStyles, undefined, { scope: 'DetailsHeader' });\n\nexport type { IDetailsHeaderProps, IDetailsHeaderBaseProps };\n", "import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  classNamesFunction,\n  memoizeFunction,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  ColumnDragEndLocation,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\n\nimport { DragDropHelper } from '../../DragDrop';\nimport { GroupedList } from '../../GroupedList';\nimport { List, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction, getId } from '@fluentui/utilities';\nimport { useConst } from '@fluentui/react-hooks';\nimport type { IRenderFunction } from '../../Utilities';\nimport type {\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n} from '../DetailsList/DetailsList.types';\nimport type {\n  IDetailsHeader,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport type { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport type { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport type { IFocusZone, IFocusZoneProps } from '../../FocusZone';\nimport type { IObjectWithKey, ISelection } from '../../Selection';\nimport type { IGroupedList, IGroupDividerProps, IGroupRenderProps, IGroup } from '../../GroupedList';\nimport type { IListProps } from '../../List';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n  getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\ntype IDetailsListInnerProps = Omit<IDetailsListProps, 'selection'> &\n  IDetailsListState & {\n    selection: ISelection;\n    dragDropHelper: DragDropHelper | undefined;\n    rootRef: React.RefObject<HTMLDivElement>;\n    listRef: React.RefObject<List>;\n    groupedListRef: React.RefObject<IGroupedList>;\n    focusZoneRef: React.RefObject<IFocusZone>;\n    headerRef: React.RefObject<IDetailsHeader>;\n    selectionZoneRef: React.RefObject<SelectionZone>;\n    onGroupExpandStateChanged: (isSomeGroupExpanded: boolean) => void;\n    onColumnIsSizingChanged: (column: IColumn, isSizing: boolean) => void;\n    onRowDidMount: (row: DetailsRowBase) => void;\n    onRowWillUnmount: (row: DetailsRowBase) => void;\n    onColumnResized: (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number) => void;\n    onColumnAutoResized: (column: IColumn, columnIndex: number) => void;\n    onToggleCollapse: (collapsed: boolean) => void;\n    onActiveRowChanged: (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;\n    onBlur: (event: React.FocusEvent<HTMLElement>) => void;\n    onRenderDefaultRow: (detailsRowProps: IDetailsRowProps) => JSX.Element;\n  };\n\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nconst DetailsListInner: React.ComponentType<IDetailsListInnerProps> = (\n  props: IDetailsListInnerProps,\n): JSX.Element | null => {\n  const { selection } = props;\n\n  const {\n    ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn,\n    className,\n    checkboxVisibility,\n    compact,\n    constrainMode,\n    dragDropEvents,\n    groups,\n    groupProps,\n    indentWidth,\n    items,\n    isPlaceholderData,\n    isHeaderVisible,\n    layoutMode,\n    onItemInvoked,\n    onItemContextMenu,\n    onColumnHeaderClick,\n    onColumnHeaderContextMenu,\n    selectionMode = selection.mode,\n    selectionPreservedOnEmptyClick,\n    selectionZoneProps,\n    ariaLabel,\n    ariaLabelForGrid,\n    rowElementEventMap,\n    shouldApplyApplicationRole = false,\n    getKey,\n    listProps,\n    usePageCache,\n    onShouldVirtualize,\n    viewport,\n    minimumPixelsForDrag,\n    getGroupHeight,\n    styles,\n    theme,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    onRenderCheckbox,\n    useFastIcons,\n    dragDropHelper,\n    adjustedColumns,\n    isCollapsed,\n    isSizing,\n    isSomeGroupExpanded,\n    version,\n    rootRef,\n    listRef,\n    focusZoneRef,\n    columnReorderOptions,\n    groupedListRef,\n    headerRef,\n    onGroupExpandStateChanged,\n    onColumnIsSizingChanged,\n    onRowDidMount,\n    onRowWillUnmount,\n    disableSelectionZone,\n    onColumnResized,\n    onColumnAutoResized,\n    onToggleCollapse,\n    onActiveRowChanged,\n    onBlur,\n    rowElementEventMap: eventsToRegister,\n    onRenderMissingItem,\n    onRenderItemColumn,\n    getCellValueKey,\n    getRowAriaLabel,\n    getRowAriaDescribedBy,\n    checkButtonAriaLabel,\n    checkButtonGroupAriaLabel,\n    checkboxCellClassName,\n    useReducedRowRenderer,\n    enableUpdateAnimations,\n    enterModalSelectionOnTouch,\n    onRenderDefaultRow,\n    selectionZoneRef,\n    focusZoneProps,\n  } = props;\n\n  const defaultRole = 'grid';\n  const role = props.role ? props.role : defaultRole;\n\n  const rowId = getId('row');\n\n  const groupNestingDepth = getGroupNestingDepth(groups);\n  const groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);\n\n  const additionalListProps = React.useMemo((): IListProps => {\n    return {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version,\n      ...listProps,\n    };\n  }, [isSizing, getKey, version, listProps]);\n\n  let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    let isCollapsedGroupSelectVisible =\n      groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  const defaultOnRenderDetailsHeader = React.useCallback(\n    (detailsHeaderProps: IDetailsHeaderProps): JSX.Element | null => {\n      return <DetailsHeader {...detailsHeaderProps} />;\n    },\n    [],\n  );\n\n  const defaultOnRenderDetailsFooter = React.useCallback((): JSX.Element | null => {\n    return null;\n  }, []);\n\n  const propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n\n  const onRenderDetailsHeader = React.useMemo(() => {\n    return propsOnRenderDetailsHeader\n      ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)\n      : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n\n  const propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n\n  const onRenderDetailsFooter = React.useMemo(() => {\n    return propsOnRenderDetailsFooter\n      ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)\n      : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n\n  const detailsFooterProps = React.useMemo((): IDetailsFooterProps => {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth,\n      selection,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }, [\n    adjustedColumns,\n    groupNestingDepth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    indentWidth,\n    cellStyleProps,\n  ]);\n\n  const columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n\n  const onColumnDragEnd = React.useCallback(\n    (\n      {\n        dropLocation,\n      }: {\n        dropLocation?: ColumnDragEndLocation;\n      },\n      event: MouseEvent,\n    ): void => {\n      let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n      if (columnReorderOnDragEnd) {\n        if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n          finalDropLocation = dropLocation;\n        } else if (rootRef.current) {\n          const clientRect = rootRef.current.getBoundingClientRect();\n          if (\n            event.clientX > clientRect.left &&\n            event.clientX < clientRect.right &&\n            event.clientY > clientRect.top &&\n            event.clientY < clientRect.bottom\n          ) {\n            finalDropLocation = ColumnDragEndLocation.surface;\n          }\n        }\n        columnReorderOnDragEnd(finalDropLocation);\n      }\n    },\n    [columnReorderOnDragEnd, rootRef],\n  );\n\n  const columnReorderProps = React.useMemo((): IColumnReorderHeaderProps | undefined => {\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd,\n      };\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n\n  const rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  const colCount =\n    (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +\n    (adjustedColumns ? adjustedColumns.length : 0) +\n    (groups ? 1 : 0);\n\n  const classNames = React.useMemo(() => {\n    return getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n\n  const onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n\n  const finalOnRenderDetailsGroupFooter = React.useMemo(() => {\n    return onRenderDetailsGroupFooter\n      ? (groupFooterProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...groupFooterProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n  }, [\n    onRenderDetailsGroupFooter,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n\n  const finalOnRenderDetailsGroupHeader = React.useMemo(() => {\n    return onRenderDetailsGroupHeader\n      ? (groupHeaderProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return onRenderDetailsGroupHeader(\n            {\n              ...groupHeaderProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n              ariaColSpan: adjustedColumns.length,\n              ariaPosInSet: undefined,\n              ariaSetSize: undefined,\n              ariaRowCount: undefined,\n              ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n            },\n            defaultRender,\n          );\n        }\n      : (groupHeaderProps: IGroupDividerProps, defaultRender: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return defaultRender({\n            ...groupHeaderProps,\n            ariaColSpan: adjustedColumns.length,\n            ariaPosInSet: undefined,\n            ariaSetSize: undefined,\n            ariaRowCount: undefined,\n            ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n          });\n        };\n  }, [\n    onRenderDetailsGroupHeader,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    isHeaderVisible,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n    groupedDetailsListIndexMap,\n  ]);\n\n  const finalGroupProps = React.useMemo((): IGroupRenderProps | undefined => {\n    return {\n      ...groupProps,\n      role: role === defaultRole ? 'rowgroup' : 'presentation',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n      // pass through custom group header checkbox label\n      headerProps: {\n        selectAllButtonProps: {\n          'aria-label': checkButtonGroupAriaLabel,\n        },\n        ...groupProps?.headerProps,\n      },\n    };\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n\n  const sumColumnWidths = useConst(() =>\n    memoizeFunction((columns: IColumn[]) => {\n      let totalWidth: number = 0;\n\n      columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n      return totalWidth;\n    }),\n  );\n\n  const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n\n  const rowWidth = React.useMemo(() => {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n\n  const onRenderCell = React.useCallback(\n    (nestingDepth: number, item: any, index: number, group?: IGroup): React.ReactNode => {\n      const finalOnRenderRow = props.onRenderRow\n        ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow)\n        : onRenderDefaultRow;\n\n      const groupKey: string | undefined = group ? group.key : undefined;\n      const numOfGroupHeadersBeforeItem: number =\n        groupKey && groupedDetailsListIndexMap[groupKey]\n          ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem\n          : 0;\n\n      const rowRole = role === defaultRole ? undefined : 'presentation';\n\n      const rowProps: IDetailsRowProps = {\n        item: item,\n        itemIndex: index,\n        flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,\n        compact,\n        columns: adjustedColumns,\n        groupNestingDepth: nestingDepth,\n        id: `${rowId}-${index}`,\n        selectionMode,\n        selection,\n        onDidMount: onRowDidMount,\n        onWillUnmount: onRowWillUnmount,\n        onRenderItemColumn,\n        getCellValueKey,\n        eventsToRegister,\n        dragDropEvents,\n        dragDropHelper,\n        viewport,\n        checkboxVisibility,\n        collapseAllVisibility,\n        getRowAriaLabel,\n        getRowAriaDescribedBy,\n        checkButtonAriaLabel,\n        checkboxCellClassName,\n        useReducedRowRenderer,\n        indentWidth,\n        cellStyleProps,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        enableUpdateAnimations,\n        rowWidth,\n        useFastIcons,\n        role: rowRole,\n      };\n\n      if (!item) {\n        if (onRenderMissingItem) {\n          return onRenderMissingItem(index, rowProps);\n        }\n\n        return null;\n      }\n\n      return finalOnRenderRow(rowProps);\n    },\n    [\n      compact,\n      adjustedColumns,\n      selectionMode,\n      selection,\n      rowId,\n      onRowDidMount,\n      onRowWillUnmount,\n      onRenderItemColumn,\n      getCellValueKey,\n      eventsToRegister,\n      dragDropEvents,\n      dragDropHelper,\n      viewport,\n      checkboxVisibility,\n      collapseAllVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      isHeaderVisible,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n      onRenderDefaultRow,\n      onRenderMissingItem,\n      props.onRenderRow,\n      rowWidth,\n      role,\n      groupedDetailsListIndexMap,\n    ],\n  );\n\n  const onRenderListCell = React.useCallback(\n    (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n      return (item: any, itemIndex: number): React.ReactNode => {\n        return onRenderCell(nestingDepth, item, itemIndex);\n      };\n    },\n    [onRenderCell],\n  );\n\n  const isRightArrow = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      // eslint-disable-next-line deprecation/deprecation\n      return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n    },\n    [theme],\n  );\n\n  const focusZoneInnerProps: IFocusZoneProps = {\n    ...focusZoneProps,\n    componentRef: focusZoneRef,\n    className: classNames.focusZone,\n    direction: focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.vertical,\n    shouldEnterInnerZone:\n      focusZoneProps && focusZoneProps.shouldEnterInnerZone ? focusZoneProps.shouldEnterInnerZone : isRightArrow,\n    onActiveElementChanged:\n      focusZoneProps && focusZoneProps.onActiveElementChanged\n        ? focusZoneProps.onActiveElementChanged\n        : onActiveRowChanged,\n    shouldRaiseClicksOnEnter: false,\n    onBlur: focusZoneProps && focusZoneProps.onBlur ? focusZoneProps.onBlur : onBlur,\n  };\n\n  const list = groups ? (\n    <GroupedList\n      focusZoneProps={focusZoneInnerProps}\n      componentRef={groupedListRef}\n      groups={groups}\n      groupProps={finalGroupProps}\n      items={items}\n      onRenderCell={onRenderCell}\n      role=\"presentation\"\n      selection={selection}\n      selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n      dragDropEvents={dragDropEvents}\n      dragDropHelper={dragDropHelper}\n      eventsToRegister={rowElementEventMap}\n      listProps={additionalListProps}\n      onGroupExpandStateChanged={onGroupExpandStateChanged}\n      usePageCache={usePageCache}\n      onShouldVirtualize={onShouldVirtualize}\n      getGroupHeight={getGroupHeight}\n      compact={compact}\n    />\n  ) : (\n    <FocusZone {...focusZoneInnerProps}>\n      <List\n        ref={listRef}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    </FocusZone>\n  );\n\n  const onHeaderKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.down) {\n        if (focusZoneRef.current && focusZoneRef.current.focus()) {\n          // select the first item in list after down arrow key event\n          // only if nothing was selected; otherwise start with the already-selected item\n          if (selection.getSelectedIndices().length === 0) {\n            selection.setIndexSelected(0, true, false);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [selection, focusZoneRef],\n  );\n\n  const onContentKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.up && !ev.altKey) {\n        if (headerRef.current && headerRef.current.focus()) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [headerRef],\n  );\n\n  return (\n    // If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n    // with JAWS.\n    <div\n      ref={rootRef}\n      className={classNames.root}\n      data-automationid=\"DetailsList\"\n      data-is-scrollable=\"false\"\n      aria-label={ariaLabel}\n      {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n    >\n      <FocusRects />\n      <div\n        role={role}\n        aria-label={ariaLabelForGrid}\n        aria-rowcount={isPlaceholderData ? -1 : rowCount}\n        aria-colcount={colCount}\n        aria-readonly=\"true\"\n        aria-busy={isPlaceholderData}\n      >\n        <div onKeyDown={onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n          {isHeaderVisible &&\n            onRenderDetailsHeader(\n              {\n                componentRef: headerRef,\n                selectionMode: selectionMode,\n                layoutMode: layoutMode!,\n                selection: selection,\n                columns: adjustedColumns,\n                onColumnClick: onColumnHeaderClick,\n                onColumnContextMenu: onColumnHeaderContextMenu,\n                onColumnResized: onColumnResized,\n                onColumnIsSizingChanged: onColumnIsSizingChanged,\n                onColumnAutoResized: onColumnAutoResized,\n                groupNestingDepth: groupNestingDepth,\n                isAllCollapsed: isCollapsed,\n                onToggleCollapseAll: onToggleCollapse,\n                ariaLabel: ariaLabelForListHeader,\n                ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n                ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n                selectAllVisibility: selectAllVisibility,\n                collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                viewport: viewport,\n                columnReorderProps: columnReorderProps,\n                minimumPixelsForDrag: minimumPixelsForDrag,\n                cellStyleProps: cellStyleProps,\n                checkboxVisibility,\n                indentWidth,\n                onRenderDetailsCheckbox: onRenderCheckbox,\n                rowWidth: sumColumnWidths(adjustedColumns),\n                useFastIcons,\n              },\n              onRenderDetailsHeader,\n            )}\n        </div>\n        <div onKeyDown={onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n          {!disableSelectionZone ? (\n            <SelectionZone\n              ref={selectionZoneRef}\n              selection={selection}\n              selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n              selectionMode={selectionMode}\n              onItemInvoked={onItemInvoked}\n              onItemContextMenu={onItemContextMenu}\n              enterModalOnTouch={enterModalSelectionOnTouch}\n              {...(selectionZoneProps || {})}\n            >\n              {list}\n            </SelectionZone>\n          ) : (\n            list\n          )}\n        </div>\n        {onRenderDetailsFooter({\n          ...detailsFooterProps,\n        })}\n      </div>\n    </div>\n  );\n};\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <DetailsListInner\n        {...this.props}\n        {...this.state}\n        selection={this._selection}\n        dragDropHelper={this._dragDropHelper}\n        rootRef={this._root}\n        listRef={this._list}\n        groupedListRef={this._groupedList}\n        focusZoneRef={this._focusZone}\n        headerRef={this._header}\n        selectionZoneRef={this._selectionZone}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        onColumnIsSizingChanged={this._onColumnIsSizingChanged}\n        onRowDidMount={this._onRowDidMount}\n        onRowWillUnmount={this._onRowWillUnmount}\n        onColumnResized={this._onColumnResized}\n        onColumnAutoResized={this._onColumnAutoResized}\n        onToggleCollapse={this._onToggleCollapse}\n        onActiveRowChanged={this._onActiveRowChanged}\n        onBlur={this._onBlur}\n        onRenderDefaultRow={this._onRenderRow}\n      />\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _getDerivedStateFromProps = (\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState => {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (nextProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    let nextState = previousState;\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = nextProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      nextState = {\n        ...nextState,\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      };\n    }\n\n    if (!this.props.disableSelectionZone && nextProps.items !== items) {\n      this._selection.setItems(nextProps.items, shouldResetSelection);\n    }\n\n    if (\n      nextProps.checkboxVisibility !== checkboxVisibility ||\n      nextProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      nextProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    nextState = {\n      ...nextState,\n      ...this._adjustColumns(nextProps, nextState, true),\n    };\n\n    if (nextProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      nextProps.groupProps &&\n      nextProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      nextState = {\n        ...nextState,\n        isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed,\n      };\n    }\n\n    if (nextProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = nextProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: nextProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing: isSizing });\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IDetailsListState {\n    const adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    return {\n      ...previousState,\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth,\n    };\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState | undefined,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = previousState ? previousState.lastWidth : -1;\n    const lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility, flexMargin, skipViewportMeasures } = this.props;\n    let remainingWidth = viewportWidth - (flexMargin || 0);\n    let sumProportionalWidth = 0;\n\n    newColumns.forEach((col: IColumn) => {\n      if (skipViewportMeasures || !col.flexGrow) {\n        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n      } else {\n        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n        sumProportionalWidth += col.flexGrow;\n      }\n\n      remainingWidth -= getPaddedWidth(col, props, true);\n    });\n\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    remainingWidth -= rowCheckWidth + groupExpandWidth;\n\n    let widthFraction = remainingWidth / sumProportionalWidth;\n\n    // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n    if (!skipViewportMeasures) {\n      newColumns.forEach((column: IColumn) => {\n        const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n        if (newColumn.flexGrow && newColumn.maxWidth) {\n          const fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n          const shrinkWidth = fullWidth - newColumn.maxWidth;\n\n          if (shrinkWidth > 0) {\n            remainingWidth += shrinkWidth;\n            sumProportionalWidth -= (shrinkWidth / (fullWidth - newColumn.minWidth)) * newColumn.flexGrow;\n          }\n        }\n      });\n    }\n\n    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      // Delay computation until viewport width is available.\n      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n        return newColumn;\n      }\n\n      if (!newColumn.calculatedWidth) {\n        if (!skipViewportMeasures && newColumn.flexGrow) {\n          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n        } else {\n          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n        }\n      }\n\n      return newColumn;\n    });\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    let minimumWidth = 0;\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const baseColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n      };\n\n      const newColumn = {\n        ...baseColumn,\n        ...this._columnOverrides[column.key],\n      };\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {\n        minimumWidth += getPaddedWidth(baseColumn, props);\n      }\n\n      totalWidth += getPaddedWidth(newColumn, props);\n\n      return newColumn;\n    });\n\n    if (minimumWidth > availableWidth) {\n      return adjustedColumns;\n    }\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex >= 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this.setState({\n      ...this._adjustColumns(this.props, this.state, true, resizingColumnIndex),\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, props: IDetailsListProps, paddingOnly?: true): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    (paddingOnly ? 0 : column.calculatedWidth!) +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n\nfunction getGroupNestingDepth(groups: IDetailsListProps['groups']): number {\n  let level = 0;\n  let groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n\ninterface IGroupedDetailsListIndexMap {\n  [key: string]: { numOfGroupHeadersBeforeItem: number; totalRowCount: number };\n}\n\nfunction useGroupedDetailsListIndexMap(groups: IDetailsListProps['groups']) {\n  return React.useMemo((): IGroupedDetailsListIndexMap => {\n    const indexMap: IGroupedDetailsListIndexMap = {};\n    if (groups) {\n      let rowCount = 1;\n      let numGroupHeaders = 1;\n      for (const group of groups) {\n        const { key } = group;\n        indexMap[key] = { numOfGroupHeadersBeforeItem: numGroupHeaders, totalRowCount: rowCount };\n        numGroupHeaders++;\n        rowCount += group.count + 1;\n      }\n    }\n    return indexMap;\n  }, [groups]);\n}\n", "import * as React from 'react';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  css,\n  shallowCompare,\n  getNativeProps,\n  divProperties,\n} from '../../Utilities';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { classNamesFunction } from '../../Utilities';\nimport type { IDisposable } from '../../Utilities';\nimport type { IColumn } from './DetailsList.types';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type { IDetailsRowBaseProps, IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport type { IDetailsRowCheckProps } from './DetailsRowCheck.types';\nimport type { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport type { IProcessedStyleSet } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowStyleProps, IDetailsRowStyles>();\n\nexport interface IDetailsRowSelectionState {\n  isSelected: boolean;\n  isSelectionModal: boolean;\n}\n\nexport interface IDetailsRowState {\n  selectionState: IDetailsRowSelectionState;\n  columnMeasureInfo?: {\n    index: number;\n    column: IColumn;\n    onMeasureDone: (measuredWidth: number) => void;\n  };\n  isDropping?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsRowBase extends React.Component<IDetailsRowBaseProps, IDetailsRowState> {\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLElement>();\n  private _cellMeasurer = React.createRef<HTMLSpanElement>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _droppingClassNames: string;\n  /** Whether this.props.onDidMount has been called */\n  private _onDidMountCalled: boolean;\n  private _dragDropSubscription?: IDisposable;\n\n  private _classNames: IProcessedStyleSet<IDetailsRowStyles>;\n  private _rowClassNames: IDetailsRowFieldsProps['rowClassNames'];\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsRowBaseProps,\n    previousState: IDetailsRowState,\n  ): IDetailsRowState {\n    return {\n      ...previousState,\n      selectionState: getSelectionState(nextProps),\n    };\n  }\n\n  constructor(props: IDetailsRowBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false,\n    };\n\n    this._droppingClassNames = '';\n  }\n  public componentDidMount(): void {\n    const { dragDropHelper, selection, item, onDidMount } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getRowDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IDetailsRowBaseProps) {\n    const state = this.state;\n    const { item, onDidMount } = this.props;\n    const { columnMeasureInfo } = state;\n\n    if (\n      this.props.itemIndex !== previousProps.itemIndex ||\n      this.props.item !== previousProps.item ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getRowDragDropOptions(),\n        );\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      const newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n\n      this.setState({\n        columnMeasureInfo: undefined,\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { item, onWillUnmount } = this.props;\n\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  }\n\n  public shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean {\n    if (this.props.useReducedRowRenderer) {\n      const newSelectionState = getSelectionState(nextProps);\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      columns = NO_COLUMNS,\n      dragDropEvents,\n      item,\n      itemIndex,\n      id,\n      flatIndexOffset = 2,\n      onRenderCheck = this._onRenderCheck,\n      onRenderDetailsCheckbox,\n      onRenderItemColumn,\n      getCellValueKey,\n      selectionMode,\n      rowWidth = 0,\n      checkboxVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      rowFieldsAs: RowFields = DetailsRowFields,\n      selection,\n      indentWidth,\n      enableUpdateAnimations,\n      compact,\n      theme,\n      styles,\n      cellsByColumn,\n      groupNestingDepth,\n      useFastIcons = true,\n      cellStyleProps,\n      group,\n      focusZoneProps,\n      disabled = false,\n    } = this.props;\n    const { columnMeasureInfo, isDropping } = this.state;\n    const { isSelected = false, isSelectionModal = false } = this.state.selectionState;\n    const isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    const droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    const ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    const ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    const canSelect = !!selection && selection.canSelectItem(item, itemIndex) && !disabled;\n    const isContentUnselectable = selectionMode === SelectionMode.multiple;\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    const ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n    const ariaPositionInSet = group ? itemIndex - group.startIndex + 1 : undefined;\n    const ariaSetSize = group ? group.count : undefined;\n    const focusZoneDirection = focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.horizontal;\n\n    this._classNames = {\n      ...this._classNames,\n      ...getClassNames(styles, {\n        theme: theme!,\n        isSelected,\n        canSelect: !isContentUnselectable,\n        anySelected: isSelectionModal,\n        checkboxCellClassName,\n        droppingClassName,\n        className,\n        compact,\n        enableUpdateAnimations,\n        cellStyleProps,\n        disabled,\n      }),\n    };\n\n    const rowClassNames: IDetailsRowFieldsProps['rowClassNames'] = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields,\n    };\n\n    // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    const rowFields = (\n      <RowFields\n        rowClassNames={this._rowClassNames}\n        rowHeaderId={`${id}-header`}\n        cellsByColumn={cellsByColumn}\n        columns={columns}\n        item={item}\n        itemIndex={itemIndex}\n        columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0)}\n        onRenderItemColumn={onRenderItemColumn}\n        getCellValueKey={getCellValueKey}\n        enableUpdateAnimations={enableUpdateAnimations}\n        cellStyleProps={cellStyleProps}\n      />\n    );\n\n    const defaultRole = 'row';\n    const role = this.props.role ? this.props.role : defaultRole;\n\n    return (\n      <FocusZone\n        data-is-focusable={true}\n        {...getNativeProps(this.props, divProperties)}\n        {...(typeof isDraggable === 'boolean'\n          ? {\n              'data-is-draggable': isDraggable, // This data attribute is used by some host applications.\n              draggable: isDraggable,\n            }\n          : {})}\n        {...focusZoneProps}\n        direction={focusZoneDirection}\n        elementRef={this._root}\n        componentRef={this._focusZone}\n        role={role}\n        aria-label={ariaLabel}\n        aria-disabled={disabled || undefined}\n        aria-describedby={ariaDescribedBy}\n        className={this._classNames.root}\n        data-selection-index={itemIndex}\n        data-selection-touch-invoke={true}\n        data-selection-disabled={disabled || undefined}\n        data-item-index={itemIndex}\n        aria-rowindex={ariaPositionInSet === undefined ? itemIndex + flatIndexOffset : undefined}\n        aria-level={(groupNestingDepth && groupNestingDepth + 1) || undefined}\n        aria-posinset={ariaPositionInSet}\n        aria-setsize={ariaSetSize}\n        data-automationid=\"DetailsRow\"\n        style={{ minWidth: rowWidth }}\n        aria-selected={ariaSelected}\n        allowFocusRoot={true}\n      >\n        {showCheckbox && (\n          <div role=\"gridcell\" aria-colindex={1} data-selection-toggle={true} className={this._classNames.checkCell}>\n            {onRenderCheck({\n              id: id ? `${id}-checkbox` : undefined,\n              selected: isSelected,\n              selectionMode,\n              anySelected: isSelectionModal,\n              'aria-label': checkButtonAriaLabel,\n              'aria-labelledby': id ? `${id}-checkbox ${id}-header` : undefined,\n              canSelect,\n              compact,\n              className: this._classNames.check,\n              theme,\n              isVisible: checkboxVisibility === CheckboxVisibility.always,\n              onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n              useFastIcons,\n            })}\n          </div>\n        )}\n\n        <GroupSpacer\n          indentWidth={indentWidth}\n          role=\"gridcell\"\n          count={groupNestingDepth! - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0)}\n        />\n\n        {item && rowFields}\n        {columnMeasureInfo && (\n          <span\n            role=\"presentation\"\n            className={css(this._classNames.cellMeasurer, this._classNames.cell)}\n            ref={this._cellMeasurer}\n          >\n            <RowFields\n              rowClassNames={this._rowClassNames}\n              rowHeaderId={`${id}-header`}\n              columns={[columnMeasureInfo.column]}\n              item={item}\n              itemIndex={itemIndex}\n              columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length}\n              onRenderItemColumn={onRenderItemColumn}\n              getCellValueKey={getCellValueKey}\n            />\n          </span>\n        )}\n\n        <span\n          role=\"checkbox\"\n          className={this._classNames.checkCover}\n          aria-checked={isSelected}\n          data-selection-toggle={true}\n        />\n      </FocusZone>\n    );\n  }\n\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n  public measureCell(index: number, onMeasureDone: (width: number) => void): void {\n    const { columns = NO_COLUMNS } = this.props;\n    const column: IColumn = { ...columns[index] };\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n\n    delete column.calculatedWidth;\n\n    this.setState({\n      columnMeasureInfo: {\n        index,\n        column,\n        onMeasureDone,\n      },\n    });\n  }\n\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    return !!this._focusZone.current?.focus(forceIntoFirstElement);\n  }\n\n  protected _onRenderCheck(props: IDetailsRowCheckProps) {\n    return <DetailsRowCheck {...props} />;\n  }\n\n  private _onSelectionChanged = (): void => {\n    const selectionState = getSelectionState(this.props);\n\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\n      this.setState({\n        selectionState: selectionState,\n      });\n    }\n  };\n\n  private _getRowDragDropOptions(): IDragDropOptions {\n    const { item, itemIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: { data: item, index: itemIndex },\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents!.onDrop,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n\n    return options;\n  }\n\n  /**\n   * update isDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * when change to true, that means drag enter. we will add default dropping class name\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n   *\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\n   *\n   * @param newValue - New isDropping state value\n   * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, item } = this.props;\n\n    if (!newValue) {\n      if (dragDropEvents!.onDragLeave) {\n        dragDropEvents!.onDragLeave(item, event);\n      }\n    } else if (dragDropEvents!.onDragEnter) {\n      this._droppingClassNames = dragDropEvents!.onDragEnter(item, event);\n    }\n\n    if (isDropping !== newValue) {\n      this.setState({ isDropping: newValue });\n    }\n  };\n}\n\nfunction getSelectionState(props: IDetailsRowBaseProps): IDetailsRowSelectionState {\n  const { itemIndex, selection } = props;\n\n  return {\n    isSelected: !!selection?.isIndexSelected(itemIndex),\n    isSelectionModal: !!selection?.isModal?.(),\n  };\n}\n", "import * as React from 'react';\nimport { css } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport type { IColumn } from './DetailsList.types';\nimport type { IDetailsRowFieldsProps } from './DetailsRowFields.types';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps> = props => {\n  const {\n    columns,\n    columnStartIndex,\n    rowClassNames,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    item,\n    itemIndex,\n    onRenderItemColumn,\n    getCellValueKey,\n    cellsByColumn,\n    enableUpdateAnimations,\n    rowHeaderId,\n  } = props;\n\n  const cellValueKeysRef = React.useRef<{\n    [columnKey: string]: string | undefined;\n  }>();\n\n  const cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n\n  return (\n    <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n      {columns.map((column, columnIndex) => {\n        const width: string | number =\n          typeof column.calculatedWidth === 'undefined'\n            ? 'auto'\n            : column.calculatedWidth +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n        const { onRender = onRenderItemColumn, getValueKey = getCellValueKey } = column;\n        const cellContentsRender =\n          cellsByColumn && column.key in cellsByColumn\n            ? cellsByColumn[column.key]\n            : onRender\n            ? onRender(item, itemIndex, column)\n            : getCellText(item, column);\n\n        const previousValueKey = cellValueKeys[column.key];\n\n        const cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n\n        let showAnimation = false;\n\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n          showAnimation = true;\n        }\n\n        cellValueKeys[column.key] = cellValueKey;\n\n        // generate a key that auto-dirties when content changes, to force the container to re-render,\n        // to trigger animation\n        const key = `${column.key}${cellValueKey !== undefined ? `-${cellValueKey}` : ''}`;\n        return (\n          <div\n            key={key}\n            id={column.isRowHeader ? rowHeaderId : undefined}\n            role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n            aria-readonly\n            aria-colindex={columnIndex + columnStartIndex + 1}\n            className={css(\n              column.className,\n              column.isMultiline && rowClassNames.isMultiline,\n              column.isRowHeader && rowClassNames.isRowHeader,\n              rowClassNames.cell,\n              column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n              showAnimation && rowClassNames.cellAnimation,\n            )}\n            style={{ width }}\n            data-automationid=\"DetailsRowCell\"\n            data-automation-key={column.key}\n          >\n            {cellContentsRender}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsRowBase } from './DetailsRow.base';\nimport { getDetailsRowStyles } from './DetailsRow.styles';\nimport type {\n  IDetailsRowProps,\n  IDetailsRowBaseProps,\n  IDetailsRowStyleProps,\n  IDetailsRowStyles,\n} from './DetailsRow.types';\n\nexport const DetailsRow: React.FunctionComponent<IDetailsRowBaseProps> = styled<\n  IDetailsRowBaseProps,\n  IDetailsRowStyleProps,\n  IDetailsRowStyles\n>(DetailsRowBase, getDetailsRowStyles, undefined, {\n  scope: 'DetailsRow',\n});\n\nexport type { IDetailsRowProps, IDetailsRowBaseProps };\n", "import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { findScrollableParent, getRect, getWindow, Async, EventGroup } from '../../Utilities';\n\n/**\n * Viewport rectangle dimensions.\n *\n * {@docCategory DetailsList}\n */\nexport interface IViewport {\n  /**\n   * Width in pixels.\n   */\n  width: number;\n  /**\n   * Height in pixels.\n   */\n  height: number;\n}\n\nexport interface IWithViewportState {\n  viewport?: IViewport;\n}\n\n/**\n * Props interface for the withViewport component.\n *\n * {@docCategory DetailsList}\n */\nexport interface IWithViewportProps {\n  /**\n   * Whether or not `withViewport` should disable its viewport measurements, effectively making this decorator\n   * pass-through with no impact on the rendered component.\n   *\n   * Since `withViewport` measures the `viewport` on mount, after each React update, and in response to events,\n   * it may cause a component which does not currently need this information due to its configuration to re-render\n   * too often. `skipViewportMeasures` may be toggled on and off based on current state, and will suspend and resume\n   * measurement as-needed.\n   *\n   * For example, when this wraps `DetailsList`, set `skipViewportMeasures` to `true` when the `layoutMode` is\n   * `fixedColumns`, since the `DetailsList` does not use the viewport size in any calculations.\n   *\n   * In addition, consider setting `skipViewportMeasures` to `true` when running within a React test renderer, to avoid\n   * direct DOM dependencies.\n   */\n\n  skipViewportMeasures?: boolean;\n  /**\n   * Whether or not to explicitly disable usage of the `ResizeObserver` in favor of a `'resize'` event on `window`,\n   * even if the browser supports `ResizeObserver`. This may be necessary if use of `ResizeObserver` results in too\n   * many re-renders of the wrapped component due to the frequency at which events are fired.\n   *\n   * This has no impact if `skipViewportMeasures` is `true`, as no viewport measurement strategy is used.\n   */\n  disableResizeObserver?: boolean;\n\n  /**\n   * Whether or not `withViewport` will delay before first measuring the viewport size.\n   * Setting this will delay measurement by the same amount as the debounce for resizing the window.\n   * This is useful for giving the child of the viewport time to render before measuring.\n   *\n   * This is an opt-in setting as existing systems have a dependency on immediate measurement for performance.\n   * @default false\n   */\n  delayFirstMeasure?: boolean;\n}\n\nconst RESIZE_DELAY = 500;\nconst MAX_RESIZE_ATTEMPTS = 3;\n\n/**\n * A decorator to update decorated component on viewport or window resize events.\n *\n * @param ComposedComponent decorated React component reference.\n */\nexport function withViewport<TProps extends { viewport?: IViewport }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  return class WithViewportComponent extends BaseDecorator<TProps, IWithViewportState> {\n    private _root = React.createRef<HTMLDivElement>();\n    private _resizeAttempts: number;\n    private _viewportResizeObserver: any;\n    private _async: Async;\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n\n      this._async = new Async(this);\n      this._events = new EventGroup(this);\n      this._resizeAttempts = 0;\n\n      this.state = {\n        viewport: {\n          width: 0,\n          height: 0,\n        },\n      };\n    }\n\n    public componentDidMount(): void {\n      const { delayFirstMeasure, disableResizeObserver, skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n        leading: false,\n      });\n\n      if (!skipViewportMeasures) {\n        if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n          this._registerResizeObserver();\n        } else {\n          this._events.on(win, 'resize', this._onAsyncResize);\n        }\n\n        if (delayFirstMeasure) {\n          this._async.setTimeout(() => {\n            this._updateViewport();\n          }, RESIZE_DELAY);\n        } else {\n          this._updateViewport();\n        }\n      }\n    }\n\n    public componentDidUpdate(previousProps: TProps) {\n      const { skipViewportMeasures: previousSkipViewportMeasures } = previousProps as IWithViewportProps;\n      const { disableResizeObserver, skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      if (skipViewportMeasures !== previousSkipViewportMeasures) {\n        if (!skipViewportMeasures) {\n          if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n            if (!this._viewportResizeObserver) {\n              this._registerResizeObserver();\n            }\n          } else {\n            this._events.on(win, 'resize', this._onAsyncResize);\n          }\n\n          this._updateViewport();\n        } else {\n          this._unregisterResizeObserver();\n          this._events.off(win, 'resize', this._onAsyncResize);\n        }\n      }\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n      this._async.dispose();\n      this._unregisterResizeObserver();\n    }\n\n    public render(): JSX.Element {\n      const { viewport } = this.state;\n      const newViewport = viewport!.width > 0 && viewport!.height > 0 ? viewport : undefined;\n\n      return (\n        <div className=\"ms-Viewport\" ref={this._root} style={{ minWidth: 1, minHeight: 1 }}>\n          <ComposedComponent ref={this._updateComposedComponentRef} viewport={newViewport} {...(this.props as any)} />\n        </div>\n      );\n    }\n\n    public forceUpdate(): void {\n      this._updateViewport(true);\n    }\n\n    private _onAsyncResize(): void {\n      this._updateViewport();\n    }\n\n    private _isResizeObserverAvailable(): boolean {\n      const win = getWindow(this._root.current);\n\n      return win && (win as any).ResizeObserver;\n    }\n\n    private _registerResizeObserver = () => {\n      const win = getWindow(this._root.current);\n\n      this._viewportResizeObserver = new (win as any).ResizeObserver(this._onAsyncResize);\n      this._viewportResizeObserver.observe(this._root.current);\n    };\n\n    private _unregisterResizeObserver = () => {\n      if (this._viewportResizeObserver) {\n        this._viewportResizeObserver.disconnect();\n        delete this._viewportResizeObserver;\n      }\n    };\n\n    /* Note: using lambda here because decorators don't seem to work in decorators. */\n    private _updateViewport = (withForceUpdate?: boolean) => {\n      const { viewport } = this.state;\n      const viewportElement = this._root.current;\n      const scrollElement = findScrollableParent(viewportElement) as HTMLElement;\n      const scrollRect = getRect(scrollElement);\n      const clientRect = getRect(viewportElement);\n      const updateComponent = () => {\n        if (withForceUpdate && this._composedComponentInstance) {\n          this._composedComponentInstance.forceUpdate();\n        }\n      };\n\n      const isSizeChanged =\n        (clientRect && clientRect.width) !== viewport!.width || (scrollRect && scrollRect.height) !== viewport!.height;\n\n      if (isSizeChanged && this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {\n        this._resizeAttempts++;\n        this.setState(\n          {\n            viewport: {\n              width: clientRect.width,\n              height: scrollRect.height,\n            },\n          },\n          () => {\n            this._updateViewport(withForceUpdate);\n          },\n        );\n      } else {\n        this._resizeAttempts = 0;\n        updateComponent();\n      }\n    };\n  };\n}\n", "import type { IGroup } from '../../components/GroupedList/GroupedList.types';\n\n/**\n * Takes an array of groups and returns a count of the groups and all descendant groups.\n * @param groups - The array of groups to count.\n */\nexport const GetGroupCount = (groups: IGroup[] | undefined): number => {\n  let total = 0;\n\n  if (groups) {\n    const remainingGroups = [...groups];\n    let currentGroup: IGroup;\n\n    while (remainingGroups && remainingGroups.length > 0) {\n      ++total;\n\n      currentGroup = remainingGroups.pop() as IGroup;\n\n      if (currentGroup && currentGroup.children) {\n        remainingGroups.push(...currentGroup.children);\n      }\n    }\n  }\n\n  return total;\n};\n", "import { getGlobalClassNames } from '../../Styling';\nimport type { IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsList',\n  compact: 'ms-DetailsList--Compact',\n  contentWrapper: 'ms-DetailsList-contentWrapper',\n  headerWrapper: 'ms-DetailsList-headerWrapper',\n  isFixed: 'is-fixed',\n  isHorizontalConstrained: 'is-horizontalConstrained',\n  listCell: 'ms-List-cell',\n};\n\nexport const getStyles = (props: IDetailsListStyleProps): IDetailsListStyles => {\n  const { theme, className, isHorizontalConstrained, compact, isFixed } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        color: semanticColors.listText,\n        selectors: {\n          [`& .${classNames.listCell}`]: {\n            minHeight: 38,\n            wordBreak: 'break-word',\n          },\n        },\n      },\n\n      isFixed && classNames.isFixed,\n\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32,\n            },\n          },\n        },\n      ],\n\n      isHorizontalConstrained && [\n        classNames.isHorizontalConstrained,\n        {\n          overflowX: 'auto',\n          overflowY: 'visible',\n          WebkitOverflowScrolling: 'touch',\n        },\n      ],\n\n      className,\n    ],\n\n    focusZone: [\n      {\n        display: 'inline-block',\n        minWidth: '100%',\n        minHeight: 1,\n      },\n    ],\n    headerWrapper: classNames.headerWrapper,\n    contentWrapper: classNames.contentWrapper,\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsListBase } from './DetailsList.base';\nimport { getStyles } from './DetailsList.styles';\nimport type { IDetailsListProps, IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\n\nexport const DetailsList: React.FunctionComponent<IDetailsListProps> = styled<\n  IDetailsListProps,\n  IDetailsListStyleProps,\n  IDetailsListStyles\n>(DetailsListBase, getStyles, undefined, {\n  scope: 'DetailsList',\n});\n\nexport type { IDetailsListProps };\n", "import { HighContrastSelector, getGlobalClassNames } from '../../Styling';\nimport type { IScrollablePaneStyleProps, IScrollablePaneStyles } from './ScrollablePane.types';\nimport type { IStyle } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-ScrollablePane',\n  contentContainer: 'ms-ScrollablePane--contentContainer',\n};\n\nexport const getStyles = (props: IScrollablePaneStyleProps): IScrollablePaneStyles => {\n  const { className, theme } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const AboveAndBelowStyles: IStyle = {\n    position: 'absolute',\n    pointerEvents: 'none',\n  };\n\n  const positioningStyle: IStyle = {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    WebkitOverflowScrolling: 'touch',\n  };\n\n  return {\n    root: [classNames.root, theme.fonts.medium, positioningStyle, className],\n    contentContainer: [\n      classNames.contentContainer,\n      {\n        overflowY: props.scrollbarVisibility === 'always' ? 'scroll' : 'auto',\n      },\n      positioningStyle,\n    ],\n    stickyAbove: [\n      {\n        top: 0,\n        zIndex: 1,\n        selectors: {\n          [HighContrastSelector]: {\n            borderBottom: '1px solid WindowText',\n          },\n        },\n      },\n      AboveAndBelowStyles,\n    ],\n    stickyBelow: [\n      {\n        bottom: 0,\n        selectors: {\n          [HighContrastSelector]: {\n            borderTop: '1px solid WindowText',\n          },\n        },\n      },\n      AboveAndBelowStyles,\n    ],\n    stickyBelowItems: [\n      {\n        bottom: 0,\n      },\n      AboveAndBelowStyles,\n      {\n        width: '100%',\n      },\n    ],\n  };\n};\n", "import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  classNamesFunction,\n  divProperties,\n  getNativeProps,\n  getRTL,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { ScrollablePaneContext } from './ScrollablePane.types';\nimport { Sticky } from '../../Sticky';\nimport type {\n  IScrollablePane,\n  IScrollablePaneContext,\n  IScrollablePaneProps,\n  IScrollablePaneStyleProps,\n  IScrollablePaneStyles,\n} from './ScrollablePane.types';\n\nexport interface IScrollablePaneState {\n  stickyTopHeight: number;\n  stickyBottomHeight: number;\n  scrollbarWidth: number;\n  scrollbarHeight: number;\n}\n\nconst getClassNames = classNamesFunction<IScrollablePaneStyleProps, IScrollablePaneStyles>();\n\nexport class ScrollablePaneBase\n  extends React.Component<IScrollablePaneProps, IScrollablePaneState>\n  implements IScrollablePane {\n  private _root = React.createRef<HTMLDivElement>();\n  private _stickyAboveRef = React.createRef<HTMLDivElement>();\n  private _stickyBelowRef = React.createRef<HTMLDivElement>();\n  private _contentContainer = React.createRef<HTMLDivElement>();\n  private _subscribers: Set<Function>;\n  private _stickies: Set<Sticky>;\n  private _mutationObserver: MutationObserver;\n  private _notifyThrottled: () => void;\n  private _async: Async;\n  private _events: EventGroup;\n\n  constructor(props: IScrollablePaneProps) {\n    super(props);\n    this._subscribers = new Set<Function>();\n    this._stickies = new Set<Sticky>();\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      stickyTopHeight: 0,\n      stickyBottomHeight: 0,\n      scrollbarWidth: 0,\n      scrollbarHeight: 0,\n    };\n\n    this._notifyThrottled = this._async.throttle(this.notifySubscribers, 50);\n  }\n\n  public get root(): HTMLDivElement | null {\n    return this._root.current;\n  }\n\n  public get stickyAbove(): HTMLDivElement | null {\n    return this._stickyAboveRef.current;\n  }\n\n  public get stickyBelow(): HTMLDivElement | null {\n    return this._stickyBelowRef.current;\n  }\n\n  public get contentContainer(): HTMLDivElement | null {\n    return this._contentContainer.current;\n  }\n\n  public componentDidMount() {\n    const { initialScrollPosition } = this.props;\n    this._events.on(this.contentContainer, 'scroll', this._onScroll);\n    this._events.on(window, 'resize', this._onWindowResize);\n    if (this.contentContainer && initialScrollPosition) {\n      this.contentContainer.scrollTop = initialScrollPosition;\n    }\n\n    // Set sticky distances from top property, then sort in correct order and notify subscribers\n    this.setStickiesDistanceFromTop();\n    this._stickies.forEach(sticky => {\n      this.sortSticky(sticky);\n    });\n    this.notifySubscribers();\n\n    if ('MutationObserver' in window) {\n      this._mutationObserver = new MutationObserver(mutation => {\n        // Function to check if mutation is occuring in stickyAbove or stickyBelow\n        function checkIfMutationIsSticky(mutationRecord: MutationRecord): boolean {\n          if (this.stickyAbove !== null && this.stickyBelow !== null) {\n            return this.stickyAbove.contains(mutationRecord.target) || this.stickyBelow.contains(mutationRecord.target);\n          }\n          return false;\n        }\n\n        // Compute the scrollbar height, which might have changed if the content's width changed and caused overflow\n        const scrollbarHeight = this._getScrollbarHeight();\n        // If the scrollbar height changed, update state so it's postioned correctly below sticky footer\n        if (scrollbarHeight !== this.state.scrollbarHeight) {\n          this.setState({\n            scrollbarHeight: scrollbarHeight,\n          });\n        }\n\n        // Notify subscribers again to re-check whether Sticky should be Sticky'd or not\n        this.notifySubscribers();\n\n        // If mutation occurs in sticky header or footer, then update sticky top/bottom heights\n        if (mutation.some(checkIfMutationIsSticky.bind(this))) {\n          this.updateStickyRefHeights();\n        } else {\n          // If mutation occurs in scrollable region, then find Sticky it belongs to and force update\n          const stickyList: Sticky[] = [];\n          this._stickies.forEach(sticky => {\n            if (sticky.root && sticky.root.contains(mutation[0].target)) {\n              stickyList.push(sticky);\n            }\n          });\n          if (stickyList.length) {\n            stickyList.forEach(sticky => {\n              sticky.forceUpdate();\n            });\n          }\n        }\n      });\n\n      if (this.root) {\n        this._mutationObserver.observe(this.root, {\n          childList: true,\n          attributes: true,\n          subtree: true,\n          characterData: true,\n        });\n      }\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n    this._async.dispose();\n\n    if (this._mutationObserver) {\n      this._mutationObserver.disconnect();\n    }\n  }\n\n  // Only updates if props/state change, just to prevent excessive setState with updateStickyRefHeights\n  public shouldComponentUpdate(nextProps: IScrollablePaneProps, nextState: IScrollablePaneState): boolean {\n    return (\n      this.props.children !== nextProps.children ||\n      this.props.initialScrollPosition !== nextProps.initialScrollPosition ||\n      this.props.className !== nextProps.className ||\n      this.state.stickyTopHeight !== nextState.stickyTopHeight ||\n      this.state.stickyBottomHeight !== nextState.stickyBottomHeight ||\n      this.state.scrollbarWidth !== nextState.scrollbarWidth ||\n      this.state.scrollbarHeight !== nextState.scrollbarHeight\n    );\n  }\n\n  public componentDidUpdate(prevProps: IScrollablePaneProps, prevState: IScrollablePaneState) {\n    const initialScrollPosition = this.props.initialScrollPosition;\n    if (\n      this.contentContainer &&\n      typeof initialScrollPosition === 'number' &&\n      prevProps.initialScrollPosition !== initialScrollPosition\n    ) {\n      this.contentContainer.scrollTop = initialScrollPosition;\n    }\n\n    // Update subscribers when stickyTopHeight/stickyBottomHeight changes\n    if (\n      prevState.stickyTopHeight !== this.state.stickyTopHeight ||\n      prevState.stickyBottomHeight !== this.state.stickyBottomHeight\n    ) {\n      this.notifySubscribers();\n    }\n\n    this._async.setTimeout(this._onWindowResize, 0);\n  }\n\n  public render(): JSX.Element {\n    const { className, scrollContainerFocus, scrollContainerAriaLabel, theme, styles } = this.props;\n    const { stickyTopHeight, stickyBottomHeight } = this.state;\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      scrollbarVisibility: this.props.scrollbarVisibility,\n    });\n\n    const scrollContainerProps = scrollContainerFocus\n      ? {\n          role: 'group',\n          tabIndex: 0,\n          'aria-label': scrollContainerAriaLabel,\n        }\n      : {};\n\n    return (\n      <div {...getNativeProps(this.props, divProperties)} ref={this._root} className={classNames.root}>\n        <div\n          ref={this._stickyAboveRef}\n          className={classNames.stickyAbove}\n          style={this._getStickyContainerStyle(stickyTopHeight, true)}\n        />\n        <div\n          ref={this._contentContainer}\n          {...scrollContainerProps}\n          className={classNames.contentContainer}\n          data-is-scrollable={true}\n        >\n          <ScrollablePaneContext.Provider value={this._getScrollablePaneContext()}>\n            {this.props.children}\n          </ScrollablePaneContext.Provider>\n        </div>\n        <div className={classNames.stickyBelow} style={this._getStickyContainerStyle(stickyBottomHeight, false)}>\n          <div ref={this._stickyBelowRef} className={classNames.stickyBelowItems} />\n        </div>\n      </div>\n    );\n  }\n\n  public setStickiesDistanceFromTop(): void {\n    if (this.contentContainer) {\n      this._stickies.forEach(sticky => {\n        sticky.setDistanceFromTop(this.contentContainer as HTMLDivElement);\n      });\n    }\n  }\n\n  public forceLayoutUpdate() {\n    this._onWindowResize();\n  }\n\n  public subscribe = (handler: Function): void => {\n    this._subscribers.add(handler);\n  };\n\n  public unsubscribe = (handler: Function): void => {\n    this._subscribers.delete(handler);\n  };\n\n  public addSticky = (sticky: Sticky): void => {\n    this._stickies.add(sticky);\n\n    // If ScrollablePane is mounted, then sort sticky in correct place\n    if (this.contentContainer) {\n      sticky.setDistanceFromTop(this.contentContainer);\n      this.sortSticky(sticky);\n    }\n  };\n\n  public removeSticky = (sticky: Sticky): void => {\n    this._stickies.delete(sticky);\n    this._removeStickyFromContainers(sticky);\n    this.notifySubscribers();\n  };\n\n  public sortSticky = (sticky: Sticky, sortAgain?: boolean): void => {\n    if (this.stickyAbove && this.stickyBelow) {\n      if (sortAgain) {\n        this._removeStickyFromContainers(sticky);\n      }\n      if (sticky.canStickyTop && sticky.stickyContentTop) {\n        this._addToStickyContainer(sticky, this.stickyAbove, sticky.stickyContentTop);\n      }\n\n      if (sticky.canStickyBottom && sticky.stickyContentBottom) {\n        this._addToStickyContainer(sticky, this.stickyBelow, sticky.stickyContentBottom);\n      }\n    }\n  };\n\n  public updateStickyRefHeights = (): void => {\n    const stickyItems = this._stickies;\n\n    let stickyTopHeight = 0;\n    let stickyBottomHeight = 0;\n\n    stickyItems.forEach((sticky: Sticky) => {\n      const { isStickyTop, isStickyBottom } = sticky.state;\n      if (sticky.nonStickyContent) {\n        if (isStickyTop) {\n          stickyTopHeight += sticky.nonStickyContent.offsetHeight;\n        }\n        if (isStickyBottom) {\n          stickyBottomHeight += sticky.nonStickyContent.offsetHeight;\n        }\n        this._checkStickyStatus(sticky);\n      }\n    });\n\n    this.setState({\n      stickyTopHeight: stickyTopHeight,\n      stickyBottomHeight: stickyBottomHeight,\n    });\n  };\n\n  public notifySubscribers = (): void => {\n    if (this.contentContainer) {\n      this._subscribers.forEach(handle => {\n        // this.stickyBelow is passed in for calculating distance to determine Sticky status\n        handle(this.contentContainer, this.stickyBelow);\n      });\n    }\n  };\n\n  public getScrollPosition = (): number => {\n    if (this.contentContainer) {\n      return this.contentContainer.scrollTop;\n    }\n\n    return 0;\n  };\n\n  public syncScrollSticky = (sticky: Sticky): void => {\n    if (sticky && this.contentContainer) {\n      sticky.syncScroll(this.contentContainer);\n    }\n  };\n\n  private _getScrollablePaneContext = (): IScrollablePaneContext => {\n    return {\n      scrollablePane: {\n        subscribe: this.subscribe,\n        unsubscribe: this.unsubscribe,\n        addSticky: this.addSticky,\n        removeSticky: this.removeSticky,\n        updateStickyRefHeights: this.updateStickyRefHeights,\n        sortSticky: this.sortSticky,\n        notifySubscribers: this.notifySubscribers,\n        syncScrollSticky: this.syncScrollSticky,\n      },\n    };\n  };\n\n  private _checkStickyStatus(sticky: Sticky): void {\n    if (this.stickyAbove && this.stickyBelow && this.contentContainer && sticky.nonStickyContent) {\n      // If sticky is sticky, then append content to appropriate container\n      if (sticky.state.isStickyTop || sticky.state.isStickyBottom) {\n        if (\n          sticky.state.isStickyTop &&\n          !this.stickyAbove.contains(sticky.nonStickyContent) &&\n          sticky.stickyContentTop\n        ) {\n          sticky.addSticky(sticky.stickyContentTop);\n        }\n\n        if (\n          sticky.state.isStickyBottom &&\n          !this.stickyBelow.contains(sticky.nonStickyContent) &&\n          sticky.stickyContentBottom\n        ) {\n          sticky.addSticky(sticky.stickyContentBottom);\n        }\n      } else if (!this.contentContainer.contains(sticky.nonStickyContent)) {\n        // Reset sticky if it's not sticky and not in the contentContainer element\n        sticky.resetSticky();\n      }\n    }\n  }\n\n  private _addToStickyContainer = (\n    sticky: Sticky,\n    stickyContainer: HTMLDivElement,\n    stickyContentToAdd: HTMLDivElement,\n  ): void => {\n    // If there's no children, append child to list, otherwise, sort though array and append at correct position\n    if (!stickyContainer.children.length) {\n      stickyContainer.appendChild(stickyContentToAdd);\n    } else {\n      // If stickyContentToAdd isn't a child element of target container, then append\n      if (!stickyContainer.contains(stickyContentToAdd)) {\n        const stickyChildrenElements: Element[] = [].slice.call(stickyContainer.children);\n\n        const stickyList: Sticky[] = [];\n        // Get stickies.  Filter by canStickyTop/Bottom, then sort by distance from top, and then\n        // filter by elements that are in the stickyContainer already.\n        this._stickies.forEach(stickyItem => {\n          if (stickyContainer === this.stickyAbove && sticky.canStickyTop) {\n            stickyList.push(stickyItem);\n          } else if (sticky.canStickyBottom) {\n            stickyList.push(stickyItem);\n          }\n        });\n\n        const stickyListSorted = stickyList\n          .sort((a, b) => {\n            return (a.state.distanceFromTop || 0) - (b.state.distanceFromTop || 0);\n          })\n          .filter(item => {\n            const stickyContent =\n              stickyContainer === this.stickyAbove ? item.stickyContentTop : item.stickyContentBottom;\n            if (stickyContent) {\n              return stickyChildrenElements.indexOf(stickyContent) > -1;\n            }\n            return false;\n          });\n\n        // Get first element that has a distance from top that is further than our sticky that is being added\n        let targetStickyToAppendBefore: Sticky | undefined = undefined;\n        for (const stickyListItem of stickyListSorted) {\n          if ((stickyListItem.state.distanceFromTop || 0) >= (sticky.state.distanceFromTop || 0)) {\n            targetStickyToAppendBefore = stickyListItem;\n            break;\n          }\n        }\n\n        // If target element to append before is known, grab respective stickyContentTop/Bottom element\n        // and insert before\n        let targetContainer: HTMLDivElement | null = null;\n        if (targetStickyToAppendBefore) {\n          targetContainer =\n            stickyContainer === this.stickyAbove\n              ? targetStickyToAppendBefore.stickyContentTop\n              : targetStickyToAppendBefore.stickyContentBottom;\n        }\n        stickyContainer.insertBefore(stickyContentToAdd, targetContainer);\n      }\n    }\n  };\n\n  private _removeStickyFromContainers = (sticky: Sticky): void => {\n    if (this.stickyAbove && sticky.stickyContentTop && this.stickyAbove.contains(sticky.stickyContentTop)) {\n      this.stickyAbove.removeChild(sticky.stickyContentTop);\n    }\n    if (this.stickyBelow && sticky.stickyContentBottom && this.stickyBelow.contains(sticky.stickyContentBottom)) {\n      this.stickyBelow.removeChild(sticky.stickyContentBottom);\n    }\n  };\n\n  private _onWindowResize = (): void => {\n    const scrollbarWidth = this._getScrollbarWidth();\n    const scrollbarHeight = this._getScrollbarHeight();\n\n    this.setState({\n      scrollbarWidth,\n      scrollbarHeight,\n    });\n\n    this.notifySubscribers();\n  };\n\n  private _getStickyContainerStyle = (height: number, isTop: boolean): React.CSSProperties => {\n    return {\n      height: height,\n      ...(getRTL(this.props.theme)\n        ? {\n            right: '0',\n            left: `${this.state.scrollbarWidth || this._getScrollbarWidth() || 0}px`,\n          }\n        : {\n            left: '0',\n            right: `${this.state.scrollbarWidth || this._getScrollbarWidth() || 0}px`,\n          }),\n      ...(isTop\n        ? {\n            top: '0',\n          }\n        : {\n            bottom: `${this.state.scrollbarHeight || this._getScrollbarHeight() || 0}px`,\n          }),\n    };\n  };\n\n  private _getScrollbarWidth(): number {\n    const { contentContainer } = this;\n    return contentContainer ? contentContainer.offsetWidth - contentContainer.clientWidth : 0;\n  }\n\n  private _getScrollbarHeight(): number {\n    const { contentContainer } = this;\n    return contentContainer ? contentContainer.offsetHeight - contentContainer.clientHeight : 0;\n  }\n\n  private _onScroll = () => {\n    const { contentContainer } = this;\n\n    if (contentContainer) {\n      this._stickies.forEach((sticky: Sticky) => {\n        sticky.syncScroll(contentContainer);\n      });\n    }\n\n    this._notifyThrottled();\n  };\n}\n", "import * as React from 'react';\nimport { ScrollablePaneBase } from './ScrollablePane.base';\nimport { Sticky } from '../Sticky/Sticky';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IStyle, ITheme } from '../../Styling';\n\n/**\n * {@docCategory ScrollablePane}\n */\nexport interface IScrollablePane {\n  /** Triggers a layout update for the pane. */\n  forceLayoutUpdate(): void;\n  /** Gets the current scroll position of the scrollable pane */\n  getScrollPosition(): number;\n}\n\n/**\n * {@docCategory ScrollablePane}\n */\nexport interface IScrollablePaneProps extends React.HTMLAttributes<HTMLElement | ScrollablePaneBase> {\n  // export interface IScrollablePaneProps extends React.Props<ScrollablePaneBase> {\n  /**\n   * Optional callback to access the IScrollablePane interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IScrollablePane>;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules\n   */\n  styles?: IStyleFunctionOrObject<IScrollablePaneStyleProps, IScrollablePaneStyles>;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Additional css class to apply to the ScrollablePane\n   * @defaultvalue undefined\n   */\n  className?: string;\n\n  /**\n   * Sets the initial scroll position of the ScrollablePane\n   */\n  initialScrollPosition?: number;\n\n  scrollbarVisibility?: ScrollbarVisibility;\n\n  /**\n   * Makes the scrollable container focusable, to aid with keyboard-only scrolling\n   * Should only be set to true if the scrollable region will not contain any other focusable items\n   * @defaultvalue false\n   */\n  scrollContainerFocus?: boolean;\n\n  /**\n   * If scrollContainerFocus is set to true, use this to give the container an accessible name\n   */\n  scrollContainerAriaLabel?: string;\n}\n\n/**\n * {@docCategory ScrollablePane}\n */\nexport interface IScrollablePaneStyleProps {\n  /**\n   * Accept theme prop.\n   */\n  theme: ITheme;\n\n  /**\n   * Accept custom classNames\n   */\n  className?: string;\n\n  scrollbarVisibility?: IScrollablePaneProps['scrollbarVisibility'];\n\n  // Insert ScrollablePane style props below\n}\n\n/**\n * {@docCategory ScrollablePane}\n */\nexport interface IScrollablePaneStyles {\n  /**\n   * Style set for the root element.\n   */\n  root: IStyle;\n  /**\n   * Style set for the stickyAbove element.\n   */\n  stickyAbove: IStyle;\n  /**\n   * Style set for the stickyBelow element.\n   */\n  stickyBelow: IStyle;\n  /**\n   * Style set for the stickyBelowItems element.\n   */\n  stickyBelowItems: IStyle;\n  /**\n   * Style set for the contentContainer element.\n   */\n  contentContainer: IStyle;\n}\n\n/**\n * {@docCategory ScrollablePane}\n */\nexport const ScrollbarVisibility = {\n  auto: 'auto' as 'auto',\n  always: 'always' as 'always',\n};\n\n/**\n * {@docCategory ScrollablePane}\n */\nexport type ScrollbarVisibility = typeof ScrollbarVisibility[keyof typeof ScrollbarVisibility];\n\nexport interface IScrollablePaneContext {\n  scrollablePane?: {\n    subscribe: (handler: (container: HTMLElement, stickyContainer: HTMLElement) => void) => void;\n    unsubscribe: (handler: (container: HTMLElement, stickyContainer: HTMLElement) => void) => void;\n    addSticky: (sticky: Sticky) => void;\n    removeSticky: (sticky: Sticky) => void;\n    updateStickyRefHeights: () => void;\n    sortSticky: (sticky: Sticky, sortAgain?: boolean) => void;\n    notifySubscribers: (sort?: boolean) => void;\n    syncScrollSticky: (sticky: Sticky) => void;\n  };\n}\n\nexport const ScrollablePaneContext = React.createContext<IScrollablePaneContext>({ scrollablePane: undefined });\n", "import * as React from 'react';\nimport { getStyles } from './ScrollablePane.styles';\nimport { ScrollablePaneBase } from './ScrollablePane.base';\nimport { styled } from '../../Utilities';\nimport type { IScrollablePaneProps, IScrollablePaneStyleProps, IScrollablePaneStyles } from './ScrollablePane.types';\n\nexport const ScrollablePane: React.FunctionComponent<IScrollablePaneProps> = styled<\n  IScrollablePaneProps,\n  IScrollablePaneStyleProps,\n  IScrollablePaneStyles\n>(ScrollablePaneBase, getStyles, undefined, { scope: 'ScrollablePane' });\n", "import * as React from 'react';\nimport { initializeComponentRef } from '../../Utilities';\nimport { hiddenContentStyle } from '../../Styling';\nimport { ScrollablePaneContext } from '../ScrollablePane/ScrollablePane.types';\nimport { StickyPositionType } from './Sticky.types';\nimport type { IScrollablePaneContext } from '../ScrollablePane/ScrollablePane.types';\nimport type { IStickyProps } from './Sticky.types';\n\nexport interface IStickyState {\n  isStickyTop: boolean;\n  isStickyBottom: boolean;\n  distanceFromTop?: number;\n}\n\nexport class Sticky extends React.Component<IStickyProps, IStickyState> {\n  public static defaultProps: IStickyProps = {\n    stickyPosition: StickyPositionType.Both,\n    isScrollSynced: true,\n  };\n\n  public static contextType = ScrollablePaneContext;\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _stickyContentTop = React.createRef<HTMLDivElement>();\n  private _stickyContentBottom = React.createRef<HTMLDivElement>();\n  private _nonStickyContent = React.createRef<HTMLDivElement>();\n  private _placeHolder = React.createRef<HTMLDivElement>();\n  private _activeElement: HTMLElement | undefined;\n\n  constructor(props: IStickyProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this.state = {\n      isStickyTop: false,\n      isStickyBottom: false,\n      distanceFromTop: undefined,\n    };\n    this._activeElement = undefined;\n  }\n\n  public get root(): HTMLDivElement | null {\n    return this._root.current;\n  }\n\n  public get placeholder(): HTMLDivElement | null {\n    return this._placeHolder.current;\n  }\n\n  public get stickyContentTop(): HTMLDivElement | null {\n    return this._stickyContentTop.current;\n  }\n\n  public get stickyContentBottom(): HTMLDivElement | null {\n    return this._stickyContentBottom.current;\n  }\n\n  public get nonStickyContent(): HTMLDivElement | null {\n    return this._nonStickyContent.current;\n  }\n\n  public get canStickyTop(): boolean {\n    return (\n      this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Header\n    );\n  }\n\n  public get canStickyBottom(): boolean {\n    return (\n      this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Footer\n    );\n  }\n\n  public syncScroll = (container: HTMLElement): void => {\n    const { nonStickyContent } = this;\n\n    if (nonStickyContent && this.props.isScrollSynced) {\n      nonStickyContent.scrollLeft = container.scrollLeft;\n    }\n  };\n\n  public componentDidMount(): void {\n    const { scrollablePane } = this._getContext();\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.subscribe(this._onScrollEvent);\n    scrollablePane.addSticky(this);\n  }\n\n  public componentWillUnmount(): void {\n    const { scrollablePane } = this._getContext();\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.unsubscribe(this._onScrollEvent);\n    scrollablePane.removeSticky(this);\n  }\n\n  public componentDidUpdate(prevProps: IStickyProps, prevState: IStickyState): void {\n    const { scrollablePane } = this._getContext();\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    const { isStickyBottom, isStickyTop, distanceFromTop } = this.state;\n    let syncScroll: boolean = false;\n    if (prevState.distanceFromTop !== distanceFromTop) {\n      scrollablePane.sortSticky(this, true /*sortAgain*/);\n      syncScroll = true;\n    }\n    if (prevState.isStickyTop !== isStickyTop || prevState.isStickyBottom !== isStickyBottom) {\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n      scrollablePane.updateStickyRefHeights();\n      syncScroll = true;\n    }\n    if (syncScroll) {\n      // Sync Sticky scroll position with content container on each update\n      scrollablePane.syncScrollSticky(this);\n    }\n  }\n\n  public shouldComponentUpdate(nextProps: IStickyProps, nextState: IStickyState): boolean {\n    if (!this.context.scrollablePane) {\n      return true;\n    }\n\n    const { isStickyTop, isStickyBottom, distanceFromTop } = this.state;\n\n    return (isStickyTop !== nextState.isStickyTop ||\n      isStickyBottom !== nextState.isStickyBottom ||\n      this.props.stickyPosition !== nextProps.stickyPosition ||\n      this.props.children !== nextProps.children ||\n      distanceFromTop !== nextState.distanceFromTop ||\n      _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentTop) ||\n      _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentBottom) ||\n      _isOffsetHeightDifferent(this._nonStickyContent, this._placeHolder)) as boolean;\n  }\n\n  public render(): JSX.Element {\n    const { isStickyTop, isStickyBottom } = this.state;\n    const { stickyClassName, children } = this.props;\n\n    if (!this.context.scrollablePane) {\n      return <div>{this.props.children}</div>;\n    }\n\n    return (\n      <div ref={this._root}>\n        {this.canStickyTop && (\n          <div ref={this._stickyContentTop} style={{ pointerEvents: isStickyTop ? 'auto' : 'none' }}>\n            <div style={this._getStickyPlaceholderHeight(isStickyTop)} />\n          </div>\n        )}\n        {this.canStickyBottom && (\n          <div ref={this._stickyContentBottom} style={{ pointerEvents: isStickyBottom ? 'auto' : 'none' }}>\n            <div style={this._getStickyPlaceholderHeight(isStickyBottom)} />\n          </div>\n        )}\n        <div style={this._getNonStickyPlaceholderHeightAndWidth()} ref={this._placeHolder}>\n          {(isStickyTop || isStickyBottom) && <span style={hiddenContentStyle as any}>{children}</span>}\n          <div\n            ref={this._nonStickyContent}\n            className={isStickyTop || isStickyBottom ? stickyClassName : undefined}\n            style={this._getContentStyles(isStickyTop || isStickyBottom)}\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  public addSticky(stickyContent: HTMLDivElement): void {\n    if (this.nonStickyContent) {\n      stickyContent.appendChild(this.nonStickyContent);\n    }\n  }\n\n  public resetSticky(): void {\n    if (this.nonStickyContent && this.placeholder) {\n      this.placeholder.appendChild(this.nonStickyContent);\n    }\n  }\n\n  public setDistanceFromTop(container: HTMLDivElement): void {\n    const distanceFromTop = this._getNonStickyDistanceFromTop(container);\n    this.setState({ distanceFromTop: distanceFromTop });\n  }\n\n  private _getContext = (): IScrollablePaneContext => this.context;\n\n  private _getContentStyles(isSticky: boolean): React.CSSProperties {\n    return {\n      backgroundColor: this.props.stickyBackgroundColor || this._getBackground(),\n      overflow: isSticky ? 'hidden' : '',\n    };\n  }\n\n  private _getStickyPlaceholderHeight(isSticky: boolean): React.CSSProperties {\n    const height = this.nonStickyContent ? this.nonStickyContent.offsetHeight : 0;\n    return {\n      visibility: isSticky ? 'hidden' : 'visible',\n      height: isSticky ? 0 : height,\n    };\n  }\n\n  private _getNonStickyPlaceholderHeightAndWidth(): React.CSSProperties {\n    const { isStickyTop, isStickyBottom } = this.state;\n    if (isStickyTop || isStickyBottom) {\n      let height = 0;\n      let width = 0;\n      // Why is placeholder width needed?\n      // ScrollablePane's content container is reponsible for providing scrollbars depending on content overflow.\n      // - If the overflow is caused by content of sticky component when it is in non-sticky state, the container will\n      //   provide horizontal scrollbar.\n      // - If the component becomes sticky, i.e., when state.isStickyTop || state.isStickyBottom becomes true,\n      //   its actual content is no longer inside the container, so the container will see no need for horizontal\n      //   scrollbar (assuming no other content is causing overflow). The complete content of sticky component will\n      //   not be viewable. So it is necessary to provide a placeholder of a certain width (height is already being set)\n      //   in the container, to get a horizontal scrollbar & be able to view the complete content of sticky component.\n      if (this.nonStickyContent && this.nonStickyContent.firstElementChild) {\n        height = this.nonStickyContent.offsetHeight;\n        // What value should be substituted for placeholder width?\n        // Assumptions:\n        //    1. Content inside <Sticky> should always be wrapped in a single div.\n        //        <Sticky><div id={'firstElementChild'}>{intended_content}</div><Sticky/>\n        //    2. -ve padding, margin, etc. are not be used.\n        //    3. scrollWidth of a parent is greater than or equal to max of scrollWidths of its children, and same holds\n        //       for children.\n        // placeholder width should be computed in the best possible way to prevent overscroll/underscroll.\n        width =\n          this.nonStickyContent.firstElementChild.scrollWidth +\n          ((this.nonStickyContent.firstElementChild as HTMLElement).offsetWidth -\n            this.nonStickyContent.firstElementChild.clientWidth);\n      }\n      return {\n        height: height,\n        width: width,\n      };\n    } else {\n      return {};\n    }\n  }\n\n  private _onScrollEvent = (container: HTMLElement, footerStickyContainer: HTMLElement): void => {\n    if (this.root && this.nonStickyContent) {\n      const distanceFromTop = this._getNonStickyDistanceFromTop(container);\n      let isStickyTop = false;\n      let isStickyBottom = false;\n\n      if (this.canStickyTop) {\n        const distanceToStickTop = distanceFromTop - this._getStickyDistanceFromTop();\n        isStickyTop = distanceToStickTop < container.scrollTop;\n      }\n\n      // Can sticky bottom if the scrollablePane - total sticky footer height is smaller than the sticky's distance\n      // from the top of the pane\n      if (this.canStickyBottom && container.clientHeight - footerStickyContainer.offsetHeight <= distanceFromTop) {\n        isStickyBottom =\n          distanceFromTop - Math.floor(container.scrollTop) >=\n          this._getStickyDistanceFromTopForFooter(container, footerStickyContainer);\n      }\n\n      if (\n        document.activeElement &&\n        this.nonStickyContent.contains(document.activeElement) &&\n        (this.state.isStickyTop !== isStickyTop || this.state.isStickyBottom !== isStickyBottom)\n      ) {\n        this._activeElement = document.activeElement as HTMLElement;\n      } else {\n        this._activeElement = undefined;\n      }\n\n      this.setState({\n        isStickyTop: this.canStickyTop && isStickyTop,\n        isStickyBottom: isStickyBottom,\n        distanceFromTop: distanceFromTop,\n      });\n    }\n  };\n\n  private _getStickyDistanceFromTop = (): number => {\n    let distance = 0;\n    if (this.stickyContentTop) {\n      distance = this.stickyContentTop.offsetTop;\n    }\n\n    return distance;\n  };\n\n  private _getStickyDistanceFromTopForFooter = (\n    container: HTMLElement,\n    footerStickyVisibleContainer: HTMLElement,\n  ): number => {\n    let distance = 0;\n    if (this.stickyContentBottom) {\n      distance =\n        container.clientHeight - footerStickyVisibleContainer.offsetHeight + this.stickyContentBottom.offsetTop;\n    }\n\n    return distance;\n  };\n\n  private _getNonStickyDistanceFromTop = (container: HTMLElement): number => {\n    let distance = 0;\n    let currElem = this.root;\n\n    if (currElem) {\n      while (currElem && currElem.offsetParent !== container) {\n        distance += currElem.offsetTop;\n        currElem = currElem.offsetParent as HTMLDivElement;\n      }\n\n      if (currElem && currElem.offsetParent === container) {\n        distance += currElem.offsetTop;\n      }\n    }\n    return distance;\n  };\n\n  // Gets background of nearest parent element that has a declared background-color attribute\n  private _getBackground(): string | undefined {\n    if (!this.root) {\n      return undefined;\n    }\n\n    let curr: HTMLElement = this.root;\n\n    while (\n      window.getComputedStyle(curr).getPropertyValue('background-color') === 'rgba(0, 0, 0, 0)' ||\n      window.getComputedStyle(curr).getPropertyValue('background-color') === 'transparent'\n    ) {\n      if (curr.tagName === 'HTML') {\n        // Fallback color if no element has a declared background-color attribute\n        return undefined;\n      }\n      if (curr.parentElement) {\n        curr = curr.parentElement;\n      }\n    }\n    return window.getComputedStyle(curr).getPropertyValue('background-color');\n  }\n}\n\nfunction _isOffsetHeightDifferent(a: React.RefObject<HTMLElement>, b: React.RefObject<HTMLDivElement>): boolean {\n  return (a && b && a.current && b.current && a.current.offsetHeight !== b.current.offsetHeight) as boolean;\n}\n", "import * as React from 'react';\nimport { Sticky } from './Sticky';\nimport type { IRefObject } from '../../Utilities';\n\n// eslint-disable-next-line deprecation/deprecation\nexport interface IStickyProps extends React.Props<Sticky> {\n  /**\n   * Gets ref to component interface.\n   */\n  componentRef?: IRefObject<IStickyProps>;\n\n  /**\n   * Class name to apply to the sticky element if component is sticky.\n   */\n  stickyClassName?: string;\n\n  /**\n   * color to apply as 'background-color' style for sticky element.\n   */\n  stickyBackgroundColor?: string;\n\n  /**\n   * Region to render sticky component in.\n   * @defaultvalue Both\n   */\n  stickyPosition?: StickyPositionType;\n\n  /**\n   * If true, then match scrolling position of placeholder element in Sticky.\n   * @defaultvalue true\n   */\n  isScrollSynced?: boolean;\n}\n\nexport enum StickyPositionType {\n  Both = 0,\n  Header = 1,\n  Footer = 2,\n}\n", "/** @jsx jsx */\nimport { css, jsx } from '@emotion/react'\nimport { IColumn } from '@fluentui/react'\nimport format from 'date-fns/format'\nimport get from 'lodash.get'\nimport { Context, useContext } from 'react'\nimport { useRender } from 'web-utils/src/useRender'\nimport {\n  IBaseListContext,\n  IBaseListRowMeta\n} from '../../../../ext/types/__list'\nimport { BaseField } from '../../form/BaseField'\nimport { initializeForm } from '../../form/BaseForm'\nimport NiceValue from '../../legacy/NiceValue'\n\nexport const BaseListWebCol = ({\n  ctx,\n  row,\n  idx,\n  colDef,\n}: {\n  ctx: Context<IBaseListContext>\n  colDef: IColumn\n  row: Record<string, any> & { __listMeta: IBaseListRowMeta }\n  idx: number\n}) => {\n  const state = useContext(ctx)\n  const render = useRender()\n  const col = colDef.fieldName\n  const colIdx = (colDef as any).idx\n  row.__listMeta.columns[col].render = render\n\n  if (typeof state.table.editable === 'function' && row.__listMeta.editable) {\n    const form = row.__listMeta.editable\n\n    const editable = state.table.editable({\n      row,\n      col,\n      list: state.db.list,\n      idx,\n      state,\n    })\n\n    if (editable) {\n      if (typeof editable === 'object') {\n        form.state.config.alter[col] = {\n          ...form.state.config.alter[col],\n          ...editable,\n        }\n      }\n\n      if (form.state.config.layout.indexOf(col) < 0) {\n        form.state.config.layout.push(col)\n        initializeForm(form.state, form.ctx, render).then(render)\n      }\n\n      if (form.state.config.fields[col] && form.state.fieldTypes) {\n        return (\n          <form.ctx.Provider value={form.state}>\n            <>\n              <BaseField\n                wrapper={({ children }) => (\n                  <div\n                    className=\"flex flex-1 self-stretch items-center\"\n                    css={css`\n                      > * {\n                        flex: 1;\n                      }\n                    `}\n                  >\n                    {children}\n                  </div>\n                )}\n                ctx={form.ctx}\n                name={col}\n              />\n            </>\n          </form.ctx.Provider>\n        )\n      }\n    }\n  }\n\n  return (\n    <>\n      {renderValue({\n        state,\n        row,\n        idx,\n        colIdx,\n        rowState: row.__listMeta,\n      })}\n    </>\n  )\n}\n\nconst renderValue = ({\n  state,\n  colIdx,\n  row,\n  idx,\n  rowState,\n}: {\n  state: IBaseListContext\n  row: any\n  idx: number\n  colIdx: number\n  rowState: any\n}) => {\n  const mdb = state.db\n  let colDef = state.table.columns[colIdx]\n  if (colDef) {\n    if (typeof colDef === 'function') {\n      const result = colDef(row)\n      return (\n        <>\n          <div className=\"ui-querylist-custom\">{result.value}</div>\n        </>\n      )\n    }\n  }\n  let colName = ''\n  if (Array.isArray(colDef)) {\n    colName = colDef[0]\n    if (colDef[1] && typeof colDef[1].value === 'function') {\n      return <>{colDef[1].value(row, idx, { list: state, row: rowState })}</>\n    }\n  }\n\n  if (typeof colDef === 'string') {\n    colName = colDef\n  }\n\n  const def = get(mdb, `definition.columns.${colName}`)\n  let value = get(row, colName)\n\n  if (value) {\n    if (def) {\n      switch (def.type.toLowerCase()) {\n        case 'date':\n          if (typeof value === 'string') {\n            return format(new Date(value), 'dd MMM yyyy - HH:mm')\n          }\n          break\n      }\n    }\n\n    if (typeof value === 'object')\n      return <NiceValue value={value} compact={true} />\n    return <>{value}</>\n  }\n  return '-'\n}\n", "/** @jsx jsx */\nimport { css, jsx } from '@emotion/react'\nimport { Context, createContext, ReactElement, useContext, useRef } from 'react'\nimport { useRender } from 'web-utils/src/useRender'\nimport { IBaseFormContext } from '../../../../ext/types/__form'\nimport {\n  IBaseListContext,\n  IBaseListRowMeta,\n} from '../../../../ext/types/__list'\nimport { createFormContext } from '../../form/BaseForm'\n\nexport const BaseListWebRow = (props: {\n  row: Record<string, any> & { __listMeta: IBaseListRowMeta }\n  idx: number\n  children: (props: any) => ReactElement\n  ctx: Context<IBaseListContext>\n  rowProps: any\n}) => {\n  const _ = useRef({\n    cursorPointer: true,\n    children: null as null | ReactElement,\n  })\n  const { row, children, ctx, idx } = props\n  const state = useContext(ctx)\n  const mtbl = state.table\n  const meta = _.current\n  const render = useRender()\n\n  if (typeof state.table.editable === 'function' && !row.__listMeta.editable) {\n    initEditable({ state, idx, row, render })\n  }\n\n  if (mtbl.customRenderRow) {\n    meta.children = mtbl.customRenderRow({\n      children: children(props.rowProps),\n      index: idx,\n      list: state.db.list,\n      row,\n      state,\n    })\n  } else {\n    meta.children = children(props.rowProps)\n  }\n\n  if (!mtbl.onRowClick || mtbl.isRowClickable === false) {\n    meta.cursorPointer = false\n  }\n\n  if (!row.__listMeta || !meta.children) {\n    return null\n  }\n\n  row.__listMeta.render = () => {\n    render()\n    for (let col of Object.values(row.__listMeta.columns)) {\n      col.render()\n    }\n  }\n\n  let cursor = '';\n  if (meta.cursorPointer) {\n    cursor = 'cursor-pointer'\n  }\n\n  if (state.db.loading || state.db.partialLoading) {\n    cursor = 'cursor-wait'\n  }\n\n  let rowBody = (\n    <>\n      <div\n        className={`flex flex-1 items-stretch ${cursor}`}\n        css={css`\n          > div {\n            flex: 1;\n          }\n        `}\n        onClick={(ev) => {\n          if (mtbl.onRowClick) {\n            mtbl.onRowClick(row, idx, ev, state)\n          }\n        }}\n      >\n        {!!mtbl.customRenderRow\n          ? mtbl.customRenderRow({\n              row: row,\n              list: state.db.list,\n              index: idx,\n              state,\n              children: meta.children,\n            })\n          : meta.children}\n      </div>\n    </>\n  )\n\n  let final = rowBody\n  if (mtbl.wrapRow) {\n    final = mtbl.wrapRow({ children: rowBody, row, state })\n  }\n\n  const editable = row.__listMeta.editable\n  if (editable && editable.ctx && editable.ctx.Provider) {\n    return (\n      <editable.ctx.Provider value={editable.state}>\n        {final}\n      </editable.ctx.Provider>\n    )\n  }\n  return final\n}\n\nconst initEditable = ({\n  row,\n  state,\n  render,\n  idx,\n}: {\n  row: Record<string, any> & { __listMeta: IBaseListRowMeta }\n  state: IBaseListContext\n  render: () => void\n  idx: number\n}) => {\n  // row.__listMeta.editable = {\n  //   ctx: createContext({} as IBaseFormContext),\n  //   state: createFormContext(\n  //     {\n  //       table: state.db.tableName,\n  //       data: row,\n  //       alter: {},\n  //       layout: [],\n  //     },\n  //     () => {}\n  //   ),\n  // }\n  // const initForm = row.__listMeta.editable\n  // initForm.state.tree.parent = state\n  // initForm.state.component.render = () => {\n  //   render()\n  //   for (let v of Object.values(initForm.state.config.fields)) {\n  //     if (v && v.state) v.state.render()\n  //   }\n  // }\n  // initForm.state.db.definition = state.db.definition\n}\n"],
  "mappings": "8sCACA,MAAyB,QCDzB,OAAuB,OAOvB,GAAM,IAAgB,IAEtB,GAAA,SAAA,EAAA,CAAiC,EAAA,EAAA,GAAjC,YAAA,CAAA,GAAA,GAAA,IAAA,MAAA,EAAA,MAAA,KAAA,YAAA,KA2DU,SAAA,iBAAmB,SAAC,EAAoB,CAC9C,MAAI,OAAO,GAAM,SAAY,SACpB,AAAA,iBAAA,IAAA,CAAG,UAAW,EAAK,YAAY,SAAU,EAAM,SAE/C,AAAA,iBAAA,MAAA,CAAK,UAAW,EAAK,YAAY,SAAU,EAAM,YA/D9D,0BAgBS,EAAA,UAAA,OAAP,UAAA,CACQ,GAAA,GAWF,KAAK,MAVP,EAAS,EAAA,UACT,EAAY,EAAA,aACZ,EAAe,EAAA,gBACf,EAAqB,EAAA,sBACrB,EAAM,EAAA,OACN,EAAE,EAAA,GACF,EAAQ,EAAA,SACR,EAAA,EAAA,gBAAA,EAAe,IAAA,OAAG,KAAK,iBAAgB,EACvC,EAAa,EAAA,cACb,EAAK,EAAA,MAGP,YAAK,YAAc,GAAc,EAAS,CACxC,MAAO,EACP,UAAW,GAAc,GAAgB,EAAa,UACtD,UAAW,GAAgB,EAAa,UACxC,SAAU,GAAgB,EAAa,SACvC,SAAU,IAIV,AAAA,iBAAC,GAAO,EAAA,CACN,OAAQ,EACR,gBAAiB,EACjB,sBAAuB,GACnB,EACA,GAAe,KAAK,MAAO,GAAe,CAAC,OAAM,CACrD,UAAW,KAAK,YAAY,OAE5B,AAAA,iBAAA,MAAA,CACE,UAAW,KAAK,YAAY,QAC5B,GAAI,EACJ,aAAc,KAAK,MAAM,aACzB,aAAc,KAAK,MAAM,cAExB,EAAgB,KAAK,MAAO,KAAK,qBAnD5B,EAAA,aAAuC,CACnD,gBAAiB,GAAgB,UACjC,SAAU,QACV,aAAc,CACZ,cAAe,GACf,UAAW,GACX,SAAU,EACV,gBAAiB,GACjB,WAAY,KAwDlB,GAlEuC,cCNhC,GAAM,IAAY,WAAC,EAAyB,CACzC,GAAA,GAA6D,EAAK,UAAvD,EAAkD,EAAK,UAAvD,EAAS,IAAA,OAAG,GAAE,EAAE,EAAkC,EAAK,SAAvC,EAAQ,IAAA,OAAG,EAAC,EAAE,EAAoB,EAAK,SAAf,EAAU,EAAK,MAClE,EAAmC,EAAK,eAAxB,EAAmB,EAAK,MAAjB,EAAY,EAAK,QAK1C,EAAkB,CAAE,MAAK,KAAM,EAAY,EAAa,GAAK,GAAY,EAAI,OAAO,iBAE1F,MAAO,CACL,KAAM,CACJ,aACA,EAAM,MAAM,OACZ,GAAoB,UACpB,CACE,WAAY,EAAe,eAC3B,UAAW,EAAQ,WACnB,QAAS,MACT,SAAU,EACV,UAAW,CACT,SAAU,CACR,QAAS,KACT,SAAU,WACV,OAAQ,EACR,KAAM,EACN,MAAO,EACP,IAAK,EACL,OAAQ,KAId,GAEF,QAAS,CACP,qBACA,EAAM,MACN,CACE,SAAU,WACV,OAAQ,EACR,MAAO,EAAe,aACtB,SAAU,aACV,aAAc,aACd,SAAU,WAGd,QAAS,CACP,qBACA,CAEE,SAAU,UACV,WAAY,UACZ,MAAO,UACP,OAAQ,MApDS,aCGlB,GAAM,IAAkD,EAI7D,GAAa,GAAW,OAAW,CACnC,MAAO,YCsET,GAAY,IAAZ,AAAA,UAAY,EAAY,CACtB,EAAA,EAAA,KAAA,GAAA,OAEA,EAAA,EAAA,OAAA,GAAA,SAEA,EAAA,EAAA,KAAA,GAAA,SALU,IAAA,IAAY,KCjFxB,OAAuB,OC2BvB,GAAY,IAAZ,AAAA,UAAY,EAAmB,CAE7B,EAAA,EAAA,OAAA,GAAA,SAMA,EAAA,EAAA,KAAA,GAAA,SARU,IAAA,IAAmB,KDH/B,GAAM,IAAgB,IAEtB,GAAA,SAAA,EAAA,CAAqC,EAAA,EAAA,GAkBnC,WAAY,EAAwB,CAApC,GAAA,GACE,EAAA,KAAA,KAAM,IAAM,KAXN,SAAA,aAAe,AAAM,eAMrB,EAAA,kBAAoB,GAAM,WAiG3B,EAAA,KAAO,UAAA,CACZ,EAAK,eAAe,KAGf,EAAA,QAAU,UAAA,CACf,EAAK,gBAGC,EAAA,kBAAoB,UAAA,CAC1B,GAAI,EAAC,EAAK,aAAa,QAIf,IAAA,GAAiB,EAAK,MAAK,aAInC,GAAI,IAAiB,OACnB,OAAQ,OACD,IAAoB,OACvB,MAAO,GAAK,aAAa,QAAQ,kBAE9B,IAAoB,KACvB,MAAO,GAAK,aAAa,QAI/B,MAAO,GAAK,aAAa,UAGnB,EAAA,gBAAkB,SAAC,EAAiC,CAC1D,GAAI,EAAK,sBAAuB,CAC9B,EAAK,sBAAwB,GAC7B,OAGF,EAAK,qBAAqB,IAGpB,EAAA,eAAiB,SAAC,EAAiC,CAOzD,EAAK,sBAAwB,WAAQ,KAAA,OAAR,SAAU,iBAAkB,EAAG,OAE5D,EAAK,gBAIC,EAAA,qBAAuB,SAAC,EAAO,CAC/B,GAAA,GAA0B,EAAK,MAA7B,EAAY,EAAA,aAAE,EAAK,EAAA,MAO3B,GALI,EAAgB,wBAA0B,EAAgB,yBAA2B,GACvF,EAAgB,uBAAuB,UAEzC,EAAgB,uBAAyB,EAErC,IAAiB,OAAW,CAC9B,GAAM,GAAkB,EAAK,oBAC7B,GAAI,GAAmB,CAAC,GAAY,GAClC,OAIJ,GAAI,IAAG,QAAU,GAAsB,EAAG,OAAuB,EAAK,sBAQtE,GAHA,EAAK,qBACL,EAAK,kBAED,IAAU,GAAa,KAAM,CAC/B,EAAK,SAAS,CAAE,0BAA2B,KAC3C,GAAM,GAAY,EAAK,cAAc,GAErC,EAAK,aAAe,EAAK,OAAO,WAAW,UAAA,CACzC,EAAK,eAAe,KACnB,OAEH,GAAK,eAAe,KAKhB,EAAA,qBAAuB,SAAC,EAAO,CAC7B,GAAA,GAAe,EAAK,MAAK,WAEjC,EAAK,qBACL,EAAK,kBAEL,AAAI,EACF,EAAK,gBAAkB,EAAK,OAAO,WAAW,UAAA,CAC5C,EAAK,eAAe,KACnB,GAEH,EAAK,eAAe,IAGlB,EAAgB,yBAA2B,GAC7C,GAAgB,uBAAyB,SAIrC,EAAA,kBAAoB,SAAC,EAAoC,CAE/D,AAAK,GAAG,QAAU,EAAS,QAAU,EAAG,UAAY,EAAK,MAAM,kBAC7D,GAAK,eACL,EAAG,oBAIC,EAAA,mBAAqB,UAAA,CAC3B,EAAK,OAAO,aAAa,EAAK,kBAGxB,EAAA,gBAAkB,UAAA,CACxB,EAAK,OAAO,aAAa,EAAK,eAIxB,EAAA,aAAe,UAAA,CACrB,EAAK,kBACL,EAAK,qBACL,EAAK,eAAe,KAGd,EAAA,eAAiB,SAAC,EAAyB,CACjD,AAAI,EAAK,MAAM,mBAAqB,GAClC,EAAK,SACH,CAAE,0BAA2B,GAAO,iBAAgB,GACpD,UAAA,CAAM,MAAA,GAAK,MAAM,iBAAmB,EAAK,MAAM,gBAAgB,MAK7D,EAAA,cAAgB,SAAC,EAAmB,CAC1C,OAAQ,OACD,IAAa,OAChB,MAAO,SACJ,IAAa,KAChB,MAAO,aAEP,MAAO,KA5OX,EAAuB,GAEvB,EAAK,MAAQ,CACX,0BAA2B,GAC3B,iBAAkB,IAGpB,EAAK,OAAS,GAAI,IAAM,KAV1B,8BAcO,EAAA,UAAA,OAAP,UAAA,CACQ,GAAA,GAaF,KAAK,MAZP,EAAY,EAAA,aACZ,EAAQ,EAAA,SACR,EAAO,EAAA,QACP,EAAe,EAAA,gBACf,EAAqB,EAAA,sBACN,EAAS,EAAA,cACxB,EAAE,EAAA,GAEF,EAAA,EAAA,mBAAA,EAAkB,IAAA,OAAG,GAAI,EACzB,EAAY,EAAA,aACZ,EAAM,EAAA,OACN,EAAK,EAAA,MAGP,KAAK,YAAc,GAAc,EAAS,CACxC,MAAO,EACP,UAAS,IAGL,GAAA,GAAkD,KAAK,MAArD,EAAyB,EAAA,0BAAE,EAAgB,EAAA,iBAC7C,EAAY,GAAM,KAAK,kBACvB,EAAmB,CAAC,CACxB,IACC,GAAgB,EAAa,iBAAmB,EAAa,mBAE1D,EAAc,GAAoB,EAClC,EAAkB,GAAsB,GAAoB,EAAmB,EAAY,OAEjG,MACE,AAAA,kBAAA,MAAA,EAAA,CACE,UAAW,KAAK,YAAY,KAC5B,IAAK,KAAK,cACN,CAAE,eAAgB,KAAK,iBACvB,CAAE,cAAe,KAAK,gBAAgB,CAC1C,aAAc,KAAK,qBACnB,aAAc,KAAK,qBACnB,UAAW,KAAK,kBAChB,KAAK,OAAM,mBAEO,IAEjB,EACA,GACC,AAAA,iBAAC,GAAO,EAAA,CACN,GAAI,EACJ,QAAS,EACT,cAAe,KAAK,oBACpB,gBAAiB,EACjB,sBAAuB,EACvB,aAAc,GAAO,GAAI,EAAc,CACrC,UAAW,KAAK,aAChB,aAAc,KAAK,qBACnB,aAAc,KAAK,uBAErB,aAAc,KAAK,qBACnB,aAAc,KAAK,sBACf,GAAe,KAAK,MAAO,IAC3B,IAGP,GACC,AAAA,iBAAA,MAAA,CAAK,GAAI,EAAW,KAAK,OAAO,MAAO,IACpC,KAOJ,EAAA,UAAA,qBAAP,UAAA,CACE,AAAI,EAAgB,wBAA0B,EAAgB,yBAA2B,MACvF,GAAgB,uBAAyB,QAG3C,KAAK,OAAO,WA3GA,EAAA,aAAe,CAC3B,MAAO,GAAa,QAkQxB,GApQ2C,cEvB3C,GAAM,IAAmB,CACvB,KAAM,iBACN,gBAAiB,mCAGN,GAAY,WAAC,EAA6B,CAC7C,GAAA,GAAqB,EAAK,UAAf,EAAU,EAAK,MAC5B,EAAa,EAAoB,GAAkB,GAEzD,MAAO,CACL,KAAM,CACJ,EAAW,KACX,CACE,QAAS,UAEX,KAVmB,aCFlB,GAAM,IAA0D,EAIrE,GAAiB,GAAW,OAAW,CACvC,MAAO,gBCXT,OAAuB,OCAvB,OAAuB,OAKvB,GAAM,IAAgB,IAMT,GAAU,WAAC,EAAmB,EAAoC,CACrE,GAAA,GAAqE,EAAK,GAAtE,EAAiE,EAAK,UAA3D,EAAsD,EAAK,SAAjD,EAA4C,EAAK,KAA3C,EAAsC,EAAK,QAAlC,EAA6B,EAAK,OAA1B,EAAqB,EAAK,MAAnB,EAAc,EAAK,UAC5E,EAAU,AAAM,UAA8B,MAC9C,EAAyC,GAAc,EAAS,GAEtE,GAAgB,EAAO,GACvB,GAAc,GAEd,GAAM,GAAa,GAAc,EAAS,CACxC,UAAS,EACT,SAAU,CAAC,EACX,WAAY,EACZ,aAAc,EACd,MAAO,IAGH,EAAW,WAAC,EAA2D,CAC3E,AAAI,EACF,EAAG,iBACM,GACT,EAAQ,IAJK,YAQX,EAAW,GAAU,GAAO,IAAM,UAElC,EAAQ,GACR,EAAQ,CAAE,KAAM,GAChB,EAAY,CAChB,KAAI,EAAA,EAAA,GACC,GAAuB,EAAU,IAAM,CAC1C,gBAAiB,EACjB,UAAW,EAAW,KACtB,QAAS,EACT,IAAK,KAIT,MAAO,CAAE,MAAK,EAAE,MAAK,EAAE,UAAS,IAtCX,WAyCjB,GAAkB,WAAC,EAAmB,EAA4B,CACtE,AAAM,uBACJ,EAAM,aACN,UAAA,CAAM,MAAC,CACL,MAAK,UAAA,CACH,AAAI,EAAK,SACP,EAAK,QAAQ,WAInB,CAAC,KAVmB,mBAclB,GAAyB,WAC7B,EACA,EAAuC,CAK/B,GAAA,GAAgG,EAAK,GAAjG,EAA4F,EAAK,SAAvF,EAAkF,EAAK,OAA/E,EAA0E,EAAK,KAAzE,EAAoE,EAAK,MAAlE,EAA6D,EAAK,UAAvD,EAAkD,EAAK,OAA/C,EAA0C,EAAK,aAAjC,EAA4B,EAAK,UAAnB,EAAS,GAAK,EAAlG,CAAA,KAAA,WAAA,SAAA,OAAA,QAAA,YAAA,SAAA,eAAA,cAGN,MAAI,OAAO,IAAa,SAElB,IAAa,IACf,EAAA,CACE,OAAM,EACN,KAAM,EAAW,OAAY,GAC1B,GAKH,IAAa,SACf,EAAA,CACE,KAAM,SACN,SAAQ,GACL,GAKP,EAAA,EAAA,GAAY,GAAS,CAAE,SAAQ,IAIjC,EAAA,CAAS,OAAM,EAAE,KAAI,EAAE,SAAQ,GAAK,IAlCP,0BD9DxB,GAAM,IAAgD,AAAM,cAAoC,SAAC,EAAO,EAAG,CAC1G,GAAA,GAAuB,GAAQ,EAAO,GAApC,EAAK,EAAA,MAAE,EAAS,EAAA,UAExB,MAAO,AAAA,kBAAC,EAAM,KAAI,EAAA,GAAK,EAAU,SAGnC,GAAS,YAAc,WEPhB,GAAM,IAAmB,CAC9B,KAAM,WAGK,GAAY,WAAC,EAAsB,iBACtC,EAAyD,EAAK,UAAnD,EAA8C,EAAK,SAAzC,EAAoC,EAAK,WAA7B,EAAwB,EAAK,aAAf,EAAU,EAAK,MAC9D,EAAmB,EAAK,eAG1B,EAAY,EAAe,KAC3B,EAAsB,EAAe,YACrC,EAAoB,EAAe,aACnC,EAAmB,EAAe,YAElC,EAAa,EAAoB,GAAkB,GAEzD,MAAO,CACL,KAAM,CACJ,EAAW,KACX,EAAM,MAAM,OACZ,CACE,MAAO,EACP,QAAS,OACT,SAAU,UACV,WAAY,UACZ,eAAgB,EAAe,YAAc,OAE7C,UAAS,GAAA,CACP,qCAAsC,CAKpC,UAAW,aAAa,EAAgB,SACxC,QAAS,YAAY,EACrB,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,QAAS,6BAIf,EAAC,GAAuB,CAEtB,aAAc,YAIpB,GAAY,CACV,WAAY,OACZ,gBAAiB,cACjB,OAAQ,OACR,OAAQ,UACR,QAAS,SACT,OAAQ,EACR,SAAU,UACV,QAAS,EACT,UAAW,OACX,aAAc,UACd,WAAY,OACZ,aAAc,wBACd,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,MAAO,WACP,kBAAmB,YAIzB,CAAC,GAAY,CACX,UAAS,GAAA,GACP,EAAC,GAAuB,CAEtB,qBAAsB,OACtB,kBAAmB,YAKzB,GAAc,CACZ,cACA,CACE,MAAO,EACP,OAAQ,WAEV,CACE,UAAW,CACT,oBAAqB,CACnB,cAAe,WAKvB,CAAC,GAAc,CACb,UAAW,CACT,oCAAqC,CACnC,MAAO,EACP,eAAgB,YAEhB,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,MAAO,gBAIb,UAAW,CACT,MAAO,EAEP,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,MAAO,kBAMjB,EAAW,KACX,KA/GmB,aCDlB,GAAM,IAA4C,EACvD,GACA,GACA,OACA,CACE,MAAO,SCXX,OAAuB,OAKvB,GAAM,IAAgB,IAET,GAAkD,AAAM,cACnE,SAAC,EAAO,EAAG,CACD,GAAA,GAAmE,EAAK,QAAxE,EAAO,IAAA,OAAG,GAAK,EAAE,EAAkD,EAAK,UAA5C,EAAuC,EAAK,MAArC,EAAgC,EAAK,OAA7B,EAAwB,EAAK,aAA7B,EAAY,IAAA,OAAG,GAAI,EAEhE,EAAa,GAAc,EAAS,CAAE,MAAO,EAAQ,UAAS,EAAE,QAAO,IACvE,EAAgB,EAAe,GAAW,GAEhD,MACE,AAAA,kBAAA,MAAA,CAAK,UAAW,EAAW,KAAM,IAAK,GACpC,AAAA,iBAAC,EAAa,CAAC,SAAS,aAAa,UAAW,EAAW,SAC3D,AAAA,iBAAC,EAAa,CAAC,SAAS,wBAAwB,UAAW,EAAW,WAK9E,GAAU,YAAc,YCjBjB,GAAM,IAAwB,CACnC,KAAM,WACN,OAAQ,kBACR,MAAO,iBAEP,UAAW,sBAGA,GAAY,WAAC,EAAuB,eAEvC,EAAuE,EAAK,OAA5E,EAAM,IAAA,OAAG,EAAM,gBAAkB,OAAM,EAAE,EAA8B,EAAK,QAA1B,EAAqB,EAAK,UAAf,EAAU,EAAK,MAE5E,EAAmC,EAAK,QAA/B,EAA0B,EAAK,eAAf,EAAU,EAAK,MAC1C,EAAQ,GAAO,GAEf,EAAa,EAAoB,GAAuB,GAExD,EAA4B,CAChC,SAAU,EACV,SAAU,WACV,KAAM,EACN,IAAK,EACL,MAAO,EACP,OAAQ,EACR,UAAW,SAEX,QAAS,cACT,WAAY,SACZ,eAAgB,SAChB,cAAe,UAGjB,MAAO,CACL,KAAM,CACJ,EAAW,KACX,EAAM,OACN,CAEE,WAAY,IACZ,MAAO,EACP,OAAQ,EACR,cAAe,MACf,SAAU,WACV,WAAY,OAEZ,UAAS,GAAA,CACP,UAAW,CACT,QAAS,KACT,SAAU,WACV,IAAK,MACL,MAAO,MACP,OAAQ,MACR,KAAM,MACN,aAAc,MACd,QAAS,EACT,WAAY,EAAe,iBAG7B,EAAC,IAAI,EAAW,UAAS,cAAc,EAAW,UAAS,8BAA+B,CACxF,QAAS,OAKf,GAAW,CACT,aACA,CACE,UAAW,CACT,UAAW,CACT,WAAY,EAAQ,aACpB,QAAS,EACT,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,WAAY,iBAOxB,GAGF,OAAQ,CACN,EAAW,OACX,EAEA,CACE,MAAO,EAAQ,iBAEf,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,MAAO,kBAKb,GAAW,CACT,MAAO,EAAQ,QAInB,MAAO,CACL,EAAW,MACX,EAEA,CACE,QAAS,EACT,MAAO,EAAQ,iBACf,SAAU,GAAc,OACxB,KAAM,EAAQ,SAAW,OACzB,IAAK,OAEL,UAAS,GAAA,CACP,SAAU,CACR,QAAS,IAGX,EAAC,GAAoB,EAAA,GAChB,UAKT,GAAW,CACT,QAAS,EACT,MAAO,EAAQ,MACf,WAAY,IAEZ,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,OAAQ,OACR,MAAO,mBAMf,UAAW,EAAW,YAlID,aCPlB,GAAM,IAA8C,EACzD,GACA,GACA,OACA,CACE,MAAO,SAET,ICbF,OAAuB,OCOhB,GAAM,IAAe,CAI1B,KAAM,EAIN,IAAK,EAIL,OAAQ,EAIR,OAAQ,GDEV,GAAM,IAAe,GACf,GAA0B,IAC1B,GAA0B,IAC1B,GAAsB,IAEtB,GAAsB,IACtB,GAAyB,GACzB,GAAsB,GACtB,GAAkC,EAClC,GAAiC,EACjC,GAAkB,QAClB,GAAoB,UAoBpB,GAAa,CACjB,IAAK,GACL,OAAQ,GACR,KAAM,GACN,MAAO,GACP,MAAO,EACP,OAAQ,GAIJ,GAAmB,WAAC,EAAoB,CAAK,MAAA,GAAQ,yBAAlC,oBACnB,GAAsB,GACtB,GAAqB,GAyB3B,GAAA,SAAA,EAAA,CAAmC,EAAA,EAAA,GAuDjC,WAAY,EAAoB,CAAhC,GAAA,GACE,EAAA,KAAA,KAAM,IAAM,KAhDN,SAAA,MAAQ,AAAM,eACd,EAAA,SAAW,AAAM,eACjB,EAAA,UAAqC,GAkXrC,EAAA,0BAA4B,SAAC,EAA0B,EAA4B,CACzF,MACE,GAAU,QAAU,EAAK,MAAM,OAC/B,EAAU,cAAgB,EAAK,MAAM,aACrC,EAAU,aAAe,EAAK,MAAM,YACpC,EAAU,UAAY,EAAK,MAAM,QAIjC,GAAK,wBACL,EAAK,cAAgB,KAErB,EAAK,kBACL,EAAK,uBAEE,EAAK,aAAa,EAAW,IAG/B,GAyDD,EAAA,cAAgB,SAAC,EAAgC,CAC/C,GAAA,GAAsC,EAAK,QAAlC,EAA6B,EAAK,eAAlB,EAAa,EAAK,SAEnD,MACE,AAAA,kBAAA,MAAA,EAAA,CAAK,IAAK,GAAa,GACpB,IAKC,EAAA,iBAAmB,SAAC,EAAmC,CACrD,GAAA,GAAuC,EAAK,WAAhC,EAA2B,EAAK,aAAlB,EAAa,EAAK,SAEpD,MACE,AAAA,kBAAA,MAAA,EAAA,CAAK,IAAK,GAAgB,GACvB,IAmBC,EAAA,cAAgB,SAAC,EAA0B,EAA8C,CAY/F,OAXM,GAAyB,EAAK,MAA5B,EAAY,EAAA,aAAE,EAAI,EAAA,KAGxB,EAEE,EAAS,KAFH,EAAA,EAAA,MAAA,EAAK,IAAA,OAAG,GAAE,EAAE,EAAU,EAAA,WAC3B,EAAQ,GACT,EAHE,CAAA,SAMA,EAAW,IAAS,OAAY,WAAa,eAC7C,EAA2B,GAExB,EAAI,EAAG,EAAI,EAAM,OAAQ,IAAK,CACrC,GAAM,GAAQ,EAAa,EACrB,EAAO,EAAM,GAEf,EAAU,EAAK,MAAM,OAAS,EAAK,MAAM,OAAO,EAAM,GAAS,GAAS,EAAa,IAEzF,AAAI,GAAY,MACd,GAAU,GAGZ,EAAM,KACJ,AAAA,iBAAA,MAAA,CACE,KAAM,EACN,UAAW,eACX,IAAK,EAAO,kBACK,EAAK,oBACJ,YAEjB,GACC,EAAa,EAAM,EAAO,AAAC,EAAK,MAAM,qBAAgD,OAAzB,EAAK,MAAM,eAKhF,MAAO,AAAA,kBAAA,MAAA,EAAA,GAAS,GAAW,IAnd3B,EAAuB,GAEvB,EAAK,MAAQ,CACX,MAAO,GACP,YAAa,GACb,yBAA0B,EAAK,2BAGjC,EAAK,OAAS,GAAI,IAAM,GACxB,EAAK,QAAU,GAAI,GAAW,GAC9B,EAAK,qBAAuB,EAC5B,EAAK,gBAAkB,EACvB,EAAK,sBAAwB,EAC7B,EAAK,uBAAyB,EAG9B,EAAK,gBAAkB,EAGvB,EAAK,eAAiB,EAAK,OAAO,SAAS,EAAK,eAAgB,GAAyB,CACvF,QAAS,GACT,QAAS,KAGX,EAAK,aAAe,EAAK,OAAO,SAAS,EAAK,aAAc,GAAqB,CAC/E,QAAS,KAGX,EAAK,eAAiB,EAAK,OAAO,SAAS,EAAK,eAAgB,GAAc,CAC5E,QAAS,KAGX,EAAK,iBAAmB,EAAK,OAAO,SAAS,EAAK,iBAAkB,GAAqB,CACvF,QAAS,KAGX,EAAK,mBAAqB,GAC1B,EAAK,qBAAuB,EAC5B,EAAK,cAAgB,GACrB,EAAK,WAAa,KA1CpB,mBAPc,EAAA,yBAAd,SACE,EACA,EAA4B,CAE5B,MAAO,GAAc,yBAAyB,EAAW,IAgD3D,OAAA,eAAW,EAAA,UAAA,WAAQ,KAAnB,UAAA,CACE,MAAO,MAAK,2CAcP,EAAA,UAAA,cAAP,SACE,EACA,EACA,EAA8C,CAA9C,AAAA,IAAA,QAAA,GAA6B,GAAa,MAW1C,OATM,GAAa,KAAK,MAAM,WACxB,EAAc,KAAK,kBACnB,EAAW,EAAa,EAExB,EAAc,KAAK,aAErB,EAAY,EAEZ,EAAe,EACV,EAAY,EAAY,EAAY,EAAU,GAAa,EAAc,CAChF,GAAM,GAAoB,KAAK,sBAAsB,EAAW,GAE1D,EAAa,EAAkB,OACrC,EAAe,EAAkB,UAEjC,GAAM,GAAyB,GAAa,GAAS,EAAY,EAAe,EAChF,GAAI,EAAwB,CAG1B,GAAI,GAAe,KAAK,eAAgB,CAStC,OARM,GAAa,GAAmB,KAAK,gBACrC,EAAe,CACnB,IAAK,KAAK,eAAe,UACzB,OAAQ,KAAK,eAAe,UAAY,EAAW,QAI/C,EAAyB,EAAQ,EAC9B,EAAkB,EAAG,EAAkB,EAAwB,EAAE,EACxE,GAAa,EAAY,EAAY,GAEvC,GAAM,GAAe,EAAY,EAAY,GAI7C,OAAQ,OACD,IAAa,IAChB,KAAK,eAAe,UAAY,EAChC,WACG,IAAa,OAChB,KAAK,eAAe,UAAY,EAAe,EAAW,OAC1D,WACG,IAAa,OAChB,KAAK,eAAe,UAAa,GAAY,EAAe,EAAW,QAAU,EACjF,WACG,IAAa,aAEhB,MAGJ,GAAM,GAAqB,GAAa,EAAa,KAAO,GAAgB,EAAa,OACzF,GAAI,EAEF,OAGF,GAAM,GAAuB,EAAY,EAAa,IAChD,EAAuB,EAAe,EAAa,OAEzD,AAAI,GAQO,GAQT,GAAY,EAAe,EAAW,QAI1C,AAAI,KAAK,gBACP,MAAK,eAAe,UAAY,GAElC,OAGF,GAAa,IAIV,EAAA,UAAA,wBAAP,SAA+B,EAA2C,CAExE,OADM,GAAQ,KAAK,MAAM,OAAS,GACf,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAO,CAArB,GAAM,GAAI,EAAA,GACP,EACJ,CAAC,EAAK,UAAa,MAAK,YAAc,IAAM,EAAK,KAAQ,MAAK,YAAc,IAAM,EAAK,IAAM,EAAK,OACpG,GAAI,EACF,GAAK,EAKH,OADI,GAAiB,EACZ,EAAY,EAAK,WAAY,EAAY,EAAK,WAAa,EAAK,UAAW,IAAa,CAC/F,GAAM,GAAY,EAAY,GAC9B,GACE,EAAK,IAAM,GAAkB,KAAK,YAClC,KAAK,WAAa,EAAK,IAAM,EAAiB,EAE9C,MAAO,GAEP,GAAkB,MAbN,CAChB,GAAM,GAAY,KAAK,MAAM,EAAK,OAAS,EAAK,WAChD,MAAO,GAAK,WAAa,KAAK,MAAO,MAAK,WAAa,EAAK,KAAO,IAiBzE,MAAO,IAGF,EAAA,UAAA,kBAAP,UAAA,CACE,KAAK,SAAS,KAAK,aAAa,KAAK,MAAO,KAAK,QACjD,KAAK,kBACL,KAAK,eAAiB,GAAqB,KAAK,MAAM,SAEtD,KAAK,QAAQ,GAAG,OAAQ,SAAU,KAAK,gBACnC,KAAK,MAAM,SACb,KAAK,QAAQ,GAAG,KAAK,MAAM,QAAS,QAAS,KAAK,SAAU,IAE1D,KAAK,gBACP,MAAK,QAAQ,GAAG,KAAK,eAAgB,SAAU,KAAK,WACpD,KAAK,QAAQ,GAAG,KAAK,eAAgB,SAAU,KAAK,kBAIjD,EAAA,UAAA,mBAAP,UAAA,CAGE,GAAM,GAAa,KAAK,MAClB,EAAa,KAAK,MAGxB,GAAK,EAAW,cAmBd,KAAK,mBAnBwB,CAE7B,GAAM,GAAiB,KAAK,wBAAwB,EAAW,OAG/D,AAAI,EACF,MAAK,kBAAoB,KACzB,AAAK,KAAK,yBAIR,KAAK,iBAHL,MAAK,yBAA2B,GAChC,KAAK,SAAS,KAAK,aAAa,EAAY,MAM9C,KAAK,eAQT,AAAI,EAAW,gBACb,EAAW,eAAe,EAAW,QAIlC,EAAA,UAAA,qBAAP,UAAA,CACE,KAAK,OAAO,UACZ,KAAK,QAAQ,UAEb,MAAO,MAAK,gBAGP,EAAA,UAAA,sBAAP,SAA6B,EAAyB,EAAuB,CACnE,GAAO,GAAa,KAAK,MAAK,MACvB,EAAa,EAAQ,MAChC,EAAwB,GAO5B,GAJI,CAAC,EAAS,aAAe,KAAK,MAAM,aAIpC,EAAS,UAAY,KAAK,MAAM,QAClC,MAAO,GAGT,GAAI,EAAS,QAAU,KAAK,MAAM,OAAS,EAAU,SAAW,EAAU,OACxE,OAAS,GAAI,EAAG,EAAI,EAAU,OAAQ,IAAK,CACzC,GAAM,GAAU,EAAU,GACpB,EAAU,EAAU,GAE1B,GAAI,EAAQ,MAAQ,EAAQ,KAAO,EAAQ,YAAc,EAAQ,UAAW,CAC1E,EAAwB,GACxB,WAIJ,GAAwB,GAG1B,MAAO,IAGF,EAAA,UAAA,YAAP,UAAA,CACE,KAAK,uBAEL,KAAK,mBAAmB,KAAK,MAAO,KAAK,MAAO,IAChD,KAAK,SAAS,KAAK,aAAa,KAAK,MAAO,KAAK,QACjD,KAAK,kBAEL,EAAA,UAAM,YAAW,KAAA,OAMZ,EAAA,UAAA,mBAAP,UAAA,CACE,MAAO,MAAK,aAAc,QAGrB,EAAA,UAAA,OAAP,UAAA,CAME,OALM,GAA8D,KAAK,MAAjE,EAAS,EAAA,UAAE,EAAA,EAAA,KAAA,EAAI,IAAA,OAAG,OAAM,EAAE,EAAe,EAAA,gBAAE,EAAY,EAAA,aACvD,EAAe,KAAK,MAAK,MAAzB,EAAK,IAAA,OAAG,GAAE,EACZ,EAA8B,GAC9B,EAAW,GAAqD,KAAK,MAAO,IAE/D,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAO,CAArB,GAAM,GAAI,EAAA,GACb,EAAa,KAAK,KAAK,YAAY,IAGrC,GAAM,GAAuB,EACzB,GAAsB,EAAiB,KAAK,kBAC5C,KAAK,iBAEH,EAAoB,EACtB,GAAsB,EAAc,KAAK,eACzC,KAAK,cAET,MAAO,GAAkB,CACvB,QAAS,KAAK,MACd,MAAK,EACL,eAAgB,EAAqB,CACnC,WAAY,KAAK,SACjB,MAAK,EACL,aAAY,EACZ,SAAU,CACR,KAAM,eACN,UAAW,qBAGf,SAAQ,EAAA,EAAA,GACH,GAAQ,CACX,UAAW,GAAI,UAAW,GAC1B,KAAM,EAAa,OAAS,EAAI,EAAO,YA0BrC,EAAA,UAAA,kBAAR,SAA0B,EAAiC,CAAjC,AAAA,IAAA,QAAA,GAAuB,KAAK,OAC5C,GAAA,GAAuB,EAAK,mBACpC,MAAO,CAAC,GAAsB,EAAmB,IAM3C,EAAA,UAAA,qBAAR,UAAA,CACE,KAAK,WAAa,IAGZ,EAAA,UAAA,YAAR,SAAoB,EAAc,CAAlC,GAAA,GAAA,KACU,EAAiB,KAAK,MAAK,aAC/B,EAEJ,GAAI,GACF,GAAa,KAAK,WAAW,EAAK,KAC9B,GAAc,EAAW,aAC3B,MAAO,GAAW,YAItB,GAAM,GAAY,KAAK,cAAc,GAE7B,EAAsC,KAAK,MAAK,aAAhD,EAAY,IAAA,OAAG,KAAK,cAAa,EAEnC,EAAc,EAClB,CACE,KAAM,EACN,UAAW,eACX,IAAK,EAAK,IACV,IAAK,SAAC,EAAe,CACnB,EAAK,UAAU,EAAK,KAAO,GAE7B,MAAO,EACP,KAAM,gBAER,KAAK,eAOP,MAAI,IAAgB,EAAK,aAAe,GACtC,MAAK,WAAW,EAAK,KAAO,CAC1B,KAAM,EACN,YAAa,IAGV,GAwBD,EAAA,UAAA,cAAR,SAAsB,EAAc,CAC1B,GAAA,GAAiB,KAAK,MAAK,aAEnC,MAAA,GAAA,EAAA,GACM,EAAe,EAAa,GAAQ,IACpC,AAAC,EAAK,MAIN,GAHA,CACE,OAAQ,EAAK,UA8Cf,EAAA,UAAA,SAAR,SAAiB,EAAO,CAGtB,OAFI,GAAS,EAAG,OAET,IAAW,KAAK,SAAS,SAAS,CACvC,GAAM,GAAc,EAAO,aAAa,mBAExC,GAAI,EAAa,CACf,KAAK,cAAgB,OAAO,GAC5B,MAGF,EAAS,GAAU,KAQf,EAAA,UAAA,UAAR,UAAA,CACE,AAAI,CAAC,KAAK,MAAM,aAAe,CAAC,KAAK,MAAM,sBACzC,KAAK,SAAS,CAAE,YAAa,KAE/B,KAAK,wBACL,KAAK,oBAGC,EAAA,UAAA,sBAAR,UAAA,CACE,KAAK,sBAAwB,EAC7B,KAAK,uBAAyB,GAMxB,EAAA,UAAA,eAAR,UAAA,CACE,KAAK,mBAAmB,KAAK,MAAO,KAAK,OAGrC,EAAC,KAAK,mBAAqB,CAAC,GAAmB,KAAK,cAA6B,KAAK,qBACxF,KAAK,SAAS,KAAK,aAAa,KAAK,MAAO,KAAK,SAU7C,EAAA,UAAA,aAAR,UAAA,CACQ,GAAA,GAAkD,KAAK,MAArD,EAAoB,EAAA,qBAAE,EAAqB,EAAA,sBAC7C,EAAiG,KAAxE,EAAoB,EAAA,sBAA0B,EAAqB,EAAA,uBAC5F,EAAe,KAAK,IAAI,EAAgC,EAAuB,GAC/E,EAAgB,KAAK,IAAI,EAAiC,EAAwB,GAExF,AAAI,KAAiB,GAAwB,IAAkB,IAG7D,MAAK,sBAAwB,EAC7B,KAAK,uBAAyB,EAC9B,KAAK,mBAAmB,KAAK,MAAO,KAAK,OACzC,KAAK,SAAS,KAAK,aAAa,KAAK,MAAO,KAAK,SAG/C,GAAwB,GAAgB,EAAyB,IAEnE,KAAK,gBAQD,EAAA,UAAA,iBAAR,UAAA,CACE,AAAK,KAAK,MAAM,sBACd,KAAK,SAAS,CAAE,YAAa,MAIzB,EAAA,UAAA,eAAR,UAAA,CACE,KAAK,eAGC,EAAA,UAAA,aAAR,SAAqB,EAA0B,EAA4B,CAGzE,AAAK,KAAK,eACR,KAAK,mBAAmB,EAAW,GAGrC,GAAM,GAAe,KAAK,YAAY,EAAW,GAC3C,EAAe,EAAc,MAEnC,YAAK,mBAAmB,EAAc,EAAa,MAAQ,KAAK,OAEhE,EAAA,EAAA,GACK,GACA,IAUC,EAAA,UAAA,mBAAR,SAA2B,EAAsB,EAAsB,EAAoB,CACjF,GAAA,GAA+B,EAAK,YAAvB,EAAkB,EAAK,cAE5C,GAAI,GAAe,EAAe,CAKhC,OAJM,GAEF,GAEe,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAU,CAAxB,GAAM,GAAI,EAAA,GACb,AAAI,EAAK,OACP,GAAgB,EAAK,YAAc,GAIvC,OAAmB,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAU,CAAxB,GAAM,GAAI,EAAA,GACb,AAAI,EAAK,OACP,CAAK,EAAgB,EAAK,YAGxB,MAAO,GAAgB,EAAK,YAF5B,KAAK,aAAa,IAOxB,OAAW,KAAS,GAClB,AAAI,EAAgB,eAAe,IACjC,KAAK,eAAe,EAAgB,MAMpC,EAAA,UAAA,wBAAR,SAAgC,EAAiB,CAC/C,GAAI,GAAgB,GAGpB,GAAI,CAAC,KAAK,oBACR,MAAO,GAGT,OAAS,GAAI,EAAG,EAAI,EAAM,OAAQ,IAAK,CACrC,GAAM,GAAO,EAAM,GAEnB,AAAI,EAAK,OACP,GAAgB,KAAK,aAAa,IAAS,GAI/C,MAAO,IAOD,EAAA,UAAA,aAAR,SAAqB,EAAc,CACjC,GAAI,GAAmB,GACjB,EAAc,KAAK,UAAU,EAAK,KAClC,EAAe,KAAK,mBAAmB,EAAK,YAIlD,GACE,GACA,KAAK,qBACJ,EAAC,GAAgB,EAAa,iBAAmB,KAAK,iBACvD,CACA,GAAM,GAAgB,CACpB,MAAO,EAAY,YACnB,OAAQ,EAAY,cAGtB,AAAI,GAAc,QAAU,EAAc,QACxC,GAAmB,EAAK,SAAW,EAAc,OAIjD,EAAK,OAAS,EAAc,OAE5B,KAAK,mBAAmB,EAAK,YAAc,CACzC,OAAQ,EAAc,OACtB,eAAgB,KAAK,iBAGvB,KAAK,qBAAuB,KAAK,MAC9B,MAAK,qBAAuB,KAAK,gBAAkB,EAAc,QAAW,MAAK,gBAAkB,IAGtG,KAAK,mBAIT,MAAO,IAID,EAAA,UAAA,aAAR,SAAqB,EAAc,CACzB,GAAA,GAAgB,KAAK,MAAK,YAIlC,AAAI,GACF,EAAY,IAKR,EAAA,UAAA,eAAR,SAAuB,EAAc,CAC3B,GAAA,GAAkB,KAAK,MAAK,cAIpC,AAAI,GACF,EAAc,IAKV,EAAA,UAAA,YAAR,SAAoB,EAAsB,EAAoB,CACtD,GAAA,GAAgB,EAAK,YACnB,EAAqC,EAAK,MAAnC,EAA8B,EAAK,WAAvB,EAAkB,EAAK,cAElD,EAAc,KAAK,gBAAgB,GAmBnC,OAjBM,GAAgB,EAAA,GAAQ,IACxB,EAAoB,GAEtB,EAAe,EACf,EAAU,EACV,EAAgB,KACd,EAAe,KAAK,cACpB,EAAW,EAAc,EACzB,EAAmB,KAAK,kBAAkB,GAK1C,EAAgB,KAAK,uBAAyB,GAAK,CAAC,EAEpD,EAAc,KAAK,0BAEhB,EAAS,CAChB,GAAM,GAAoB,EAAK,sBAAsB,EAAW,GAC1D,EAAa,EAAkB,OAC/B,EAAW,EAAkB,KAC7B,EAAM,EAAkB,IAE9B,EAAe,EAAkB,UAEjC,GAAM,GAAa,EAAU,EAAa,EAEpC,EACJ,GAAU,EAAM,MAAqB,SAAC,GAAc,CAAK,MAAA,CAAC,CAAC,GAAK,OAAS,GAAK,aAAe,IAAa,GACtG,EAAuB,CAAC,GAAgB,GAAc,EAAY,KAAO,GAAW,EAAY,OAChG,EACJ,CAAC,EAAK,eAAkB,GAAc,EAAK,cAAc,KAAO,GAAW,EAAK,cAAc,OAC1F,GACH,CAAC,GAAkB,IAA0B,GAAwB,IAAqB,CAAC,EACxF,EAAgB,GAAgB,GAAa,EAAe,EAAY,EACxE,GAAc,IAAc,EAOlC,GAAI,IAAiB,GAAiB,GAAa,CACjD,AAAI,GACF,GAAM,KAAK,GACX,EAAgB,MAGlB,GAAM,GAAc,KAAK,IAAI,EAAc,EAAW,GAChD,EAAU,EAAK,YACnB,EACA,EAAO,MAAM,EAAW,EAAY,GACpC,EACA,OACA,OACA,GAGF,EAAQ,IAAM,EACd,EAAQ,OAAS,EACb,EAAK,cAAgB,EAAK,aAAa,QACzC,GAAQ,UAAY,GAAc,EAAK,aAAa,KAAO,GAAW,EAAK,aAAa,QAG1F,EAAM,KAAK,GAEP,GAAyB,EAAK,cAChC,GAAW,EAAkB,CAC3B,IAAK,EACL,OAAQ,EACR,OAAQ,EACR,KAAM,EAAY,KAClB,MAAO,EAAY,MACnB,MAAO,EAAY,YAIvB,AAAK,IACH,GAAgB,EAAK,YACnB,GAAoB,EACpB,OACA,EACA,EACA,OACA,EACA,KAGJ,EAAc,OAAU,GAAc,QAAU,GAAM,GAAa,GAAW,EAC9E,EAAc,WAAa,EAM7B,GAJA,GAAW,EAAa,EAAU,EAI9B,GAAiB,mCA9Ed,EAAY,EAAa,EAAY,EAAU,GAAa,EAAY,SAAxE,wBAmFT,MAAI,IACF,GAAc,IAAM,GAAoB,MACxC,EAAM,KAAK,IAGb,KAAK,kBAAoB,EAGzB,EAAA,EAAA,GACK,GAAK,CACR,MAAO,EACP,eAAgB,KAAK,mBAIjB,EAAA,UAAA,sBAAR,SACE,EACA,EAAuB,CAQf,GAAA,GAAyB,KAAK,MAAK,qBAC3C,GAAI,EAAsB,CACxB,GAAM,GAAW,EAAqB,EAAW,GAEzC,EAAkE,EAAQ,UAA1E,EAAS,IAAA,OAAG,KAAK,qBAAqB,EAAW,GAAY,EAE7D,EAAoE,EAAQ,OAA5E,EAAM,IAAA,OAAG,KAAK,eAAe,EAAW,EAAa,GAAU,EAEvE,MAAO,CACL,UAAW,EACX,OAAQ,EACR,KAAM,EAAS,KACf,IAAK,EAAS,SAEX,CACL,GAAM,GAAY,KAAK,qBAAqB,EAAW,GAEvD,MAAO,CACL,UAAW,EACX,OAAQ,KAAK,eAAe,EAAW,EAAa,MASlD,EAAA,UAAA,eAAR,SAAuB,EAAmB,EAAyB,EAAoB,CACrF,GAAI,KAAK,MAAM,cACb,MAAO,MAAK,MAAM,cAAc,EAAW,EAAa,GAExD,GAAM,GAAe,KAAK,mBAAmB,GAE7C,MAAO,GAAe,EAAa,OAAS,KAAK,sBAAwB,IAIrE,EAAA,UAAA,qBAAR,SAA6B,EAAmB,EAAwB,CACtE,GAAM,GAAe,KAAK,MAAM,oBAC5B,KAAK,MAAM,oBAAoB,EAAW,GAC1C,GAEJ,MAAO,IAA8B,IAG/B,EAAA,UAAA,YAAR,SACE,EACA,EACA,EACA,EACA,EACA,EACA,EAAkB,CAJlB,AAAA,IAAA,QAAA,GAAA,IACA,IAAA,QAAA,GAAgB,EAAQ,EAAM,OAAS,GACvC,IAAA,QAAA,GAAA,IAIA,EAAU,GAAW,GAAkB,EACvC,GAAM,GAAa,KAAK,WAAW,GACnC,MAAI,IAAc,EAAW,KACpB,EAAW,KAGb,CACL,IAAK,EACL,WAAY,EACZ,UAAW,EACX,MAAO,EACP,MAAO,EACP,IAAK,EACL,OAAQ,EACR,KAAM,EACN,SAAU,GAAY,KAIlB,EAAA,UAAA,gBAAR,SAAwB,EAAqB,CACrC,GAAA,GAAqC,GAAS,KAAK,MAAjD,EAAK,EAAA,MAAE,EAAU,EAAA,WAAE,EAAW,EAAA,YAEtC,MAAO,KAAgB,OAAa,EAAQ,EAAM,OAAS,EAAc,EAAK,GAIxE,EAAA,UAAA,mBAAR,SAA2B,EAAsB,EAAsB,EAAqB,CAClF,GAAA,GAAgD,EAAK,qBAA/B,EAA0B,EAAK,sBACrD,EAAU,EAAK,MAEvB,GAAI,EAAC,KAAK,kBAAkB,GAI5B,IAAI,GAAc,KAAK,cAAY,EAAA,GAAS,IACtC,EAAe,KAAK,gBAAkB,KAAK,eAAe,aAC1D,EAAY,KAAK,eAAiB,KAAK,eAAe,UAAY,EAKxE,AACE,KAAK,SAAS,SACb,IACC,CAAC,GACD,CAAC,KAAK,cACN,CAAC,GACD,IAAiB,KAAK,eACtB,KAAK,IAAI,KAAK,WAAa,GAAa,KAAK,qBAAuB,IAEtE,GAAc,KAAK,aAAe,GAAoB,KAAK,SAAS,SACpE,KAAK,WAAa,GAKhB,IAAe,CAAC,GAAgB,IAAiB,KAAK,gBACxD,KAAK,kBAGP,KAAK,cAAgB,GAAgB,EAMrC,GAAM,GAAa,KAAK,IAAI,EAAG,CAAC,EAAY,KACtC,EAAM,GAAU,KAAK,MAAM,SAC3B,EAAc,CAClB,IAAK,EACL,KAAM,EAAY,KAClB,OAAQ,EAAa,EAAK,YAC1B,MAAO,EAAY,MACnB,MAAO,EAAY,MACnB,OAAQ,EAAK,aAIf,KAAK,cAAgB,GAAY,EAAa,KAAK,uBAAwB,KAAK,uBAChF,KAAK,aAAe,GAAY,EAAa,EAAwB,GAGrE,KAAK,aAAe,IA//BR,EAAA,aAAe,CAC3B,WAAY,EACZ,aAAc,SAAC,EAAW,EAAe,EAAsB,CAAK,MAAA,AAAA,kBAAA,YAAA,KAAI,GAAQ,EAAK,MAAS,KAC9F,qBAAsB,GACtB,sBAAuB,IA6/B3B,GAlgCyC,cAogCzC,YAAqB,EAAkB,EAAqB,EAAkB,CAC5E,GAAM,GAAM,EAAK,IAAM,EAAc,EAAK,OACpC,EAAS,EAAK,OAAU,GAAc,GAAc,EAAK,OAE/D,MAAO,CACL,IAAK,EACL,OAAQ,EAAM,EACd,OAAQ,EACR,KAAM,EAAK,KACX,MAAO,EAAK,MACZ,MAAO,EAAK,OAVP,oBAcT,YAA4B,EAAuB,EAAqB,CACtE,MACE,GAAU,KAAO,EAAU,KAC3B,EAAU,MAAQ,EAAU,MAC5B,EAAU,QAAW,EAAU,QAC/B,EAAU,OAAU,EAAU,MALzB,2BAST,YAAoB,EAAwB,EAAmB,CAC7D,SAAW,IAAM,EAAQ,IAAM,EAAW,KAAO,EAAW,MAAQ,GAAK,EAAQ,IAAM,EAAW,IAClG,EAAW,KAAO,EAAQ,KAAO,EAAW,MAAQ,EAAW,OAAS,GAAK,EAAQ,KAAO,EAAW,KACvG,EAAW,OACT,EAAQ,OAAU,EAAW,QAAW,EAAW,SAAW,GAAK,EAAQ,OAAS,EAAW,OACjG,EAAW,MAAQ,EAAQ,MAAS,EAAW,OAAU,EAAW,QAAU,GAAK,EAAQ,MAAQ,EAAW,MAC9G,EAAW,MAAQ,EAAW,MAAS,EAAW,KAAO,EACzD,EAAW,OAAS,EAAW,OAAU,EAAW,IAAM,EAEnD,EATA,mBExnCT,OAAuB,OAiCvB,GAAM,IAAoC,0BACpC,GAAiC,uBACjC,GAAkC,wBAClC,GAAkC,wBAClC,GAAwC,8BACxC,GAAsC,4BACtC,GAAkC,wBAsFxC,GAAA,SAAA,EAAA,CAAmC,EAAA,EAAA,GA8BjC,WAAY,EAA0B,CAAtC,GAAA,GACE,EAAA,KAAA,KAAM,IAAM,KAvBN,EAAA,MAAQ,AAAM,eAmGf,EAAA,gBAAkB,UAAA,CACvB,EAAK,iBAAiB,KAGhB,EAAA,mBAAqB,UAAA,CACnB,GAAA,GAAc,EAAK,MAAK,UAE1B,EAAU,EAAU,SAAW,EAAU,UAE/C,EAAK,SAAS,CACZ,QAAO,KAIH,EAAA,oBAAsB,SAAC,EAAiC,CAC9D,GAAI,GAAS,EAAG,OAEhB,GAAI,SAAS,gBAAkB,GAAU,CAAC,GAAgB,SAAS,cAA8B,GAAS,CACxG,EAAK,kBACL,OAGF,GAAI,EAAC,GAAgB,EAAQ,EAAK,MAAM,SAIxC,KAAO,IAAW,EAAK,MAAM,SAAS,CACpC,GAAI,EAAK,cAAc,EAAQ,IAAkC,CAC/D,EAAK,kBACL,MAGF,EAAS,GAAU,KASf,EAAA,SAAW,SAAC,EAAiC,CACnD,GAAM,GAAS,EAAG,OACV,EAAc,EAAK,MAAK,UAC1B,EAA0B,EAAK,gBAAkB,EAAK,eAEtD,EAAgB,EAAK,oBAE3B,GAAI,EAAK,oBAAsB,IAAkB,EAAc,KAAM,CACnE,GAAM,GAAW,EAAK,cAAc,EAAQ,IACtC,EAAW,EAAK,cAAc,GAEpC,GAAI,CAAC,GAAY,EAAU,CACzB,GAAM,GAAQ,EAAK,cAAc,GAEjC,AAAI,EAEF,GAAU,iBAAiB,EAAO,EAAU,gBAAgB,GAAQ,IAChE,EAAK,MAAM,mBAAqB,EAAK,UAAY,EAAU,UAC7D,GAAU,SAAS,IACnB,EAAK,YAAY,MAGf,EAAK,MAAM,mBACb,EAAK,oBAAoB,EAAI,IAMrC,EAAK,iBAAiB,KAGhB,EAAA,aAAe,SAAC,EAAiC,CACvD,EAAK,iBAAiB,GAEtB,GAAI,GAAS,EAAG,OACV,EAAW,EAAK,cAAc,GAGpC,GAAI,GAAK,qBAAqB,GAI9B,KAAO,IAAW,EAAK,MAAM,SACvB,GAAK,cAAc,EAAQ,KADK,CAG7B,GAAI,EAAU,CACnB,GAAI,EAAK,cAAc,EAAQ,IAC7B,MACK,GAAI,EAAK,cAAc,EAAQ,IACpC,MACK,GACJ,KAAW,GAAY,EAAK,kBAAkB,KAC/C,CAAC,EAAK,iBACN,CAAC,EAAK,gBACN,CAAC,EAAK,eACN,CACA,EAAK,mBAAmB,EAAI,EAAK,cAAc,IAC/C,cAEA,EAAK,MAAM,kCACV,GAAO,UAAY,KAAO,EAAO,UAAY,UAAY,EAAO,UAAY,SAE7E,OAIJ,EAAS,GAAU,KAIf,EAAA,qBAAuB,SAAC,EAAiC,CAC/D,EAAK,YAAY,KAGX,EAAA,SAAW,SAAC,EAAiC,CAC3C,GAAA,GAAwC,EAAK,MAAK,4BAAlD,EAA2B,IAAA,OAAG,GAAK,EAE3C,EAAK,iBAAiB,GAOtB,OALI,GAAS,EAAG,OACV,EAAW,EAAK,cAAc,GAE9B,EAAsB,EAAK,qBAAqB,GAE/C,IAAW,EAAK,MAAM,SAAS,CACpC,GAAI,EAAK,cAAc,EAAQ,IAAsC,CACnE,AAAK,GACH,EAAK,kBAAkB,GAEzB,cACS,EAAU,CACnB,GAAM,GAAQ,EAAK,cAAc,GAEjC,GAAI,EAAK,cAAc,EAAQ,IAAkC,CAC/D,AAAK,GACH,CAAI,EAAK,gBACP,EAAK,oBAAoB,EAAI,GAE7B,EAAK,eAAe,EAAI,IAG5B,cAEC,EAAK,UACJ,GACA,EAAK,cAAc,EAAQ,KAC7B,EAAK,cAAc,EAAQ,IAC3B,CAEA,EAAK,eAAe,EAAI,GACxB,cACS,IAAW,EAAU,CAC9B,AAAK,GACH,EAAK,oBAAoB,EAAI,GAE/B,cACS,EAAO,UAAY,KAAO,EAAO,UAAY,UAAY,EAAO,UAAY,QACrF,OAIJ,EAAS,GAAU,KAIf,EAAA,eAAiB,SAAC,EAAiC,CACzD,GAAM,GAAS,EAAG,OAEZ,EAAmC,EAAK,MAAtC,EAAiB,EAAA,kBAAE,EAAS,EAAA,UACpC,GAAI,EAAmB,CACrB,GAAM,GAAW,EAAK,cAAc,GAEpC,GAAI,EAAU,CACZ,GAAM,GAAQ,EAAK,cAAc,GAEjC,EAAK,mBAAmB,EAAI,GAE5B,GAAM,GAAqB,EAAkB,EAAU,WAAW,GAAQ,EAAO,EAAG,aAKpF,AAAK,GACH,EAAG,oBAyBH,EAAA,eAAiB,SAAC,EAAiC,CACzD,GAAI,GAAS,EAAG,OAER,EAAkB,EAAK,MAAK,cAC9B,EAAW,EAAK,cAAc,GAEpC,GAAI,GAAY,GAAiB,CAAC,EAAK,gBAAgB,GAAS,CAG9D,OAFM,GAAQ,EAAK,cAAc,GAE1B,IAAW,EAAK,MAAM,SAEzB,IAAK,cAAc,EAAQ,KAC3B,EAAK,cAAc,EAAQ,MAHO,CAM7B,GAAI,IAAW,EAAU,CAC9B,EAAK,eAAe,EAAI,GACxB,MAGF,EAAS,GAAU,GAGrB,EAAS,GAAU,KAIf,EAAA,kBAAoB,SAAC,EAAoC,CAC/D,EAAK,iBAAiB,GAEtB,EAAK,iBAAiB,KAGhB,EAAA,WAAa,SAAC,EAAoC,CACxD,EAAK,iBAAiB,GAEtB,GAAI,GAAS,EAAG,OAEV,EAAsB,EAAK,qBAAqB,GAE9C,EAAc,EAAK,MAAK,UAE1B,EAAiB,EAAG,QAAU,EAAS,GAAM,GAAK,gBAAkB,EAAK,gBAEzE,EAAsB,EAAG,QAAU,EAAS,OAGlD,GAAI,GAAK,gBAAgB,GAKzB,IAAM,GAAgB,EAAK,oBAG3B,GAAI,GAAkB,IAAkB,EAAc,UAAY,CAAC,EAAU,gBAAiB,CAC5F,AAAK,GACH,EAAU,eAAe,IAE3B,EAAG,kBACH,EAAG,iBACH,OAIF,GAAI,GAAuB,EAAU,mBAAqB,EAAG,CAC3D,AAAK,GACH,EAAU,eAAe,IAE3B,EAAG,kBACH,EAAG,iBACH,OAGF,GAAM,GAAW,EAAK,cAAc,GAGpC,GAAI,EAGF,OAFM,GAAQ,EAAK,cAAc,GAE1B,IAAW,EAAK,MAAM,SACvB,GAAK,cAAc,EAAQ,KADK,CAK7B,GAAI,EAAK,kBAAkB,GAAS,CACzC,AAAK,GAGH,EAAK,mBAAmB,EAAI,GAE9B,UACK,IAEJ,GAAG,QAAU,EAAS,OAAS,EAAG,QAAU,EAAS,QACrD,GAAO,UAAY,UAAY,EAAO,UAAY,KAAO,EAAO,UAAY,SAE7E,MAAO,GACF,GAAI,IAAW,EAAU,CAE9B,GAAI,EAAG,QAAU,EAAS,MAAO,CAE/B,EAAK,eAAe,EAAI,GACxB,EAAG,iBACH,eAES,EAAG,QAAU,EAAS,MAAO,CACtC,AAAK,GACH,EAAK,eAAe,EAAI,GAE1B,EAAG,iBACH,OAEF,OAGF,EAAS,GAAU,MAhZvB,EAAK,QAAU,GAAI,GAAW,GAC9B,EAAK,OAAS,GAAI,IAAM,GACxB,EAAuB,GAEf,GAAA,GAAc,EAAK,MAAK,UAG1B,EAAU,EAAU,SAAW,EAAU,UAE/C,SAAK,MAAQ,CACX,QAAO,KAbX,4BAZc,EAAA,yBAAd,SACE,EACA,EAA8B,CAE9B,GAAM,GAAU,EAAU,UAAU,SAAW,EAAU,UAAU,UAEnE,MAAA,GAAA,EAAA,GACK,GAAS,CACZ,QAAO,KAqBJ,EAAA,UAAA,kBAAP,UAAA,CACE,GAAM,GAAM,GAAU,KAAK,MAAM,SAGjC,KAAK,QAAQ,GAAG,EAAK,iBAAkB,KAAK,iBAAkB,IAC9D,KAAK,QAAQ,GAAG,SAAU,QAAS,KAAK,0CACxC,KAAK,QAAQ,GAAG,SAAS,KAAM,aAAc,KAAK,qBAAsB,IACxE,KAAK,QAAQ,GAAG,SAAS,KAAM,WAAY,KAAK,qBAAsB,IAGtE,KAAK,QAAQ,GAAG,KAAK,MAAM,UAAW,SAAU,KAAK,qBAGhD,EAAA,UAAA,OAAP,UAAA,CACU,GAAA,GAAY,KAAK,MAAK,QAE9B,MACE,AAAA,kBAAA,MAAA,CACE,UAAW,GAAI,mBAAoB,KAAK,MAAM,UAAW,CACvD,0BAA2B,CAAC,CAAC,IAE/B,IAAK,KAAK,MACV,UAAW,KAAK,WAChB,YAAa,KAAK,aAClB,iBAAkB,KAAK,kBACvB,QAAS,KAAK,SACd,KAAK,eACL,cAAe,KAAK,eACpB,cAAe,KAAK,eACpB,mBAAoB,KAAK,oBACzB,eAAgB,KAAK,SAAQ,0BACJ,EAAU,GAAO,QAEzC,KAAK,MAAM,SACZ,AAAA,iBAAC,GAAU,QAKV,EAAA,UAAA,mBAAP,SAA0B,EAAkC,CAClD,GAAA,GAAc,KAAK,MAAK,UAEhC,AAAI,IAAc,EAAc,WAE9B,MAAK,QAAQ,IAAI,EAAc,WAC/B,KAAK,QAAQ,GAAG,EAAW,SAAU,KAAK,sBAIvC,EAAA,UAAA,qBAAP,UAAA,CACE,KAAK,QAAQ,UACb,KAAK,OAAO,WAwMN,EAAA,UAAA,qBAAR,SAA6B,EAAmB,CAC9C,GAAI,KAAK,sBAAwB,EAAc,KAC7C,MAAO,GAGT,KAAO,IAAW,KAAK,MAAM,SAAS,CACpC,GAAI,KAAK,cAAc,EAAQ,IAC7B,MAAO,GAET,EAAS,GAAU,GAGrB,MAAO,IAgID,EAAA,UAAA,kBAAR,SAA0B,EAAiC,CACjD,GAAA,GAAc,KAAK,MAAK,UAE1B,EAAgB,KAAK,oBAE3B,AAAI,IAAkB,EAAc,UAClC,GAAU,oBACV,EAAG,kBACH,EAAG,mBAIC,EAAA,UAAA,eAAR,SAAuB,EAAsE,EAAa,CAChG,GAAA,GAAc,KAAK,MAAK,UAE1B,EAAgB,KAAK,oBAS3B,GAPA,EAAU,gBAAgB,IAEtB,KAAK,MAAM,mBAAqB,KAAK,UAAY,CAAC,EAAU,gBAAgB,IAAU,EAAU,UAClG,GAAU,SAAS,IACnB,KAAK,YAAY,KAGf,IAAkB,EAAc,SAClC,EAAU,oBAAoB,WACrB,IAAkB,EAAc,OAAQ,CACjD,GAAM,GAAa,EAAU,gBAAgB,GACvC,EAAU,EAAU,SAAW,EAAU,UAC/C,EAAU,eAAe,IACzB,EAAU,iBAAiB,EAAO,CAAC,EAAY,IAC3C,GAAW,EAAU,UAIvB,EAAU,SAAS,QAEhB,CACL,EAAU,gBAAgB,IAC1B,OAGF,EAAU,gBAAgB,IAE1B,EAAG,mBAMG,EAAA,UAAA,eAAR,SAAuB,EAAsE,EAAa,CAClG,GAAA,GAA+B,KAAK,MAAlC,EAAS,EAAA,UAAE,EAAa,EAAA,cAEhC,AAAI,GACF,GAAc,EAAU,WAAW,GAAQ,EAAO,EAAG,aACrD,EAAG,iBACH,EAAG,oBAIC,EAAA,UAAA,oBAAR,SAA4B,EAAuC,EAAa,CACtE,GAAA,GAAc,KAAK,MAAK,UAC1B,EAA0B,KAAK,gBAAkB,KAAK,eAEtD,EAAgB,KAAK,oBAE3B,AAAI,IAAkB,EAAc,SAClC,AAAI,KAAK,iBAAmB,CAAC,KAAK,cAChC,EAAU,cAAc,EAAO,CAAC,GAC3B,AAAI,EACT,EAAU,oBAAoB,GAE9B,KAAK,qBAAqB,GAEnB,IAAkB,EAAc,QACzC,KAAK,qBAAqB,IAItB,EAAA,UAAA,mBAAR,SACE,EACA,EAAa,CAEL,GAAA,GAAc,KAAK,MAAK,UAGhC,AAAI,EAAU,gBAAgB,IAI9B,KAAK,qBAAqB,IAUpB,EAAA,UAAA,yCAAR,SAAiD,EAAc,CAC7D,GAAM,GAAe,GAAqB,KAAK,MAAM,SAErD,KAAK,QAAQ,IAAI,SAAU,QAAS,KAAK,0CACzC,KAAK,QAAQ,GAAG,EAAc,QAAS,KAAK,uBAGvC,IAAgB,EAAG,iBAAkB,OAAQ,EAAa,SAAS,EAAG,SAAY,IAAiB,EAAG,SACzG,KAAK,sBAAsB,IAIvB,EAAA,UAAA,sBAAR,SAA8B,EAAc,CAC1C,AAAI,CAAC,KAAK,MAAM,gCAAkC,KAAK,mBAAmB,EAAG,SAC3E,KAAK,MAAM,UAAU,eAAe,KAIhC,EAAA,UAAA,qBAAR,SAA6B,EAAa,CAChC,GAAA,GAAc,KAAK,MAAK,UAC1B,EAA0B,EAAU,qBAAuB,GAAK,EAAU,gBAAgB,GAEhG,GAAI,CAAC,EAAyB,CAC5B,GAAM,GAAU,EAAU,SAAW,EAAU,UAC/C,EAAU,gBAAgB,IAC1B,EAAU,eAAe,IACzB,EAAU,iBAAiB,EAAO,GAAM,IACpC,IAAY,KAAK,MAAM,mBAAqB,KAAK,WAC/C,GAAU,UACZ,EAAU,SAAS,IAEjB,KAAK,UACP,KAAK,YAAY,KAGrB,EAAU,gBAAgB,MAQtB,EAAA,UAAA,iBAAR,SAAyB,EAAoE,CAC3F,KAAK,gBAAkB,EAAG,SAC1B,KAAK,eAAiB,EAAG,QACzB,KAAK,eAAiB,EAAG,QAEzB,GAAM,GAAW,EAAwC,QACzD,KAAK,cAAgB,EAAU,IAAY,EAAS,IAAM,IAGpD,EAAA,UAAA,cAAR,SAAsB,EAAmB,CAGvC,OAFQ,GAAc,KAAK,MAAK,UAEzB,IAAW,KAAK,MAAM,SAAS,CACpC,GAAM,GAAa,EAAO,aAAa,IACjC,EAAQ,OAAO,GAErB,GAAI,IAAe,MAAQ,GAAS,GAAK,EAAQ,EAAU,WAAW,OACpE,MAGF,EAAS,GAAU,GAGrB,GAAI,IAAW,KAAK,MAAM,QAI1B,MAAO,IAGD,EAAA,UAAA,cAAR,SAAsB,EAAqB,CACzC,MAAO,QAAO,EAAS,aAAa,MAG9B,EAAA,UAAA,kBAAR,SAA0B,EAAoB,CAC5C,MAAO,MAAK,cAAc,EAAS,KAG7B,EAAA,UAAA,cAAR,SAAsB,EAAsB,EAAqB,CAG/D,OAFI,GAAW,GAER,CAAC,GAAY,IAAY,KAAK,MAAM,SACzC,EAAW,EAAQ,aAAa,KAAmB,OACnD,EAAU,GAAU,GAGtB,MAAO,IAGD,EAAA,UAAA,gBAAR,SAAwB,EAAoB,CAC1C,MAAO,GAAQ,UAAY,SAAW,EAAQ,UAAY,YAGpD,EAAA,UAAA,mBAAR,SAA2B,EAAoB,CAC7C,GAAM,GAAM,KAEZ,GAAI,GAAO,EACT,KAAO,GAAW,IAAY,EAAI,iBAAiB,CACjD,GAAI,GAAkB,GACpB,MAAO,GAGT,EAAU,GAAU,GAIxB,MAAO,IAGD,EAAA,UAAA,iBAAR,SAAyB,EAAoB,CAA7C,GAAA,GAAA,KACE,AAAI,KAAK,6BACP,MAAK,OAAO,aAAa,KAAK,6BAC9B,KAAK,4BAA8B,QAGrC,KAAK,mBAAqB,EAEtB,GACF,KAAK,OAAO,WAAW,UAAA,CACrB,EAAK,mBAAqB,IACzB,MAIC,EAAA,UAAA,YAAR,SAAoB,EAAgB,CAApC,GAAA,GAAA,KACE,AAAI,KAAK,mBACP,MAAK,OAAO,aAAa,KAAK,mBAC9B,KAAK,kBAAoB,QAG3B,KAAK,SAAW,GAEZ,GACF,KAAK,OAAO,WAAW,UAAA,CACrB,EAAK,SAAW,IACf,MAIC,EAAA,UAAA,kBAAR,UAAA,CACU,GAAA,GAAc,KAAK,MAAK,UAExB,EAAoE,KAAK,MAAK,cAA9E,EAAa,IAAA,OAAG,EAAY,EAAU,KAAO,EAAc,KAAI,EAEvE,MAAO,IA5qBK,EAAA,aAAe,CAC3B,kBAAmB,GACnB,cAAe,EAAc,UA4qBjC,GA/qByC,cC5GzC,GAAY,IAAZ,AAAA,UAAY,EAAqB,CAC/B,EAAA,EAAA,OAAA,GAAA,SACA,EAAA,EAAA,QAAA,GAAA,YAFU,IAAA,IAAqB,KCjBjC,MAAuB,OC+fvB,GAAY,IAAZ,AAAA,UAAY,EAAiB,CAE3B,EAAA,EAAA,SAAA,GAAA,WAGA,EAAA,EAAA,UAAA,GAAA,YAGA,EAAA,EAAA,YAAA,GAAA,gBARU,IAAA,IAAiB,KAc7B,GAAY,IAAZ,AAAA,UAAY,EAAa,CAEvB,EAAA,EAAA,cAAA,GAAA,gBAGA,EAAA,EAAA,sBAAA,GAAA,0BALU,IAAA,IAAa,KAqEzB,GAAY,IAAZ,AAAA,UAAY,EAAqB,CAE/B,EAAA,EAAA,QAAA,GAAA,UAGA,EAAA,EAAA,QAAA,GAAA,UAGA,EAAA,EAAA,OAAA,GAAA,WARU,IAAA,IAAqB,KAcjC,GAAY,IAAZ,AAAA,UAAY,EAAqB,CAI/B,EAAA,EAAA,aAAA,GAAA,eAMA,EAAA,EAAA,UAAA,GAAA,cAVU,IAAA,IAAqB,KAgBjC,GAAY,IAAZ,AAAA,UAAY,EAAkB,CAE5B,EAAA,EAAA,QAAA,GAAA,UAGA,EAAA,EAAA,OAAA,GAAA,SAGA,EAAA,EAAA,OAAA,GAAA,WARU,IAAA,IAAkB,KChnB9B,OAAuB,OAGV,GAAe,GAEf,GAA0D,WAAA,EAAK,CAClE,GAAA,GAA6D,EAAK,MAA3D,EAAsD,EAAK,YAA3D,EAAW,IAAA,OAAG,GAAY,EAAE,EAA0B,EAAK,KAA/B,EAAI,IAAA,OAAG,eAAc,EAC1D,EAAQ,EAAQ,EAEtB,MAAO,GAAQ,EACb,AAAA,iBAAA,OAAA,CAAM,UAAW,iBAAkB,MAAO,CAAE,QAAS,eAAgB,MAAK,GAAI,KAAM,IAClF,MANiE,eCFvE,GAAM,IAAmB,CACvB,KAAM,iBACN,QAAS,0BACT,MAAO,uBACP,KAAM,UACN,SAAU,gBAGN,GAAU,CACd,cAAe,4CAGJ,GAAY,WAAC,EAA6B,SAC7C,EAA8B,EAAK,MAA5B,EAAuB,EAAK,UAAjB,EAAY,EAAK,QACnC,EAAY,EAAK,QACnB,EAAa,EAAoB,GAAkB,GAEzD,MAAO,CACL,KAAM,CACJ,EAAW,KACX,EAAM,MAAM,MACZ,CACE,SAAU,WACV,UAAS,GAAA,GACP,EAAC,IAAI,EAAW,UAAa,CAC3B,UAAW,QAIjB,GAAW,CACT,EAAW,QACX,CACE,UAAS,GAAA,GACP,EAAC,IAAI,EAAW,UAAa,CAC3B,UAAW,SAKnB,GAEF,MAAO,CACL,EAAW,MACX,CACE,WAAY,oBAAoB,GAAmB,eAAc,IAAI,GAAQ,gBAGjF,gBAAiB,CACf,gBAAiB,EAAQ,gBApCN,aCfzB,OAAuB,OCAvB,OAAuB,OCchB,GAAM,IAA6B,CACxC,KAAM,gBAEN,QAAS,0BACT,KAAM,qBACN,cAAe,8BACf,UAAW,0BACX,MAAO,sBACP,aAAc,6BACd,mBAAoB,2BACpB,sBAAuB,yBACvB,WAAY,cACZ,eAAgB,mBAChB,YAAa,gBACb,OAAQ,wBAEJ,GAAsB,6BAEf,GAA4C,CACvD,gBAAiB,GACjB,iBAAkB,EAClB,sBAAuB,IAIZ,GAAsB,CACjC,UAAW,GACX,iBAAkB,IAId,GAAM,EAAA,EAAA,GACP,IAAmB,CACtB,mBAAoB,GACpB,0BAA2B,IAGhB,GAAsB,WAAC,EAA4B,6BAE5D,EAYE,EAAK,MAXP,EAWE,EAAK,WAVP,EAUE,EAAK,UATP,EASE,EAAK,kBARP,EAQE,EAAK,YAPP,EAOE,EAAK,eANP,EAME,EAAK,sBALP,EAKE,EAAK,QAJP,EAIE,EAAK,UAHP,EAGE,EAAK,eAHP,EAAc,IAAA,OAAG,GAAwB,EACzC,EAEE,EAAK,uBADP,EACE,EAAK,SAED,EAAmB,EAAK,QAAf,EAAU,EAAK,MAE9B,EAOE,EAAO,eANT,EAME,EAAO,MALT,EAKE,EAAO,iBAJT,GAIE,EAAO,eAHT,EAGE,EAAO,aAFT,GAEE,EAAO,YADT,EACE,EAAO,qBACL,EAAiD,EAAM,eAArD,GAAW,EAAA,YAAe,GAAgB,EAAA,YAE5C,EAAa,EAAoB,GAA4B,GAE7D,EAAS,CAEb,kBAAmB,EACnB,gBAAiB,EACjB,kBAAmB,EAGnB,uBAAwB,GACxB,qBAAsB,EACtB,uBAAwB,GAGxB,mBAAoB,GACpB,iBAAkB,EAClB,mBAAoB,EAGpB,wBAAyB,GACzB,sBAAuB,EACvB,wBAAyB,EAGzB,gBAAiB,GACjB,cAAe,EACf,gBAAiB,EACjB,qBAAsB,GAGlB,GAAuB,CAC3B,IAAK,EACL,MAAO,EACP,OAAQ,EACR,KAAM,GAIF,GAAyB,CAC7B,GAAc,EAAO,CACnB,MAAO,GACP,YAAa,GACb,aAAc,EACd,kBAAmB,KAErB,EAAW,WACX,CACE,MAAO,EAAO,iBACd,WAAY,EAAO,mBACnB,aAAc,aAAa,EAC3B,UAAS,GAAA,CACP,WAAY,CACV,SAAU,WACV,QAAS,QACT,IAAK,GACL,OAAQ,EACR,OAAQ,EACR,KAAM,EACN,MAAO,EACP,QAAS,GACT,UAAW,aAAa,IAG1B,EAAC,IAAI,EAAW,KAAI,OAAO,GAAqB,MAAS,CACvD,MAAO,IAIT,EAAA,WAAW,CACT,WAAY,EAAO,wBACnB,MAAO,EAAO,sBACd,UAAS,GAAA,GAEP,EAAC,IAAI,EAAW,KAAI,IAAI,GAAyB,CAC/C,MAAO,gBACP,UAAW,CACT,MAAO,CACL,MAAO,mBAMb,EAAC,IAAI,EAAW,aAAgB,CAC9B,MAAO,EAAO,wBACd,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,MAAO,qBAMb,EAAC,GAAuB,CACtB,WAAY,iBAMlB,EAAA,WAAW,CACT,WAAY,EAAO,gBACnB,UAAS,GAAA,GAEP,EAAC,IAAI,EAAW,MAAS,CACvB,MAAO,EAAO,cACd,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,MAAO,gBACP,UAAW,CACT,MAAO,CACL,MAAO,uBAQjB,EAAC,IAAI,EAAW,aAAgB,CAC9B,MAAO,EAAO,gBACd,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,MAAO,qBAMb,EAAC,GAAuB,CACtB,WAAY,iBAKlB,EAAC,GAAoB,EAAA,EAAA,CACnB,WAAY,YACZ,MAAO,iBACJ,MAA8B,CACjC,UAAW,CACT,EAAG,CACD,MAAO,oBAMb,EAAA,iBAAiB,CACf,WAAY,EAAO,2BAMrB,GAA6B,CACjC,EAAW,sBACX,CACE,WAAY,OACZ,OAAQ,YAIN,GAA4B,CAChC,UAAW,GAAO,iBAClB,OAAQ,GAGJ,GAA4B,CAChC,UAAW,GAAO,iBAClB,WAAY,GAAO,0BACnB,cAAe,GAAO,0BACtB,YAAgB,EAAe,gBAAe,MAG1C,GAA4B,CAChC,GAAc,EAAO,CAAE,MAAO,KAC9B,EAAW,KACX,CACE,QAAS,eACT,SAAU,WACV,UAAW,aACX,UAAW,GAAO,UAClB,cAAe,MACf,WAAY,SACZ,SAAU,SACV,aAAc,WACd,WAAY,GAAO,mBACnB,cAAe,GAAO,mBACtB,YAAgB,EAAe,gBAAe,KAC9C,UAAS,GAAA,CACP,aAAc,CACZ,SAAU,SAGZ,EAAC,IAAsB,GAAc,EAAO,CAAE,MAAO,GAAI,YAAa,EAAkB,aAAc,QAI1G,GAAc,CACZ,UAAS,GAAA,GACP,EAAC,GAAoB,EAAA,EAAA,CACnB,WAAY,YACZ,MAAO,iBACJ,MAA8B,CACjC,UAAW,CACT,EAAG,CACD,MAAO,wBAOjB,GAAW,GACX,GAAY,CAAE,QAAS,KAGzB,MAAO,CACL,KAAM,CACJ,EAAW,KACX,GAAoB,UACpB,EACA,EAAM,MAAM,MACZ,GAAkB,EAAW,eAC7B,GAAc,EAAO,CAAE,YAAa,GAAa,aAAc,IAC/D,CACE,aAAc,aAAa,GAC3B,WAAY,EAAO,kBACnB,MAAO,EAAO,gBAEd,QAAS,cACT,SAAU,OACV,UAAW,GAAO,UAClB,WAAY,SACZ,QAAS,EACT,UAAW,aACX,cAAe,MACf,UAAW,OACX,UAAS,GAAA,GACP,EAAC,IAAI,EAAW,mBAAkB,aAAc,CAC9C,QAAS,QAGX,EAAA,WAAW,CACT,WAAY,EAAO,uBACnB,MAAO,EAAO,qBACd,UAAS,GAAA,GACP,EAAC,IAAI,EAAW,aAAgB,CAC9B,MAAO,EAAO,wBAGhB,EAAC,IAAI,EAAW,KAAI,OAAO,GAAqB,MAAS,CACvD,MAAO,QAKb,EAAC,YAAY,EAAW,OAAU,CAChC,QAAS,GAGX,EAAC,IAAI,GAAuB,aAAa,EAAW,OAAU,CAC5D,QAAS,GAGX,EAAA,mBAAmB,CACjB,WAAY,EACZ,SAAU,OAIhB,GAAc,GACd,CAAC,GAAa,GACd,GAAW,GACX,GAGF,aAAc,CACZ,aAAiB,EAAe,iBAAgB,MAGlD,WAAY,CACV,aAAiB,EAAe,sBAAwB,EAAe,iBAAgB,KACvF,UAAS,GAAA,GACP,EAAC,KAAK,EAAW,WAAc,CAC7B,aAAc,OAKpB,KAAM,GACN,cAAe,GAA0B,GAAgB,cACzD,aAAc,CACZ,EAAW,aACX,CACE,SAAU,UACV,WAAY,WAGhB,UAAW,CACT,GACA,EAAW,UACX,EACA,CACE,QAAS,EAIT,WAAY,EACZ,UAAW,GACX,WAAY,IAGhB,WAAY,CACV,SAAU,WACV,IAAK,GACL,KAAM,EACN,OAAQ,EACR,MAAO,EACP,QAAS,EAAc,QAAU,QAEnC,OAAQ,CACN,EAAW,OACX,CACE,QAAS,OACT,WAAY,YAGhB,YAAa,CACX,EAAW,YACX,CACE,MAAO,EAAO,kBACd,SAAU,EAAM,OAAO,UAEzB,GAAc,CACZ,MAAO,EAAO,mBACd,WAAY,GAAY,SACxB,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,MAAO,sBAKf,YAAa,CACX,GACA,CACE,WAAY,SACZ,UAAW,aACX,aAAc,SAGlB,MAAO,CAAC,EAAW,SA5XY,uBCnCnC,GAAM,IAAmB,CACvB,YAAa,iBACb,KAAM,mBACN,KAAM,wBACN,YAAa,+BACb,eAAgB,kCAChB,YAAa,eACb,cAAe,iBACf,kBAAmB,qBACnB,iBAAkB,oBAClB,UAAW,6BACX,WAAY,cACZ,oBAAqB,uCACrB,mBAAoB,sCACpB,kBAAmB,qCACnB,UAAW,6BACX,SAAU,4BACV,cAAe,iCACf,mBAAoB,sCACpB,aAAc,gCACd,MAAO,0BAGI,GAAgB,GAEhB,GAAgB,WAAC,EAA0D,CAC9E,GAAA,GAAqD,EAAK,MAAnD,EAA8C,EAAK,eAAnD,EAAc,IAAA,OAAG,GAAwB,EAChD,EAAmB,EAAK,eAC1B,EAAa,EAAoB,GAAkB,GAEzD,MAAO,CACL,EAAW,KACX,GAAc,GACd,CACE,MAAO,EAAe,SACtB,SAAU,WACV,QAAS,eACT,UAAW,aACX,QAAS,KAAK,EAAe,iBAAgB,QAAQ,EAAe,gBAAe,KACnF,WAAY,UACZ,OAAQ,IACR,OAAQ,GACR,cAAe,MACf,WAAY,SACZ,aAAc,WACd,UAAW,UApBY,iBAyBhB,GAAY,WAAC,EAA+B,aAErD,EAOE,EAAK,MANP,EAME,EAAK,UALP,EAKE,EAAK,cAJP,EAIE,EAAK,iBAHP,EAGE,EAAK,SAFP,EAEE,EAAK,eADP,EACE,EAAK,eADP,EAAc,IAAA,OAAG,GAAwB,EAGnC,EAAmC,EAAK,eAAxB,EAAmB,EAAK,QAAf,EAAU,EAAK,MAC1C,EAAa,EAAoB,GAAkB,GAEnD,EAAS,CACb,oBAAqB,EAAe,YACpC,sBAAuB,EAAe,SACtC,sBAAuB,EAAe,eACtC,aAAc,EAAQ,oBAGlB,EAAgC,CACpC,QAAS,EACT,WAAY,uBAGR,EAAa,GAAc,GAEjC,MAAO,CACL,KAAM,CACJ,EAAW,KACX,EAAM,MACN,CACE,QAAS,eACT,WAAY,EAAO,sBACnB,SAAU,WACV,SAAU,OACV,cAAe,MACf,OAAQ,GACR,WAAY,GACZ,WAAY,SACZ,UAAW,cACX,cAAe,MACf,WAAY,OACZ,aAAc,aAAa,EAAe,YAC1C,OAAQ,UACR,WAAY,OACZ,UAAS,GAAA,GACP,EAAC,YAAY,EAAW,OAAU,CAChC,QAAS,GAEX,EAAC,MAAM,EAAW,YAAW,KAAK,EAAW,cAAiB,CAC5D,QAAS,aAIf,GAAiB,EAAW,cAC5B,GAAoB,EAAW,iBAC/B,GAGF,MAAO,CACL,EAAW,MACX,CACE,OAAQ,IAEV,CACE,UAAS,GAAA,GACP,EAAC,IAAI,GAAuB,YAAa,CACvC,QAAS,QAMjB,kBAAmB,CACjB,aAAc,EAAe,sBAAwB,EAAe,kBAGtE,YAAa,CACX,EACA,EAAW,YACX,CACE,SAAU,WACV,QAAS,EACT,OAAQ,EACR,QAAS,cACT,WAAY,SACZ,OAAQ,QAEV,GAAiB,CACf,QAAS,IAIb,oBAAqB,CACnB,EACA,CACE,QAAS,cACT,WAAY,SACZ,eAAgB,SAChB,SAAU,EAAM,MAAM,SACtB,QAAS,EACT,OAAQ,OACR,MAAO,GACP,MAAO,EAAQ,iBACf,UAAW,CACT,SAAU,CACR,gBAAiB,EAAQ,gBAE3B,UAAW,CACT,gBAAiB,EAAQ,iBAMjC,iBAAkB,CAChB,UAAW,CACT,SAAU,CACR,MAAO,EAAe,SACtB,WAAY,EAAe,6BAE7B,UAAW,CACT,WAAY,EAAe,+BAIjC,YAAa,CACX,aAAc,QAGhB,UAAW,CACT,EAAW,UACX,KACA,CACE,QAAS,eACT,SAAU,WACV,OAAQ,YACR,OAAQ,EACR,IAAK,EACL,SAAU,SACV,OAAQ,UACR,WAAY,cACZ,OAAQ,EACR,MAAO,GACP,UAAS,GAAA,CACP,SAAU,CACR,QAAS,KACT,SAAU,WACV,IAAK,EACL,OAAQ,EACR,MAAO,EACP,WAAY,EAAO,aACnB,QAAS,EACT,KAAM,OAER,eAAgB,EAChB,eAAgB,GAChB,EAAC,KAAK,EAAW,WAAU,UAAW,CACpC,EACA,CACE,UAAW,sCAOrB,eAAgB,EAAW,WAE3B,eAAgB,CACd,OAAQ,UAGV,aAAc,CACZ,OAAQ,EACR,WAAY,KAGd,eAAgB,CACd,EAAW,eACX,CACE,gBAAiB,UACjB,WAAY,wBAEd,EACI,CACE,EAAW,YACX,CACE,UAAW,iBAGf,CACE,UAAW,GAAO,GAAS,iBAAmB,kBAItD,aAAc,EAAW,aAEzB,cAAe,GAAY,CACzB,SAAU,WACV,KAAM,EACN,IAAK,EACL,MAAO,EACP,OAAQ,EACR,OAAQ,YACR,WAAY,yBACZ,UAAS,GAAA,GACP,EAAC,GAAoB,EAAA,CACnB,WAAY,eACT,UAKT,gBAAiB,GAEjB,oBAAqB,CACnB,EAAW,oBACX,CACE,QAAS,eACT,WAAY,SACZ,SAAU,WACV,OAAQ,EACR,OAAQ,EACR,MAAO,EACP,aAAc,MACd,WAAY,GACZ,IAAK,GACL,SAAU,UACV,OAAQ,GACR,OAAQ,aAAa,EAAQ,aAC7B,WAAY,EAAQ,QAIxB,mBAAoB,CAClB,EAAW,mBACX,CACE,QAAS,OACT,SAAU,WACV,IAAK,IACL,KAAM,KACN,SAAU,EAAM,OAAO,SACvB,MAAO,EAAQ,aACf,SAAU,UACV,OAAQ,KAIZ,kBAAmB,CACjB,EAAW,kBACX,CACE,QAAS,OACT,SAAU,WACV,OAAQ,EACR,IAAK,EACL,SAAU,SACV,OAAQ,GACR,MAAO,EACP,WAAY,EAAQ,aACpB,OAAQ,KAIZ,cAAe,CACb,QAAS,eACT,SAAU,cA5QS,aC5DzB,GAAM,IAAmB,CACvB,KAAM,sBACN,WAAY,kCACZ,SAAU,iCAGC,GAAmB,GAEnB,GAAY,WAAC,EAAiC,CACjD,GAAA,GAAqF,EAAK,MAAnF,EAA8E,EAAK,UAAxE,EAAmE,EAAK,SAA9D,EAAyD,EAAK,SAApD,EAA+C,EAAK,YAAvC,EAAkC,EAAK,UAA5B,EAAuB,EAAK,QAAnB,EAAc,EAAK,UAC5F,EAAa,EAAoB,GAAkB,GACjD,EAAgC,GAAmB,UAAxC,EAAqB,GAAmB,iBAErD,EAAS,EAAW,GAAgB,EAAU,EAAmB,EAEjE,EAAiB,GAAa,GAAY,EAEhD,MAAO,CACL,KAAM,CAAC,EAAW,KAAM,GAExB,MAAO,CACL,CAAC,GAAa,EAAW,WACzB,GAAY,EAAW,SACvB,GAAc,GACd,EAAM,MAAM,MACZ,GAAsB,UACtB,CACE,QAAS,OACT,WAAY,SACZ,eAAgB,SAChB,OAAQ,UACR,UAAW,aACX,cAAe,MACf,WAAY,OACZ,gBAAiB,cACjB,OAAQ,OACR,QAAS,EAAiB,EAAI,EAC9B,OAAQ,EACR,MAAO,GACP,QAAS,EACT,OAAQ,IAIZ,WAAY,KApCS,aCLzB,GAAM,IAAmB,CACvB,KAAM,iBACN,QAAS,0BACT,MAAO,uBACP,SAAU,0BACV,OAAQ,wBACR,YAAa,eACb,MAAO,uBACP,WAAY,cACZ,QAAS,eACT,MAAO,uBACP,WAAY,eAGR,GAAU,CACd,YAAa,2CACb,YAAa,2CACb,WAAY,6CAGR,GAA8B,GAC9B,GAA8B,GAEvB,GAAY,WAAC,EAA6B,eAC7C,EAAqD,EAAK,MAAnD,EAA8C,EAAK,UAAxC,EAAmC,EAAK,SAA9B,EAAyB,EAAK,YAAjB,EAAY,EAAK,QAE1D,EAAoB,GAAwB,gBAC9C,EAAiB,EAAU,GAA8B,GAEvD,EAAmC,EAAK,eAAxB,EAAmB,EAAK,QAAf,EAAU,EAAK,MAE1C,EAAa,EAAoB,GAAkB,GAEnD,EAAiC,CACrC,GAAc,GACd,CACE,OAAQ,UACR,WAAY,OACZ,gBAAiB,cACjB,OAAQ,OACR,QAAS,IAIb,MAAO,CACL,KAAM,CACJ,EAAW,KACX,GAAc,GACd,EAAM,MAAM,OACZ,CAEE,aAAc,aAAa,EAAe,eAC1C,OAAQ,UACR,WAAY,OACZ,UAAS,GAAA,CACP,SAAU,CACR,WAAY,EAAe,0BAC3B,MAAO,EAAe,oBAExB,EAAC,YAAY,EAAW,OAAU,CAChC,QAAS,GAEX,EAAC,IAAI,GAAuB,aAAa,EAAW,OAAU,CAC5D,QAAS,GAEX,EAAC,YAAY,EAAW,MAAK,IAAI,EAAW,WAAU,KAAM,CAC1D,UAAS,GAAA,GACP,EAAC,QAAQ,EAAW,KAAI,KAAK,EAAW,UAAa,CACnD,WACE,aAAa,GAAmB,eAAc,IAAI,GAAQ,YAAW,IACrE,YAAW,GAAmB,eAAc,IAAI,GAAQ,aAC1D,gBAAiB,GAAmB,eACpC,QAAS,EACT,UAAW,4BAGb,EAAC,IAAI,EAAW,OAAU,CACxB,QAAS,WAMnB,GAAY,CACV,EAAW,WACX,CACE,WAAY,EAAe,0BAC3B,UAAS,GAAA,CACP,SAAU,CACR,WAAY,EAAe,mCAE7B,EAAC,GAAG,EAAW,OAAU,CACvB,QAAS,QAKjB,GAAW,CAAC,EAAW,QAAS,CAAE,OAAQ,SAC1C,GAEF,qBAAsB,CACpB,CACE,QAAS,OACT,WAAY,SACZ,OAAQ,IAGZ,YAAa,CACX,CACE,QAAS,YAGb,MAAO,CACL,EAAW,MACX,EACA,CACE,QAAS,OACT,WAAY,SACZ,eAAgB,SAKhB,WAAY,EACZ,UAAW,GACX,QAAS,EACT,MAAO,GACP,OAAQ,EACR,UAAS,GAAA,GACP,EAAC,IAAI,GAAuB,YAAa,CACvC,QAAS,QAKjB,OAAQ,CACN,EAAW,OACX,EACA,CACE,QAAS,OACT,WAAY,SACZ,eAAgB,SAChB,SAAU,EAAM,MAAM,SACtB,MAAO,GACP,OAAQ,EACR,MAAO,EAAW,EAAQ,eAAiB,EAAQ,iBACnD,UAAW,CACT,SAAU,CACR,gBAAiB,EAAW,EAAQ,kBAAoB,EAAQ,cAElE,UAAW,CACT,gBAAiB,EAAW,EAAQ,mBAAqB,EAAQ,yBAKzE,kBAAmB,CACjB,EACI,CACE,EAAW,YACX,CACE,UAAW,eACX,gBAAiB,UACjB,WAAY,yBAGhB,CACE,UAAW,GAAO,GAAS,iBAAmB,gBAC9C,gBAAiB,UACjB,WAAY,yBAGpB,MAAO,CACL,EAAW,MACX,CACE,YAAa,EACb,SAAU,EAAU,EAAM,OAAO,SAAW,EAAM,WAAW,SAC7D,WAAY,EAAc,GAAY,QAAU,GAAY,SAC5D,OAAQ,UACR,QAAS,EACT,WAAY,SACZ,aAAc,aAGlB,SAAU,CACR,EAAW,SACX,CACE,SAAU,WACV,KAAM,IACN,SAAU,GAAc,MACxB,MAAO,EAAQ,iBACf,WACE,aAAa,GAAmB,eAAc,IAAI,GAAQ,WAAU,KACpE,YAAW,GAAmB,eAAc,IAAI,GAAQ,aAC1D,QAAS,EACT,UAAW,6BACX,gBAAiB,YACjB,UAAS,GAAA,GACP,EAAC,YAAY,EAAW,QAAO,KAAM,CACnC,SAAU,mBAhLG,aChCzB,MAAuB,OAgBvB,GAAM,IAAgB,IAOtB,GAAA,SAAA,EAAA,CAAqC,EAAA,EAAA,GA2BnC,WAAY,EAAwB,CAApC,GAAA,GACE,EAAA,KAAA,KAAM,IAAM,KAoIN,SAAA,gBAAkB,UAAA,CAClB,GAAA,GAA8C,EAAK,MAAjD,EAAK,EAAA,MAAE,EAAgB,EAAA,iBAAE,EAAc,EAAA,eACvC,EAAgB,EAAK,MAAK,YAE5B,EAAe,CAAC,EAChB,EAAoB,CAAC,GAAgB,GAAkB,EAAe,GAE5E,EAAK,SAAS,CACZ,YAAa,EACb,iBAAkB,IAEhB,GACF,EAAiB,IAIb,EAAA,SAAW,SAAC,EAAoC,CAChD,GAAA,GAAgC,EAAK,MAAnC,EAAK,EAAA,MAAE,EAAkB,EAAA,mBAMjC,GAJI,GACF,EAAmB,EAAI,GAGrB,CAAC,EAAG,iBAAkB,CAExB,GAAM,GAAa,EAAK,MAAM,aAAe,EAAG,QAAU,GAAkB,EAAS,MAAO,EAAK,MAAM,OAEjG,EAAc,CAAC,EAAK,MAAM,aAAe,EAAG,QAAU,GAAkB,EAAS,KAAM,EAAK,MAAM,OACxG,AAAI,IAAe,IACjB,GAAK,kBACL,EAAG,kBACH,EAAG,oBAKD,EAAA,eAAiB,SAAC,EAAiC,CACzD,EAAK,kBACL,EAAG,kBACH,EAAG,kBAGG,EAAA,0BAA4B,SAAC,EAAiC,CAC9D,GAAA,GAAiC,EAAK,MAApC,EAAmB,EAAA,oBAAE,EAAK,EAAA,MAElC,AAAI,GACF,EAAoB,GAGtB,EAAG,iBACH,EAAG,mBAGG,EAAA,eAAiB,UAAA,CACjB,GAAA,GAAqD,EAAK,MAAxD,EAAK,EAAA,MAAE,EAAkB,EAAA,mBAAE,EAAmB,EAAA,oBAEtD,AAAI,EACF,EAAmB,GACV,GACT,EAAoB,IAYhB,EAAA,eAAiB,SAAC,EAAwB,CACxC,GAAA,GAAuB,EAAK,MAArB,EAAgB,EAAK,YAEpC,MAAK,GAKH,AAAA,gBAAA,MAAA,CAAK,UAAW,EAAK,YAAY,MAAO,GAAI,EAAK,IAAK,KAAK,WAAU,eAAe,GAClF,AAAA,gBAAA,OAAA,KAAO,EAAM,MAOb,AAAA,gBAAA,OAAA,CAAM,UAAW,EAAK,YAAY,iBAC9B,EAAM,MACP,EAAM,aAAe,UAdnB,MA7MT,EAAK,IAAM,GAAM,eAEjB,EAAK,MAAQ,CACX,YAAc,EAAK,MAAM,OAAS,EAAK,MAAM,MAAM,YACnD,iBAAkB,MAPtB,8BAnBc,EAAA,yBAAd,SACE,EACA,EAAgC,CAEhC,GAAI,EAAU,MAAO,CACnB,GAAM,GAAe,EAAU,MAAM,YAC/B,EAAiB,EAAU,eAC3B,EAAoB,CAAC,GAAgB,GAAkB,EAAe,EAAU,OAEtF,MAAA,GAAA,EAAA,GACK,GAAa,CAChB,YAAa,GAAgB,GAC7B,iBAAkB,GAAqB,KAI3C,MAAO,IAcF,EAAA,UAAA,OAAP,UAAA,CACQ,GAAA,GAwBF,KAAK,MAvBP,EAAK,EAAA,MACL,EAAA,EAAA,WAAA,EAAU,IAAA,OAAG,EAAC,EACd,EAAQ,EAAA,SACR,EAAa,EAAA,cACb,EAAW,EAAA,YAEX,EAAA,EAAA,WAAA,EAAU,IAAA,OAAG,GAAK,EAClB,EAAA,EAAA,SAAA,EAAQ,IAAA,OAAG,GAAK,EAChB,EAAW,EAAA,YACX,EAAA,EAAA,cAAA,EAAa,IAAA,OAAG,KAAK,eAAc,EACnC,EAA2B,EAAA,4BAC3B,EAAA,EAAA,8BAAA,EAA6B,IAAA,OAAG,GAAI,EACpC,EAAiB,EAAA,kBACjB,EAAgB,EAAA,iBAChB,EAAoB,EAAA,qBACpB,EAAK,EAAA,MACL,EAAM,EAAA,OACN,EAAS,EAAA,UACT,EAAO,EAAA,QACP,EAAY,EAAA,aACZ,EAAW,EAAA,YACX,EAAY,EAAA,aACZ,EAAY,EAAA,aAGR,EAAwB,EAAe,KAAK,2BAA6B,KAAK,uBAE9E,GAAmB,EACrB,GAAsB,EAA6B,GACnD,EAEE,EAAoC,KAAK,MAAvC,GAAW,EAAA,YAAE,EAAgB,EAAA,iBAE/B,EAAiB,IAAkB,EAAc,SACjD,GAA0B,GAAmB,IAAiC,CAAE,IAAS,EAAM,cAC/F,GAAoB,GAAY,EAEhC,EAAQ,GAAO,GAUrB,MARA,MAAK,YAAc,GAAc,EAAQ,CACvC,MAAO,EACP,UAAS,EACT,SAAU,GACV,YAAW,GACX,QAAO,IAGL,AAAC,EAKH,AAAA,gBAAA,MAAA,CACE,UAAW,KAAK,YAAY,KAC5B,MAAO,EAAW,CAAE,SAAU,EAAS,OAAU,GACjD,QAAS,KAAK,eACd,KAAK,MAAK,eACI,EAAW,gBACV,EAAY,gBACZ,EAAY,oBACR,GACnB,QAAS,KAAK,SAAQ,aACV,EAAM,UAAS,kBACV,EAAM,UAAY,OAAY,KAAK,IAAG,gBACxC,CAAC,KAAK,MAAM,YAAW,gBACvB,EAAiB,GAAoB,OAAS,aACjD,EAAa,GAEzB,AAAA,gBAAA,MAAA,CAAK,UAAW,KAAK,YAAY,qBAAsB,KAAK,gBACzD,GACC,AAAA,gBAAA,MAAA,CAAK,KAAK,YACR,AAAA,gBAAA,SAAA,EAAA,CAAA,oBACqB,GACnB,KAAK,SACL,UAAW,KAAK,YAAY,MAC5B,KAAK,WACL,GAAO,KAAK,IAAG,SAAQ,eACT,GAAiB,kBACX,KAAK,IAAG,UAAU,KAAK,IAAK,wBACzB,GACvB,QAAS,KAAK,2BACV,GAEH,GAAiB,CAAE,QAAS,GAAmB,MAAK,GAAI,MAM7D,IAAkB,EAAc,MAAQ,AAAA,gBAAC,GAAW,CAAC,YAAa,GAAkB,MAAO,IAG7F,AAAA,gBAAC,GAAW,CAAC,YAAa,EAAa,MAAO,IAE9C,AAAA,gBAAA,MAAA,CAAK,UAAW,KAAK,YAAY,SAAU,KAAK,gBAC9C,AAAA,gBAAC,GAAI,CAAC,SAAS,SAEjB,AAAA,gBAAA,MAAA,CAAK,KAAK,YACR,AAAA,gBAAA,SAAA,EAAA,CAAA,oBACqB,GACnB,KAAK,SACL,UAAW,KAAK,YAAY,OAC5B,QAAS,KAAK,eAAc,gBACb,CAAC,KAAK,MAAM,aACvB,GAEJ,AAAA,gBAAC,GAAI,CACH,UAAW,KAAK,YAAY,kBAC5B,SAAU,GAAqB,GAAQ,iBAAmB,uBAK/D,EAAc,KAAK,MAAO,KAAK,gBAC/B,GAAoB,AAAA,gBAAC,GAAO,CAAC,MAAO,MAlElC,MAuIH,EAAA,UAAA,uBAAR,SAA+B,EAAwC,CACrE,MAAO,AAAA,iBAAC,GAAK,CAAC,QAAS,EAAc,WAG/B,EAAA,UAAA,2BAAR,SAAmC,EAAwC,CACzE,MAAO,AAAA,iBAAC,GAAS,CAAC,MAAO,EAAc,MAAO,QAAS,EAAc,WAnOzD,EAAA,aAAkC,CAC9C,kBAAmB,CAAE,aAAc,0BA4PvC,GA9P2C,aAgQ3C,GAAM,IAAY,AAAM,OAAK,SAAC,EAAgE,CAC5F,MAAO,AAAA,iBAAC,GAAK,CAAC,MAAO,EAAM,MAAO,QAAS,EAAM,QAAS,UAAW,EAAM,UAAW,aAAY,OClR7F,GAAM,IAA0D,EAIrE,GAAiB,GAAW,OAAW,CACvC,MAAO,gBCRT,GAAM,IAAmB,CACvB,KAAM,kBACN,KAAM,WAGK,GAAY,WAAC,EAA8B,OAC9C,EAAU,EAAK,MACf,EAAU,EAAK,MAEjB,EAAa,EAAoB,GAAkB,GAEzD,MAAO,CACL,KAAM,CACJ,EAAW,KACX,CACE,SAAU,WACV,QAAS,YACT,OAAQ,UACR,UAAS,GAAA,GACP,EAAC,IAAI,EAAW,MAAS,CACvB,SAAU,EAAM,MAAM,iBAfT,aCRzB,OAAuB,OACvB,GAA4B,OAM5B,GAAM,IAAgB,IAET,GAAgE,WAAA,EAAK,CACxE,GAAA,GAAsF,EAAK,MAApF,EAA+E,EAAK,WAAxE,EAAmE,EAAK,gBAAxE,EAAe,IAAA,OAAG,WAAU,EAAE,EAAqC,EAAK,OAAlC,EAA6B,EAAK,MAA3B,EAAsB,EAAK,kBAC7F,EAAa,GAAc,EAAQ,CAAE,MAAO,IAE5C,EAAkB,mBACtB,SAAC,EAAiC,CAChC,EAAmB,GAEnB,EAAG,kBACH,EAAG,kBAEL,CAAC,EAAmB,IAGtB,MAAI,GAEA,AAAA,iBAAA,MAAA,CAAK,UAAW,EAAW,MACzB,AAAA,iBAAC,GAAW,CAAC,MAAO,IACpB,AAAA,iBAAC,GAAI,CAAC,QAAS,GAAkB,IAKhC,MAvBoE,oBCHtE,GAAM,IAA4D,EAIvE,GAAkB,GAAW,OAAW,CAAE,MAAO,iBCPnD,GAAM,IAAmB,CACvB,KAAM,kBAGK,GAAY,WAAC,EAA6B,CAC7C,GAAA,GAAqB,EAAK,MAAnB,EAAc,EAAK,UAC5B,EAAa,EAAoB,GAAkB,GAEzD,MAAO,CACL,KAAM,CACJ,EAAM,MAAM,OACZ,EAAW,KACX,CACE,SAAU,WACV,QAAS,YAEX,KAZmB,aCPzB,OAAuB,OAKvB,GAAM,IAAgB,IAET,GAA8D,WAAA,EAAK,CACtE,GAAA,GAA8D,EAAK,MAA5D,EAAuD,EAAK,WAAhD,EAA2C,EAAK,WAApC,EAA+B,EAAK,YAAvB,EAAkB,EAAK,OAAf,EAAU,EAAK,MACrE,EAAa,GAAc,EAAQ,CAAE,MAAO,IAElD,MAAI,IAAS,EAET,AAAA,iBAAA,MAAA,CAAK,UAAW,EAAW,MACzB,AAAA,iBAAC,GAAW,CAAC,YAAa,EAAa,MAAO,IAC7C,GAKA,MAbkE,mBCDpE,GAAM,IAA0D,EAIrE,GAAiB,GAAW,OAAW,CACvC,MAAO,gBZoGT,GAAM,IAA6B,cAEnC,GAAA,SAAA,EAAA,CAAwC,EAAA,EAAA,GAUtC,WAAY,EAA+B,CAA3C,GAAA,GACE,EAAA,KAAA,KAAM,IAAM,KAVN,EAAA,MAAQ,AAAM,eACd,EAAA,MAAQ,AAAM,eACd,EAAA,cAA2D,GAK3D,EAAA,mBAA6B,GAuL7B,EAAA,qBAAuB,SAAC,EAAwB,CACtD,MAAO,AAAA,kBAAC,GAAW,EAAA,GAAK,KAGlB,EAAA,sBAAwB,SAAC,EAAyB,CACxD,MAAO,AAAA,kBAAC,GAAY,EAAA,GAAK,KAGnB,EAAA,qBAAuB,SAAC,EAAwB,CACtD,MAAO,AAAA,kBAAC,GAAW,EAAA,GAAK,KA6ClB,EAAA,gBAAkB,SAAC,EAAkB,EAAqB,CAC1D,GAAA,GAsBF,EAAK,MArBP,EAAc,EAAA,eACd,EAAc,EAAA,eACd,EAAgB,EAAA,iBAChB,EAAiB,EAAA,kBACjB,EAAiB,EAAA,kBACjB,EAAU,EAAA,WACV,EAAK,EAAA,MACL,EAAW,EAAA,YACX,EAAY,EAAA,aACZ,EAAW,EAAA,YACX,EAAS,EAAA,UACT,EAAY,EAAA,aACZ,EAAS,EAAA,UACT,EAAa,EAAA,cACb,EAAQ,EAAA,SACR,EAAmB,EAAA,oBACnB,EAAoB,EAAA,qBACpB,EAAmB,EAAA,oBACnB,EAAkB,EAAA,mBAClB,EAAK,EAAA,MACL,EAAO,EAAA,QAGH,EAAe,EAAS,MAAQ,EAAS,MAAQ,EAAI,EAE3D,MAAO,CAAC,GAAY,EAAS,MAAQ,GAAM,GAAc,EAAW,gBAClE,AAAA,iBAAC,EAAkB,CACjB,IAAK,SAAA,GAAG,CAAI,MAAC,GAAK,cAAc,YAAc,GAAiB,IAC/D,IAAK,EAAK,aAAa,EAAU,GACjC,eAAgB,EAChB,eAAgB,EAChB,iBAAkB,EAClB,YAAa,EACb,kBAAmB,EACnB,MAAO,EACP,WAAY,EACZ,kBAAmB,EACnB,WAAY,EACZ,YAAa,EACb,MAAO,EACP,UAAW,EACX,aAAc,EACd,UAAW,EACX,cAAe,EACf,aAAc,EACd,SAAU,EACV,oBAAqB,EACrB,qBAAsB,EACtB,oBAAqB,EACrB,mBAAoB,EACpB,OAAQ,EAAQ,EAAM,SAAW,GACjC,QAAS,IAET,MAcE,EAAA,yBAA2B,UAAA,CAC3B,GAAA,GAA0D,EAAK,MAA7D,EAAK,EAAA,MAAE,EAAU,EAAA,WAAE,EAAc,EAAA,eAAE,EAAgB,EAAA,iBACrD,EAAU,CACd,SAAU,EACV,eAAgB,GAChB,QAAS,CAAE,KAAM,EAAO,MAAO,EAAY,QAAS,IACpD,gBAAiB,EAAK,qBACtB,QAAS,EAAgB,QACzB,QAAS,EAAgB,QACzB,OAAQ,EAAgB,OACxB,YAAa,EAAgB,YAC7B,YAAa,EAAgB,YAC7B,YAAa,EAAgB,YAC7B,UAAW,EAAgB,UAC3B,WAAY,EAAgB,YAE9B,MAAO,IASD,EAAA,qBAAuB,SAAC,EAAwB,EAAgB,CAC9D,GAAA,GAAe,EAAK,MAAK,WAC3B,EAA4B,EAAK,MAA/B,EAAc,EAAA,eAAE,EAAK,EAAA,MAE7B,AAAI,IAAe,GACjB,CAAI,EACE,GAAkB,EAAe,aACnC,EAAe,YAAY,EAAO,GAGhC,GAAkB,EAAe,aACnC,GAAK,mBAAqB,EAAe,YAAY,EAAO,IAIhE,EAAK,SAAS,CAAE,WAAY,MArVtB,GAAA,GAAqB,EAAK,UAAf,EAAU,EAAK,MAElC,SAAuB,GAEvB,EAAK,IAAM,GAAM,sBAEjB,EAAK,MAAQ,CACX,WAAY,GACZ,WAAY,GAAa,EAAQ,EAAU,gBAAgB,EAAM,WAAY,EAAM,OAAS,IAG9F,EAAK,QAAU,GAAI,GAAW,KAdhC,iCAiBO,EAAA,UAAA,kBAAP,UAAA,CACQ,GAAA,GAAgC,KAAK,MAAnC,EAAc,EAAA,eAAE,EAAS,EAAA,UAEjC,AAAI,GAAkB,KAAK,MAAM,SAC/B,MAAK,sBAAwB,EAAe,UAC1C,KAAK,MAAM,QACX,KAAK,QACL,KAAK,6BAIL,GACF,KAAK,QAAQ,GAAG,EAAW,GAAkB,KAAK,qBAI/C,EAAA,UAAA,qBAAP,UAAA,CACE,KAAK,QAAQ,UAET,KAAK,uBACP,KAAK,sBAAsB,WAIxB,EAAA,UAAA,mBAAP,SAA0B,EAAuC,CAC/D,AACE,MAAK,MAAM,QAAU,EAAc,OACnC,KAAK,MAAM,aAAe,EAAc,YACxC,KAAK,MAAM,iBAAmB,EAAc,iBAExC,MAAK,uBACP,MAAK,sBAAsB,UAC3B,MAAO,MAAK,uBAGV,KAAK,MAAM,gBAAkB,KAAK,MAAM,SAC1C,MAAK,sBAAwB,KAAK,MAAM,eAAe,UACrD,KAAK,MAAM,QACX,KAAK,QACL,KAAK,+BAMN,EAAA,UAAA,OAAP,UAAA,CACQ,GAAA,GAiBF,KAAK,MAhBP,EAAiB,EAAA,kBACjB,EAAK,EAAA,MACL,EAAU,EAAA,WACV,EAAW,EAAA,YACX,EAAY,EAAA,aACZ,EAAW,EAAA,YACX,EAAQ,EAAA,SACR,EAAa,EAAA,cACb,EAAA,EAAA,oBAAA,EAAmB,IAAA,OAAG,KAAK,qBAAoB,EAC/C,EAAA,EAAA,qBAAA,EAAoB,IAAA,OAAG,KAAK,sBAAqB,EACjD,EAAA,EAAA,oBAAA,EAAmB,IAAA,OAAG,KAAK,qBAAoB,EAC/C,EAAkB,EAAA,mBAClB,EAAqB,EAAA,sBACrB,EAAM,EAAA,OACN,EAAO,EAAA,QACP,EAAA,EAAA,UAAA,EAAS,IAAA,OAAG,GAAE,EAER,EAAe,KAAK,MAAK,WAC3B,EAAc,GAAS,EAAoB,EAAkB,GAAS,IACtE,EACJ,GACA,CAAC,EAAM,UACP,CAAC,EAAM,aACP,CAAC,EAAM,cACN,GAAM,MAAQ,GAAe,EAAM,aAChC,EAAkB,GAAS,EAAM,UAAY,EAAM,SAAS,OAAS,EAEnE,EAAY,EAAS,QAEvB,EAAmC,CACvC,MAAK,EACL,WAAU,EACV,WAAY,EAAQ,EAAM,MAAQ,EAClC,WAAU,EACV,SAAU,EACV,SAAQ,EACR,cAAa,EACb,OAAM,EACN,QAAO,GAGH,EAAuC,CAC3C,cAAe,KAAK,IACpB,YAAa,EAAS,EAAO,OAAS,OACtC,aAAc,IAAe,OAAY,EAAa,EAAI,QAGtD,EAAgB,EAAA,EAAA,EAAA,GAA2B,GAAgB,GAAiB,GAC5E,GAAiB,EAAA,EAAA,GAA4B,GAAiB,GAC9D,EAAgB,EAAA,EAAA,GAA2B,GAAgB,GAE3D,GACJ,CAAC,CAAC,KAAK,MAAM,gBACb,KAAK,2BAA2B,QAAS,IACzC,CAAC,CAAC,KAAK,MAAM,eAAgB,cAE/B,MACE,AAAA,kBAAA,MAAA,EAAA,CACE,IAAK,KAAK,OACL,IAAe,CAAE,UAAW,IAAO,CACxC,UAAW,GAAI,GAAyB,EAAsB,MAAO,KAAK,yBAC1E,KAAK,iBAEJ,EAAoB,EAAkB,KAAK,sBAC3C,GAAS,EAAM,YAAc,KAAO,EACnC,AAAA,iBAAC,GAAI,CACH,KAAK,eACL,IAAK,KAAK,MACV,MAAO,EAAQ,EAAM,SAAW,GAChC,aAAc,KAAK,gBACnB,oBAAqB,KAAK,WAC1B,mBAAoB,EACpB,QAAS,EACT,GAAI,KAAK,MAGX,KAAK,eAAe,GAErB,GAAS,EAAM,YACZ,KACA,GAAoB,EAAqB,GAAmB,KAAK,uBACpE,EAAoB,EAAkB,KAAK,wBAK3C,EAAA,UAAA,YAAP,UAAA,CACE,EAAA,UAAM,YAAW,KAAA,MACjB,KAAK,mBAGA,EAAA,UAAA,gBAAP,UAAA,CACU,GAAA,GAAU,KAAK,MAAK,MAE5B,GAAI,KAAK,MAAM,SAGb,GAFA,KAAK,MAAM,QAAQ,cAEf,GAAS,EAAM,UAAY,EAAM,SAAS,OAAS,EAGrD,OAFM,GAAgB,EAAM,SAAS,OAE5B,EAAI,EAAG,EAAI,EAAe,IAAK,CACtC,GAAM,GAAW,KAAK,MAAM,QAAQ,SAAS,YAAc,OAAO,IAElE,AAAI,GACF,EAAS,uBAIV,CACL,GAAM,GAAW,KAAK,cAAc,YAAc,OAAO,IAEzD,AAAI,GACF,EAAS,oBAiBP,EAAA,UAAA,mBAAR,UAAA,CACQ,GAAA,GAAuB,KAAK,MAA1B,EAAK,EAAA,MAAE,EAAS,EAAA,UACxB,GAAI,GAAa,EAAO,CACtB,GAAM,GAAa,EAAU,gBAAgB,EAAM,WAAY,EAAM,OAErE,AAAI,IAAe,KAAK,MAAM,YAC5B,KAAK,SAAS,CAAE,WAAU,MAKxB,EAAA,UAAA,mBAAR,SACE,EACA,EACA,EAAyB,CAEzB,MAAO,UAAC,EAAW,EAA6B,CAC9C,MAAO,GAAa,EAAmB,EAAM,EAAW,KAIpD,EAAA,UAAA,eAAR,SAAuB,EAAmB,CAClC,GAAA,GAA+F,KAAK,MAAlG,EAAK,EAAA,MAAE,EAAK,EAAA,MAAE,EAAY,EAAA,aAAE,EAAS,EAAA,UAAE,EAAiB,EAAA,kBAAE,EAAkB,EAAA,mBAAE,EAAU,EAAA,WAC1F,EAAQ,GAAS,CAAC,EAAM,aAAe,EAAM,MAAQ,EAAM,OAC3D,EAAa,EAAQ,EAAM,WAAa,EAE9C,MACE,AAAA,kBAAC,GAAI,EAAA,CACH,KAAM,GAAc,EAAW,KAAO,EAAW,KAAO,WAAU,aACtD,GAAK,KAAA,OAAL,EAAO,KACnB,MAAO,EACP,aAAc,KAAK,mBAAmB,EAAc,EAAmB,GACvE,IAAK,KAAK,MACV,YAAa,KAAK,IAAI,EAAO,GAC7B,WAAY,EACZ,mBAAoB,EACpB,GAAI,KAAK,KACL,KA+DF,EAAA,UAAA,WAAR,UAAA,CACE,MAAO,IAGD,EAAA,UAAA,aAAR,SAAqB,EAAe,EAAa,CAC/C,MAAO,SAAY,IAAS,EAAM,IAAM,EAAM,IAAM,OAAO,EAAM,OAAS,OAAO,KAyD3E,EAAA,UAAA,sBAAR,UAAA,CACQ,GAAA,GAAe,KAAK,MAAK,WACzB,EAAmC,KAAK,MAAtC,EAAK,EAAA,MAAE,EAAqB,EAAA,sBAEpC,SAAa,CAAC,CAAE,IAAS,GAElB,GACL,GAAc,KAAK,mBACnB,GAAc,GACd,GAAc,GAAyB,EAAsB,kBAGnE,GAzX8C,cD7F9C,GAAM,IAAgB,IACH,GAAqD,GAAmB,UAA1C,GAAuB,GAAmB,iBAW3F,GAAA,SAAA,EAAA,CAAqC,EAAA,EAAA,GAmEnC,WAAY,EAAwB,CAApC,GAAA,GACE,EAAA,KAAA,KAAM,IAAM,KA1DN,EAAA,MAAQ,AAAM,eA8Kd,EAAA,aAAe,SAAC,EAA2B,EAAkB,CAC7D,GAAA,GAcF,EAAK,MAbP,EAAc,EAAA,eACd,EAAc,EAAA,eACd,EAAgB,EAAA,iBAChB,EAAU,EAAA,WACV,EAAK,EAAA,MACL,EAAS,EAAA,UACT,EAAY,EAAA,aACZ,EAAa,EAAA,cACb,EAAS,EAAA,UACT,EAAQ,EAAA,SACR,EAAkB,EAAA,mBAClB,EAAM,EAAA,OACN,EAAO,EAAA,QAIH,EAAe,CACnB,oBAAqB,EAAK,qBAC1B,iBAAkB,EAAK,kBACvB,kBAAmB,EAAK,oBAGpB,EAAW,EAAA,EAAA,GAA2B,EAAY,aAAgB,GAClE,EAAY,EAAA,EAAA,GAA4B,EAAY,cAAiB,GACrE,EAAW,EAAA,EAAA,GAA2B,EAAY,aAAgB,GAClE,EAAoB,EAAK,wBAE/B,GAAI,CAAC,EAAY,iBAAmB,GAAS,EAAM,QAAU,EAC3D,MAAO,MAGT,GAAM,GAAc,EAAA,EAAA,GACd,GAAa,IAAG,CACpB,QAAS,EAAK,MAAM,UAGtB,MACE,AAAA,kBAAC,GAAkB,CACjB,IAAK,EAAK,aAAa,EAAO,GAC9B,eAAgB,EAChB,eAAgB,EAChB,iBAAkB,EAClB,YAAa,EACb,kBAAmB,GAAc,EAAW,kBAC5C,MAAO,EACP,WAAY,EACZ,kBAAmB,EACnB,WAAY,EACZ,YAAa,EACb,UAAW,EACX,MAAO,EACP,aAAc,EACd,oBAAqB,EAAY,eACjC,qBAAsB,EAAY,gBAClC,oBAAqB,EAAY,eACjC,cAAe,EACf,UAAW,EACX,aAAc,EACd,SAAU,EACV,mBAAoB,EACpB,sBAAuB,EAAK,YAC5B,OAAQ,EACR,QAAS,KASP,EAAA,0BAA4B,SAAC,EAAa,CAChD,MAAO,GAAM,UAAY,EAAM,SAAS,OAAS,EAAI,EAAM,SAAS,OAAS,EAAM,OAG7E,EAAA,mBAAqB,SAAC,EAAa,CACjC,GAAA,GAAe,EAAK,MAAK,WAC3B,EACJ,GAAc,EAAW,kBAAoB,EAAW,kBAAoB,EAAK,0BAEnF,MAAO,GAAkB,IAGnB,EAAA,gBAAkB,SAAC,EAAa,CACtC,GAAM,GAAY,EAAK,MAAM,QAAU,GAAqB,GAE5D,MAAO,GAAa,GAAM,YAAc,EAAI,EAAY,EAAK,mBAAmB,KAG1E,EAAA,eAA8C,SAAC,EAAiB,CAC9D,GAAA,GAAW,EAAK,MAAK,OACrB,EAA0C,EAAK,MAAK,eAApD,EAAc,IAAA,OAAG,EAAK,gBAAe,EACvC,EAAY,GAAU,EAAO,GAEnC,MAAI,GACK,EAAe,EAAW,GAE1B,GAqBH,EAAA,kBAAoB,SAAC,EAAa,CAChC,GAAA,GAAe,EAAK,MAAK,WAC3B,EAAmB,GAAc,EAAW,aAAe,EAAW,YAAY,iBAExF,AAAI,GACE,IACF,EAAiB,GAGnB,EAAM,YAAc,CAAC,EAAM,YAC3B,EAAK,6BACL,EAAK,gBAID,EAAA,qBAAuB,SAAC,EAAa,CACrC,GAAA,GAA+B,EAAK,MAAlC,EAAS,EAAA,UAAE,EAAa,EAAA,cAEhC,AAAI,GAAS,GAAa,IAAkB,EAAc,UACxD,EAAU,oBAAoB,EAAM,WAAY,EAAM,QAIlD,EAAA,sBAAwB,SAAC,EAAoC,CAEnE,MAAO,GAAG,QAAU,GAAkB,EAAS,QASzC,EAAA,mBAAqB,SAAC,EAAa,CACjC,GAAA,GAAe,EAAK,MAAK,WAC3B,EAAoB,GAAc,EAAW,cAAgB,EAAW,aAAa,kBAE3F,AAAI,EACF,EAAkB,GAEd,IACF,GAAM,aAAe,CAAC,EAAM,cAG9B,EAAK,gBAID,EAAA,sBAAwB,SAC9B,EAAiB,CAIjB,GAAM,GAAS,EAAK,MAAM,OACpB,EAAY,GAAU,EAAO,GACnC,MAAO,CACL,IAAK,GAAa,EAAU,MAnS9B,EAAuB,GAEvB,EAAK,qBAAuB,EAAK,4BAA4B,EAAM,QAE3D,GAAA,GAAqC,EAAK,UAA1C,EAAA,IAAA,OAA8B,GAAE,EAAnB,EAAA,EAAA,QAAA,EAAO,IAAA,OAAG,GAAE,EAEjC,SAAK,MAAQ,CACX,OAAQ,EAAM,OACd,MAAO,EAAM,MACb,UAAW,EAAM,UACjB,QAAO,KAbX,8BArDc,EAAA,yBAAd,SACE,EACA,EAAgC,CAExB,GAAA,GAAqD,EAAS,OAAtD,EAA6C,EAAS,cAAvC,EAA8B,EAAS,QAA9B,EAAqB,EAAS,MAAvB,EAAc,EAAS,UAChE,EAAc,GAAa,EAAU,QAEvC,EAAS,EAAA,EAAA,GACR,GAAa,CAChB,cAAa,EACb,QAAO,EACP,OAAM,EACN,UAAS,IAGP,EAAqB,GAEnB,EAAsB,EAAc,WAAa,EAAc,UAAU,QAE/E,MACE,KAAgB,GAChB,IAAU,EAAc,OACxB,IAAW,EAAc,QACzB,IAAkB,EAAc,eAChC,IAAY,EAAc,UAK1B,GAAqB,IAGnB,IAAW,EAAc,QAC3B,GAAS,EAAA,EAAA,GACJ,GAAS,CACZ,OAAM,KAIN,KAAkB,EAAc,eAAiB,IAAY,EAAc,UAC7E,GAAqB,IAGnB,GACF,GAAS,EAAA,EAAA,GACJ,GAAS,CACZ,QAAS,MAIN,GAoBF,EAAA,UAAA,cAAP,SAAqB,EAAe,EAA6C,EAA2B,CAC1G,AAAI,KAAK,MAAM,SACb,KAAK,MAAM,QAAQ,cAAc,EAAO,EAAa,IAIlD,EAAA,UAAA,wBAAP,UAAA,CACE,MAAO,MAAK,MAAM,QAAS,2BAA6B,GAGnD,EAAA,UAAA,kBAAP,UAAA,CACQ,GAAA,GAA8B,KAAK,MAAjC,EAAU,EAAA,WAAE,EAAA,EAAA,OAAA,EAAM,IAAA,OAAG,GAAE,EAE/B,AAAI,GAAc,EAAW,sBAC3B,KAAK,yBAAyB,EAAQ,EAAW,uBAI9C,EAAA,UAAA,OAAP,UAAA,CACQ,GAAA,GAUF,KAAK,MATP,EAAS,EAAA,UACT,EAAY,EAAA,aACZ,EAAkB,EAAA,mBAClB,EAAK,EAAA,MACL,EAAA,EAAA,KAAA,EAAI,IAAA,OAAG,WAAU,EACjB,EAAM,EAAA,OACN,EAAO,EAAA,QACP,EAAA,EAAA,eAAA,EAAc,IAAA,OAAG,GAAE,EACnB,EAAA,EAAA,cAAA,EAAa,IAAA,OAAG,GAAE,EAEd,EAAsB,KAAK,MAAzB,EAAM,EAAA,OAAE,EAAO,EAAA,QAEvB,KAAK,YAAc,GAAc,EAAQ,CACvC,MAAO,EACP,UAAS,EACT,QAAS,IAGH,GAAA,GAAsD,EAAc,qBAApE,EAAoB,IAAA,OAAG,KAAK,sBAAqB,EAEzD,MACE,AAAA,kBAAC,GAAS,EAAA,CACR,UAAW,GAAmB,SAAQ,oBACpB,cAAa,qBACZ,QACnB,KAAK,gBACD,EAAc,CAClB,qBAAsB,EACtB,UAAW,GAAI,KAAK,YAAY,KAAM,EAAe,aAEpD,AAAC,EAGA,AAAA,iBAAC,GAAI,EAAA,CACH,IAAK,KAAK,MACV,KAAM,EACN,MAAO,EACP,aAAc,KAAK,aACnB,oBAAqB,KAAK,WAC1B,cAAe,KAAK,eACpB,qBAAsB,KAAK,sBAC3B,aAAc,EACd,mBAAoB,EACpB,QAAS,GACL,IAbN,KAAK,aAAa,OAAW,KAoB9B,EAAA,UAAA,YAAP,UAAA,CACE,EAAA,UAAM,YAAW,KAAA,MACjB,KAAK,qBAGA,EAAA,UAAA,kBAAP,SAAyB,EAAqB,CACpC,GAAA,GAAgB,KAAK,MAAK,OAA1B,EAAM,IAAA,OAAG,GAAE,EACX,EAAe,KAAK,MAAK,WAC3B,EAAsB,GAAc,EAAW,oBAErD,AAAI,EAAO,OAAS,GACd,IACF,EAAoB,GAGtB,KAAK,yBAAyB,EAAQ,GAEtC,KAAK,6BAEL,KAAK,gBAID,EAAA,UAAA,yBAAR,SAAiC,EAAkB,EAAoB,CACrE,OAAS,GAAa,EAAG,EAAa,EAAO,OAAQ,IACnD,EAAO,GAAY,YAAc,GAyE7B,EAAA,UAAA,WAAR,UAAA,CACE,MAAO,IAiCD,EAAA,UAAA,aAAR,SAAqB,EAA2B,EAAa,CAC3D,MAAO,SAAY,IAAS,EAAM,IAAM,EAAM,IAAM,OAAO,KAGrD,EAAA,UAAA,sBAAR,UAAA,CAKE,OAJQ,GAAW,KAAK,MAAK,OACzB,EAAQ,EACR,EAAgB,EAEb,GAAiB,EAAc,OAAS,GAC7C,IACA,EAAgB,EAAc,GAAG,SAGnC,MAAO,IA+BD,EAAA,UAAA,kBAAR,SAA0B,EAAiB,CACzC,KAAK,SAAS,CACZ,QAAS,MA+BL,EAAA,UAAA,4BAAR,SAAoC,EAA4B,CAAhE,GAAA,GAAA,KACE,MAAO,CAAC,CACN,IACA,EAAO,KAAK,SAAA,EAAK,CAAI,MAAC,GAAM,SAAW,EAAK,4BAA4B,EAAM,UAAY,CAAC,EAAM,gBAI7F,EAAA,UAAA,2BAAR,UAAA,CACU,GAAA,GAAW,KAAK,MAAK,OACrB,EAA8B,KAAK,MAAK,0BAE1C,EAAyB,KAAK,4BAA4B,GAChE,AAAI,KAAK,uBAAyB,GAC5B,IACF,EAA0B,GAE5B,KAAK,qBAAuB,IA5XlB,EAAA,aAAe,CAC3B,cAAe,EAAc,SAC7B,gBAAiB,GACjB,WAAY,GACZ,QAAS,IA2Xb,GAhY2C,cc1BpC,GAAM,IAA0D,EAIrE,GAAiB,GAAW,OAAW,CACvC,MAAO,gBCXT,OAAuB,OAavB,GAAM,IAAgB,IAEhB,GAAsE,WAAA,EAAK,CAE7E,GAAA,GAcE,EAAK,UAdP,EAAS,IAAA,OAAG,GAAK,EACjB,EAaE,EAAK,UAbP,EAAS,IAAA,OAAG,GAAK,EACjB,EAYE,EAAK,YAZP,EAAW,IAAA,OAAG,GAAK,EACnB,EAWE,EAAK,SAXP,EAAQ,IAAA,OAAG,GAAK,EAChB,EAUE,EAAK,cATP,EASE,EAAK,SATP,EAAQ,IAAA,OAAG,GAAK,EAChB,EAQE,EAAK,UAPP,EAOE,EAAK,eANP,EAME,EAAK,OALP,EAKE,EAAK,MAJP,EAIE,EAAK,QAHP,EAGE,EAAK,wBAFP,EAEE,EAAK,aAFP,EAAY,IAAA,OAAG,GAAI,EAChB,EAAW,GACZ,EAfE,CAAA,YAAA,YAAA,cAAA,WAAA,gBAAA,WAAA,YAAA,iBAAA,SAAA,QAAA,UAAA,0BAAA,iBAgBA,EAAwB,EAAe,GAA6B,GAEpE,EAAmB,EACrB,GAAsB,EAAyB,GAC/C,EAEE,EAAa,GAAc,EAAQ,CACvC,MAAO,EACP,UAAS,EACT,SAAQ,EACR,YAAW,EACX,UAAS,EACT,SAAQ,EACR,UAAS,EACT,QAAO,IAGH,EAA8C,CAClD,QAAS,EACT,MAAK,GAGD,EAAW,GAAsB,MAAO,EAAa,CAAC,aAAc,kBAAmB,qBAEvF,EAAY,IAAkB,EAAc,OAAS,QAAU,WAErE,MAAO,GACL,AAAA,iBAAA,MAAA,EAAA,GACM,EAAW,CACf,KAAM,EAEN,UAAW,GAAI,EAAW,KAAM,EAAW,OAAM,eACnC,EAAQ,wBACC,GAAI,oBACT,kBAClB,SAAU,KAET,EAAiB,IAIpB,AAAA,iBAAA,MAAA,EAAA,GAAS,EAAQ,CAAE,UAAW,GAAI,EAAW,KAAM,EAAW,WA1DU,uBA8DtE,GAAY,AAAM,QAAK,SAAC,EAAgE,CAC5F,MAAO,AAAA,kBAAC,GAAK,CAAC,MAAO,EAAM,MAAO,QAAS,EAAM,QAAS,UAAW,EAAM,UAAW,aAAY,OAGpG,YAAgC,EAAoC,CAClE,MAAO,AAAA,kBAAC,GAAK,CAAC,QAAS,EAAc,UAD9B,+BAIT,YAAoC,EAAoC,CACtE,MAAO,AAAA,kBAAC,GAAS,CAAC,MAAO,EAAc,MAAO,QAAS,EAAc,UAD9D,mCAIF,GAAM,IAAkB,EAC7B,GACA,GACA,OACA,CAAE,MAAO,mBACT,ICpFF,GAAM,IAA2B,EAC3B,GAA2B,EAOjC,GAAA,UAAA,CAsBE,WAAY,EAA6B,CACvC,KAAK,WAAa,EAAO,UACzB,KAAK,iBAAmB,GACxB,KAAK,eAAiB,GACtB,KAAK,QAAU,EAGf,KAAK,aAAe,GAPtB,6BAUO,EAAA,UAAA,QAAP,UAAA,CACE,AAAI,KAAK,SACP,KAAK,QAAQ,WAIV,EAAA,UAAA,UAAP,SACE,EACA,EACA,EAAiC,CAHnC,GAAA,GAAA,KAQE,GAAI,CAAC,KAAK,aAAc,CACtB,KAAK,QAAU,GAAI,GAAW,MAE9B,GAAM,GAAM,KAGZ,AAAI,GACF,MAAK,QAAQ,GAAG,EAAI,KAAM,UAAW,KAAK,WAAW,KAAK,MAAO,IACjE,KAAK,QAAQ,GAAG,EAAK,UAAW,KAAK,mBAAmB,KAAK,MAAO,KAGtE,KAAK,aAAe,GAGd,GAAA,GAA8B,EAAe,IAA7C,EAAG,IAAA,OAAG,GAAG,GAAE,KAAK,QAAS,EAE3B,EAGA,GAEF,EACA,EACA,EACA,EACA,EACA,EACA,EAEA,EACA,EAEA,EAKJ,GAAI,GAAmB,EAAM,CACnB,GAAA,GAAuC,EAAe,SAA5C,EAA6B,EAAe,QAAnC,EAAoB,EAAe,gBAExD,EAAkC,CACtC,KAAM,EACN,QAAS,EACT,IAAK,GAMP,GAHA,EAAc,KAAK,aAAa,GAChC,EAAc,KAAK,aAAa,GAE5B,IAAe,IACb,EACF,OAAoB,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAU,CAAzB,GAAM,GAAK,EAAA,GACR,EAAU,CACd,SAAU,EAAM,SAAS,KAAK,KAAM,GACpC,UAAW,EAAM,WAGnB,EAAS,KAAK,GAEd,KAAK,QAAQ,GAAG,EAAM,EAAQ,UAAW,EAAQ,UAKvD,AAAI,GAEF,GAAc,WAAC,EAAgB,CAC7B,AAAM,EAAyB,WAC5B,GAAyB,UAAY,GACtC,EAAK,iBAAiB,KAClB,EAAK,iBAAiB,KAAS,GACjC,EAAgB,GAAwB,KALhC,eAUd,EAAc,WAAC,EAAgB,CAC7B,EAAM,iBACA,EAAyB,WAC5B,GAAyB,UAAY,GACtC,EAAK,iBAAiB,KAClB,EAAK,iBAAiB,KAAS,GACjC,EAAgB,GAAuB,KAN/B,eAWd,EAAY,WAAC,EAAgB,CAC3B,EAAK,iBAAiB,GAAO,EAC7B,EAAgB,GAAwB,IAF9B,aAKZ,EAAS,WAAC,EAAgB,CACxB,EAAK,iBAAiB,GAAO,EAC7B,EAAgB,GAAwB,GAEpC,EAAgB,QAClB,EAAgB,OAAO,EAAgB,QAAQ,KAAM,IALhD,UAST,EAAa,WAAC,EAAgB,CAC5B,EAAM,iBACF,EAAgB,YAClB,EAAgB,WAAW,EAAgB,QAAQ,KAAM,IAHhD,cAOb,KAAK,iBAAiB,GAAO,EAK7B,EAAO,GAAG,EAAM,YAAa,GAC7B,EAAO,GAAG,EAAM,YAAa,GAC7B,EAAO,GAAG,EAAM,UAAW,GAC3B,EAAO,GAAG,EAAM,OAAQ,GACxB,EAAO,GAAG,EAAM,WAAY,IAG1B,GAEF,GAAc,KAAK,aAAa,KAAK,KAAM,GAC3C,EAAY,KAAK,WAAW,KAAK,KAAM,GAGvC,EAAc,WAAC,EAAgB,CAC7B,GAAM,GAAU,EAChB,AAAI,GAAW,EAAQ,aACrB,EAAQ,YAAY,EAAQ,QAAQ,KAAM,EAAQ,QAAQ,MAAO,EAAK,WAAW,eAAgB,GAEnG,EAAK,YAAc,GACf,EAAM,cACR,EAAM,aAAa,QAAQ,KAAM,EAAK,KAP5B,eAWd,EAAO,GAAG,EAAM,YAAa,GAC7B,EAAO,GAAG,EAAM,YAAa,GAC7B,EAAO,GAAG,EAAM,UAAW,IAG7B,EAAe,CACb,OAAQ,EACR,QAAS,UAAA,CAKP,GAJI,EAAK,eAAe,KAAS,GAC/B,MAAO,GAAK,eAAe,GAGzB,EAAM,CACR,OAAsB,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAU,CAA3B,GAAM,GAAO,EAAA,GAChB,EAAK,QAAQ,IAAI,EAAM,EAAQ,UAAW,EAAQ,UAGpD,AAAI,GACF,GAAO,IAAI,EAAM,YAAa,GAC9B,EAAO,IAAI,EAAM,YAAa,GAC9B,EAAO,IAAI,EAAM,UAAW,GAC5B,EAAO,IAAI,EAAM,WAAY,GAC7B,EAAO,IAAI,EAAM,OAAQ,IAGvB,GACF,GAAO,IAAI,EAAM,YAAa,GAC9B,EAAO,IAAI,EAAM,YAAa,GAC9B,EAAO,IAAI,EAAM,UAAW,OAMpC,KAAK,eAAe,GAAO,EAG7B,MAAO,CACL,IAAK,EACL,QAAS,UAAA,CACP,AAAI,GACF,EAAa,aAMd,EAAA,UAAA,YAAP,SAAmB,EAAmB,EAAW,CAC/C,GAAM,GAAe,KAAK,eAAe,GAEzC,AAAI,GACF,EAAa,WAIT,EAAA,UAAA,WAAR,SAAmB,EAAyB,EAAgB,CAClD,GAAA,GAAY,EAAM,QAC1B,AAAI,EAAQ,WACV,EAAQ,UAAU,EAAQ,QAAQ,KAAM,IAOpC,EAAA,UAAA,WAAR,SAAmB,EAAiB,CAElC,GADA,KAAK,YAAc,GACf,KAAK,UAAW,CAClB,OAAkB,GAAA,EAAA,EAAA,OAAO,KAAK,KAAK,gBAAjB,EAAA,EAAA,OAAA,IAAkC,CAA/C,GAAM,GAAG,EAAA,GACN,EAAe,KAAK,eAAe,GAEzC,AAAI,EAAa,OAAO,MACtB,MAAK,QAAQ,IAAI,EAAa,OAAO,KAAM,aAC3C,KAAK,QAAQ,IAAI,EAAa,OAAO,KAAM,eAI/C,AAAI,KAAK,UAAU,YAEjB,GAAW,MAAM,KAAK,UAAU,WAAW,KAAM,aACjD,EAAW,MAAM,KAAK,UAAU,WAAW,KAAM,SAGrD,KAAK,UAAY,MAMX,EAAA,UAAA,mBAAR,SAA2B,EAAiB,CAC1C,GAAM,GAAM,KAEZ,AAAI,GAAO,EAAM,SAAW,EAAI,iBAC9B,KAAK,WAAW,IASZ,EAAA,UAAA,aAAR,SAAqB,EAAyB,EAAiB,CAI3D,GAAA,GACE,EAAK,QADP,EAAO,IAAA,OAAG,GAAwB,EAGpC,GAAI,KAAK,WAAa,IAAY,GAA0B,CAE1D,KAAK,WAAW,GAChB,OAGM,GAAA,GAAc,EAAM,KAAd,EAAQ,EAAM,IAC5B,AAAI,KAAK,aACH,KAAK,aAAa,IAMhB,KAAK,WAEL,KAAK,UAAU,YACf,KAAK,UAAU,WAAW,MAAQ,GAClC,CAAC,KAAK,SAAS,EAAM,KAAK,UAAU,WAAW,OAE3C,KAAK,iBAAiB,KAAK,UAAU,WAAW,KAAO,GACzD,GAAW,MAAM,KAAK,UAAU,WAAW,KAAM,aACjD,EAAW,MAAM,EAAM,aACvB,KAAK,UAAU,WAAa,IAWhC,EAAA,UAAA,cAAR,SAAsB,EAAyB,EAAiB,CAC9D,AAAI,KAAK,aACH,KAAK,WAAa,KAAK,UAAU,YAAc,KAAK,UAAU,WAAW,MAAQ,EAAO,KAC1F,GAAW,MAAM,EAAO,KAAM,aAC9B,KAAK,UAAU,WAAa,SAQ1B,EAAA,UAAA,aAAR,SAAqB,EAAyB,EAAiB,CAC7D,GAAI,EAAM,SAAW,GAKrB,GAAI,KAAK,aAAa,GAAS,CAC7B,KAAK,UAAY,CACf,QAAS,EAAM,QACf,QAAS,EAAM,QACf,YAAa,EAAM,OACnB,WAAY,GAGd,OAAkB,GAAA,EAAA,EAAA,OAAO,KAAK,KAAK,gBAAjB,EAAA,EAAA,OAAA,IAAkC,CAA/C,GAAM,GAAG,EAAA,GACN,EAAe,KAAK,eAAe,GACzC,AAAI,EAAa,OAAO,MACtB,MAAK,QAAQ,GAAG,EAAa,OAAO,KAAM,YAAa,KAAK,aAAa,KAAK,KAAM,EAAa,SACjG,KAAK,QAAQ,GAAG,EAAa,OAAO,KAAM,aAAc,KAAK,cAAc,KAAK,KAAM,EAAa,eAIvG,MAAK,UAAY,MAOb,EAAA,UAAA,SAAR,SAAiB,EAA4B,EAAyB,CACpE,KAAO,GAAgB,EAAa,eAAe,CACjD,GAAI,EAAa,gBAAkB,EACjC,MAAO,GAET,EAAe,EAAa,cAE9B,MAAO,IAGD,EAAA,UAAA,aAAR,SAAqB,EAAuB,CAClC,GAAA,GAAY,EAAM,QAC1B,MAAO,CAAC,CAAE,GAAQ,SAAW,EAAQ,QAAQ,EAAQ,QAAQ,QAGvD,EAAA,UAAA,aAAR,SAAqB,EAAuB,CAElC,GAAA,GAAY,EAAM,QACpB,EACJ,KAAK,WAAa,KAAK,UAAU,WAAa,KAAK,UAAU,WAAW,QAAQ,QAAU,OAC5F,MAAO,CAAC,CAAE,GAAQ,SAAW,EAAQ,QAAQ,EAAQ,QAAS,KAElE,KCvZA,OAAuB,OAgBvB,GAAM,IAA2B,EAE3B,GAAgB,IAChB,GAA2B,IAC3B,GAA2B,KAC3B,GAAyB,GAEzB,GAAwB,WAAC,EAAoD,CAAK,MAAA,UACtF,EAA2B,CAE3B,MAAK,GAID,EAAM,OAAO,WACR,AAAA,iBAAA,OAAA,CAAM,UAAW,EAAW,iBAAkB,EAAM,OAAO,MAG7D,AAAA,iBAAA,YAAA,KAAG,EAAM,OAAO,MAPd,OAJmB,yBAmB9B,GAAA,SAAA,EAAA,CAAuC,EAAA,EAAA,GAOrC,WAAY,EAA0B,CAAtC,GAAA,GACE,EAAA,KAAA,KAAM,IAAM,KALN,SAAA,MAAQ,AAAM,eAwMd,EAAA,oBAAsB,SAAC,EAAoD,CAAK,MAAA,UACtF,EAAoC,CAE5B,GAAA,GAA8B,EAAK,YAAnB,EAAS,GAAK,EAAhC,CAAA,gBACA,EAAgB,IAAW,KAAA,OAAX,EAAa,cAAe,GAAW,GAE7D,MAAO,AAAA,kBAAC,EAAa,EAAA,GAAK,MAGpB,EAAA,6BAA+B,SAAC,EAAkD,CACxF,MAAO,AAAA,kBAAA,OAAA,CAAM,UAAW,EAAiB,eAAgB,EAAiB,WAGpE,EAAA,eAAiB,SAAC,EAAiC,CACnD,GAAA,GAA4B,EAAK,MAA/B,EAAa,EAAA,cAAE,EAAM,EAAA,OAE7B,AAAI,EAAO,oBAAsB,GAAkB,UAI/C,GAAO,eACT,EAAO,cAAc,EAAI,GAGvB,GACF,EAAc,EAAI,KAmDd,EAAA,aAAe,SAAC,EAAY,EAAoB,EAAuB,EAAkB,CAC/F,GAAM,GAAa,EAAK,YACxB,AAAI,GACF,GAAK,sBAAsB,GAC3B,EAAK,MAAM,QAAS,UAAU,IAAI,EAAW,qBAC7C,EAAK,OAAO,WAAW,UAAA,CACrB,AAAI,EAAK,MAAM,SACb,EAAK,MAAM,QAAQ,UAAU,IAAI,EAAW,wBAE7C,MAIC,EAAA,WAAa,SAAC,EAAY,EAAkB,CAClD,GAAM,GAAa,EAAK,YACxB,AAAI,GACF,EAAK,sBAAsB,GAAI,GAEjC,EAAK,MAAM,QAAS,UAAU,OAAO,EAAW,qBAChD,EAAK,MAAM,QAAS,UAAU,OAAO,EAAW,wBAG1C,EAAA,sBAAwB,SAAC,EAAmB,EAAkB,CAEpE,AAAI,EAAK,MAAM,qBACb,EAAK,MAAM,oBAAoB,GAG7B,EAAK,MAAM,gBACb,EAAK,MAAM,eAAe,CAAE,UAAS,GAAI,IAIrC,EAAA,qBAAuB,SAAC,EAAiC,CACzD,GAAA,GAAkC,EAAK,MAArC,EAAmB,EAAA,oBAAE,EAAM,EAAA,OACnC,AAAI,EAAO,qBACT,GAAO,oBAAoB,EAAQ,GACnC,EAAG,kBAED,GACF,GAAoB,EAAQ,GAC5B,EAAG,mBAIC,EAAA,iBAAmB,SAAC,EAAc,CAChC,GAAA,GAAgB,EAAK,MAAK,YAElC,AAAI,GAAe,EAAG,SAAW,IAC/B,EAAG,mBA/TL,EAAuB,GACvB,EAAK,OAAS,GAAI,IAAM,GACxB,EAAK,QAAU,GAAI,GAAW,KAJhC,gCAOO,EAAA,UAAA,OAAP,UAAA,CACQ,GAAA,GASF,KAAK,MARP,EAAM,EAAA,OACN,EAAW,EAAA,YACX,EAAQ,EAAA,SACR,EAAW,EAAA,YACX,EAAM,EAAA,OACN,EAAK,EAAA,MACL,EAAA,EAAA,eAAA,EAAc,IAAA,OAAG,GAAwB,EACzC,EAAA,EAAA,aAAA,EAAY,IAAA,OAAG,GAAI,EAEb,EAAoE,KAAK,MAAK,4BAA9E,EAA2B,IAAA,OAAG,KAAK,6BAA4B,EAEvE,KAAK,YAAc,GAAc,EAAQ,CACvC,MAAO,EACP,gBAAiB,EAAO,gBACxB,cAAe,EAAO,cACtB,aAAc,EAAO,oBAAsB,GAAkB,SAC7D,QAAS,CAAC,EAAO,KACjB,cAAe,EAAO,UAAY,EAAO,WAAa,EAAO,WAC7D,SAAU,EAAO,SACjB,WAAY,EAAO,WACnB,eAAc,EACd,uBAAwB,GACxB,uBAAwB,KAG1B,GAAM,GAAa,KAAK,YAClB,EAAgB,EAAe,GAAW,GAE1C,EAAqB,EAAO,mBAC9B,GAAsB,EAAO,mBAAoB,KAAK,oBAAoB,KAAK,cAC/E,KAAK,oBAAoB,KAAK,aAE5B,EAAiB,EAAO,eAC1B,GAAsB,EAAO,eAAgB,GAAsB,KAAK,cACxE,GAAsB,KAAK,aAEzB,EACJ,EAAO,oBAAsB,GAAkB,UAC9C,GAAO,gBAAkB,QAAa,KAAK,MAAM,gBAAkB,QAChE,EAAqB,CACzB,aAAc,EAAO,WAAa,EAAO,KAAO,OAChD,kBAAmB,EAAO,WAAa,OAAe,EAAQ,IAAI,EAAO,IAAG,QAC5E,mBACE,CAAC,KAAK,MAAM,6BAA+B,KAAK,sBACzC,EAAQ,IAAI,EAAO,IAAG,WACzB,QAGR,MACE,AAAA,kBAAA,YAAA,KACE,AAAA,iBAAA,MAAA,EAAA,CACE,IAAK,EAAO,IACZ,IAAK,KAAK,MACV,KAAM,gBACD,CAAC,GAAkB,EAAmB,CAAA,YAChC,EAAO,SAAY,EAAO,mBAAqB,aAAe,YAAe,OAAM,gBAC/E,EAAW,oBAGxB,CAAC,GAAkB,EAAO,oBAAsB,GAAkB,SAAW,OAAS,OAExF,UAAW,EAAW,KAAI,oBACP,EACnB,UAAW,EACX,MAAO,CACL,MACE,EAAO,gBACP,EAAe,gBACf,EAAe,iBACd,GAAO,SAAW,EAAe,sBAAwB,IAC7D,oBACkB,sBAAqB,gBACzB,EAAO,MAErB,GACC,AAAA,iBAAC,EAAa,CAAC,SAAS,qBAAqB,UAAW,EAAW,0BAEpE,EACC,CACE,cAAe,EAAW,YAC1B,GAAO,EAAQ,IAAI,EAAO,IAAG,WAC7B,mBAAoB,GACpB,OAAM,EACN,QAAS,EAAO,oBAAsB,GAAkB,SAAW,EAAO,UAAY,GACtF,SACE,AAAA,iBAAA,OAAA,EAAA,CACE,GAAO,EAAQ,IAAI,EAAO,IAC1B,UAAW,EAAW,UAAS,oBAG7B,GAAkB,EAAO,oBAAsB,GAAkB,SAAW,OAAS,OAEvF,KAAM,EAAiB,SAAW,QAC7B,GAAkB,EAAmB,CAC1C,cAAe,KAAK,qBACpB,QAAS,KAAK,eAAc,gBACb,EAAO,oBAAsB,GAAkB,YAAc,OAAS,OAAS,gBAE5F,EAAO,oBAAsB,GAAkB,YAAc,CAAC,CAAC,EAAO,WAAa,SAGrF,AAAA,iBAAA,OAAA,CAAM,GAAO,EAAQ,IAAI,EAAO,IAAG,QAAS,UAAW,EAAW,UAC9D,GAAO,UAAY,EAAO,gBAC1B,AAAA,iBAAC,EAAa,CAAC,UAAW,EAAW,cAAe,SAAU,EAAO,WAGtE,EAAe,KAAK,QAGtB,EAAO,YAAc,AAAA,iBAAC,EAAa,CAAC,UAAW,EAAW,SAAU,SAAS,WAE7E,EAAO,UACN,AAAA,iBAAC,EAAa,CACZ,UAAW,EAAW,SACtB,SAAU,EAAO,mBAAqB,WAAa,WAItD,EAAO,WAAa,AAAA,iBAAC,EAAa,CAAC,UAAW,EAAW,SAAU,SAAS,sBAE5E,EAAO,oBAAsB,GAAkB,aAC9C,CAAC,EAAO,YACR,EAAmB,CACjB,cAAe,GACf,YAAa,KAAK,MAClB,UAAW,EAAW,cACtB,SAAU,kBAKpB,KAAK,+BAGR,AAAC,KAAK,MAAM,4BAA8D,KAAhC,KAAK,2BAK/C,EAAA,UAAA,kBAAP,UAAA,CAAA,GAAA,GAAA,KACE,AAAI,KAAK,MAAM,gBAAkB,KAAK,MAAM,aAC1C,KAAK,uBAGP,GAAM,GAAa,KAAK,YAExB,AAAI,KAAK,MAAM,WACT,MAAK,MAAM,SACb,MAAK,MAAM,QAAQ,UAAU,IAAI,EAAW,qBAE5C,KAAK,OAAO,WAAW,UAAA,CACrB,AAAI,EAAK,MAAM,SACb,EAAK,MAAM,QAAQ,UAAU,IAAI,EAAW,wBAE7C,KAGL,KAAK,OAAO,WAAW,UAAA,CACrB,AAAI,EAAK,MAAM,SACb,GAAK,MAAM,QAAQ,UAAU,OAAO,EAAW,qBAC/C,EAAK,MAAM,QAAQ,UAAU,OAAO,EAAW,yBAEhD,GAA2B,MAI3B,EAAA,UAAA,qBAAP,UAAA,CACE,AAAI,KAAK,uBACP,MAAK,sBAAsB,UAC3B,MAAO,MAAK,uBAEd,KAAK,OAAO,UACZ,KAAK,QAAQ,WAGR,EAAA,UAAA,mBAAP,UAAA,CACE,AAAI,CAAC,KAAK,uBAAyB,KAAK,MAAM,gBAAkB,KAAK,MAAM,aACzE,KAAK,uBAGH,KAAK,uBAAyB,CAAC,KAAK,MAAM,aAC5C,MAAK,sBAAsB,UAC3B,KAAK,QAAQ,IAAI,KAAK,MAAM,QAAS,aACrC,MAAO,MAAK,wBAiCR,EAAA,UAAA,0BAAR,UAAA,CAAA,GAAA,GAAA,KACU,EAAgB,KAAK,MAAK,YAC5B,EAAU,CACd,eAAgB,EAChB,QAAS,CAAE,KAAM,EAAa,MAAO,GACrC,QAAS,UAAA,CAAM,MAAA,GAAK,MAAM,aAC1B,QAAS,UAAA,CAAM,MAAA,IACf,YAAa,KAAK,aAClB,gBAAiB,UAAA,GACjB,OAAQ,UAAA,GACR,UAAW,KAAK,YAElB,MAAO,IAGD,EAAA,UAAA,oBAAR,UAAA,CACU,GAAA,GAAW,KAAK,MAAK,OAE7B,MAAO,CAAC,CACN,GAAO,WACP,EAAO,iBACP,EAAO,wBACP,EAAO,yBACP,EAAO,iBAIH,EAAA,UAAA,uBAAR,UAAA,CACQ,GAAA,GAAuB,KAAK,MAA1B,EAAM,EAAA,OAAE,EAAQ,EAAA,SAClB,EAAa,KAAK,YAExB,MAAO,MAAK,uBAAyB,CAAC,KAAK,MAAM,4BAC/C,AAAA,iBAAA,QAAA,CACE,IAAQ,EAAO,IAAG,SAClB,GAAO,EAAQ,IAAI,EAAO,IAAG,WAC7B,UAAW,EAAW,iBAErB,EAAO,UACN,EAAO,YAAc,EAAO,iBAAoB,KAChD,EAAO,UACN,GAAO,mBAAqB,EAAO,wBAA0B,EAAO,yBACrE,KACA,EAAO,WAAa,EAAO,gBAAmB,MAEhD,MAwDE,EAAA,UAAA,qBAAR,UAAA,CACE,KAAK,sBAAwB,KAAK,MAAM,eAAgB,UACtD,KAAK,MAAM,QACX,KAAK,QACL,KAAK,6BAIP,KAAK,QAAQ,GAAG,KAAK,MAAM,QAAS,YAAa,KAAK,mBAE1D,GAtV6C,cCpC7C,GAAM,IAAmB,CACvB,aAAc,gBACd,YAAa,+BACb,eAAgB,kCAChB,YAAa,eACb,cAAe,iBACf,kBAAmB,qBACnB,iBAAkB,oBAClB,QAAS,WACT,cAAe,kBACf,UAAW,6BACX,WAAY,cACZ,oBAAqB,uCACrB,kBAAmB,qCACnB,UAAW,6BACX,SAAU,4BACV,cAAe,iCACf,wBAAyB,8BACzB,SAAU,6BAGC,GAAY,WAAC,EAA+B,OAErD,EAWE,EAAK,MAVP,EAUE,EAAK,gBATP,EASE,EAAK,cARP,EAQE,EAAK,aAPP,EAOE,EAAK,QANP,EAME,EAAK,cALP,EAKE,EAAK,SAJP,EAIE,EAAK,WAHP,EAGE,EAAK,eAHP,EAAc,IAAA,OAAG,GAAwB,EACzC,EAEE,EAAK,uBADP,EACE,EAAK,uBAED,EAAmC,EAAK,eAAxB,EAAmB,EAAK,QAAf,EAAU,EAAK,MAC1C,EAAa,EAAoB,GAAkB,GAEnD,EAAS,CACb,oBAAqB,EAAe,YACpC,sBAAuB,EAAe,SACtC,sBAAuB,EAAe,eACtC,+BAAgC,EAAQ,iBACxC,aAAc,EAAQ,oBAGlB,EAAwB,CAC5B,MAAO,EAAO,oBACd,QAAS,EACT,YAAa,GAGT,EAA8B,CAClC,QAAS,aAAa,EAAQ,cAG1B,EAAgC,CACpC,aAAc,eAGhB,MAAO,CACL,KAAM,CACJ,GAAc,GACd,EAAM,MACN,GAAgB,CACd,EAAW,aACX,CACE,UAAW,CACT,SAAU,CACR,MAAO,EAAe,SACtB,WAAY,EAAe,6BAE7B,UAAW,CACT,WAAY,EAAe,gCAKnC,GAAW,CACT,EAAW,QACX,CACE,aAAc,SAGlB,GAAiB,EAAW,cAC5B,GAAY,CACV,aAAc,EAAe,sBAAwB,EAAe,kBAEtE,CACE,UAAW,CACT,gDAAiD,CAC/C,QAAS,WAIf,GAGF,wBAAyB,CACvB,QAAS,OACT,SAAU,WACV,UAAW,OACX,MAAO,EAAQ,gBACf,KAAM,GAGR,SAAU,CAAC,EAAW,SAAU,GAEhC,SAAU,CACR,EACA,CACE,YAAa,EACb,SAAU,WACV,IAAK,IAIT,cAAe,CACb,CACE,MAAO,EAAO,oBACd,QAAS,GAEX,GAGF,cAAe,CACb,EAAW,cACX,CACE,MAAO,EAAO,+BACd,YAAa,EACb,cAAe,SACf,SAAU,EAAM,MAAM,WAI1B,UAAW,CACT,EAAW,UACX,GAAc,MAEZ,QAAS,OACT,cAAe,MACf,eAAgB,aAChB,WAAY,UACZ,UAAW,aACX,SAAU,SACV,QAAS,KAAK,EAAe,iBAAgB,QAAQ,EAAe,gBAAe,MAC/E,EACA,CACE,aAAc,WACd,UAAW,OACX,SAAU,gBAEZ,KAIR,SAAU,CACR,EAAW,SACX,CACE,KAAM,WACN,SAAU,SACV,aAAc,WACd,WAAY,GAAY,SACxB,SAAU,EAAM,OAAO,UAEzB,GAAc,CACZ,UAAS,GAAA,GACP,EAAC,IAAI,EAAW,UAAa,CAC3B,YAAa,QAMrB,YAAa,CACX,QAAS,QACT,SAAU,WACV,IAAK,EACL,KAAM,EACN,OAAQ,EACR,MAAO,GAGT,gBAAiB,GAEjB,oBAAqB,EAErB,sBAAuB,CAAC,EAAuB,CAAE,WAAY,WAAW,EAAsB,YAE9F,oBAAqB,EAErB,sBAAuB,CAAC,EAAuB,CAAE,WAAY,YAAY,EAAsB,cA3K1E,aCrBlB,GAAM,IAA8D,EAIzE,GAAmB,GAAW,OAAW,CAAE,MAAO,kBCmHpD,GAAY,IAAZ,AAAA,UAAY,EAAmB,CAC7B,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,OAAA,GAAA,SACA,EAAA,EAAA,QAAA,GAAA,YAHU,IAAA,IAAmB,KxB/F/B,GAAM,IAAgB,IAEhB,GAA2B,EAC3B,GAA2B,EAE3B,GAAwB,GAE9B,GAAA,SAAA,EAAA,CACU,EAAA,EAAA,GAuBR,WAAY,EAA8B,CAA1C,GAAA,GACE,EAAA,KAAA,KAAM,IAAM,KAfN,SAAA,aAAe,AAAM,cAErB,EAAA,eAAiB,AAAM,cAEvB,EAAA,oBAAsB,GACtB,EAAA,iBAAwD,GA2TxD,EAAA,qBAAuB,SAAC,EAAmB,EAAgB,CACjE,AAAI,EAAK,qBAAuB,GAAK,EAAM,OAAS,QAAU,CAAC,GAC7D,EAAK,mBAQD,EAAA,YAAc,SAAC,EAAW,EAAgB,CAChD,AAAI,EAAK,qBAAuB,GAC9B,GAAM,kBACN,EAAK,0BAA0B,EAAM,WAIjC,EAAA,QAAU,SAAC,EAAY,EAAiB,CAE9C,GAAM,GAAqB,EAAK,yBAGhC,GAAI,EAAK,qBAAuB,GAAK,EAAO,CAC1C,GAAM,GACJ,EAAK,oBAAsB,EAAK,sBAC5B,EAAK,sBACL,EAAK,sBAAwB,EAC7B,EAAc,EAAK,+BAEzB,GADA,EAAM,kBACF,EAIF,GAHA,EAAK,iBAAiB,YAAc,EAAK,oBACzC,EAAK,iBAAiB,YAAc,EAEhC,EAAmB,aAAc,CACnC,GAAM,GAA0C,CAC9C,aAAc,EAAK,oBACnB,YAAa,GAEf,EAAmB,aAAa,OAE3B,AAAI,GAAmB,qBAC5B,EAAmB,oBAAoB,EAAK,oBAAqB,GAMvE,EAAK,kBACL,EAAK,iBAAmB,GACxB,EAAK,oBAAsB,IAYrB,EAAA,gBAAkB,SAAC,EAA8B,EAAkB,CAEzE,GAAM,GAAqB,EAAK,yBAC1B,EAAY,EAAM,UACxB,GAAI,GAAa,EAEf,EAAK,oBAAsB,EAAK,0BAA4B,EAAY,EAAI,EAAY,EACxF,EAAK,wBACD,EAAmB,mBACrB,EAAmB,kBAAkB,YAE9B,GAAS,EAAK,qBAAuB,GAC9C,GAAK,kBACL,EAAK,oBAAsB,GAC3B,EAAK,iBAAmB,GACpB,EAAmB,iBAAiB,CACtC,GAAM,GAAwB,EAAK,iBAAiB,GACpD,EAAmB,gBAAgB,CAAE,aAAc,GAAyB,KAiB1E,EAAA,sBAAwB,UAAA,CAU9B,OATQ,GAAyB,EAAK,MAAK,QAAnC,EAAO,IAAA,OAAG,GAAU,EAEtB,EAAqB,EAAK,yBAC5B,EAAQ,EACR,EAAU,EACV,EACE,EAA6B,EAAmB,4BAA8B,EAC9E,EAA2B,EAAmB,0BAA4B,EAEvE,EAAI,EAA4B,EAAI,EAAQ,OAAS,EAA2B,EAAG,IAC1F,GAAI,EAAK,aAAa,QAAS,CAC7B,GAAM,GAAkB,EAAK,aAAa,QAAQ,iBAAiB,mBAAqB,GAAG,GAC3F,GAAI,EACF,GAAI,IAAM,EACR,EAAQ,EAAgB,WACxB,EAAU,EAAgB,WAC1B,EAAU,MACL,CACL,GAAM,GAAU,GAAgB,WAAa,GAAU,EACvD,EAAK,iBAAiB,EAAI,GAAK,CAC7B,QAAS,EACT,OAAQ,EACR,KAAM,EACN,mBAAoB,GAEtB,EAAU,EACV,EAAU,EACV,EAAQ,EAAgB,WACpB,IAAM,EAAQ,OAAS,GACzB,GAAK,iBAAiB,GAAK,CACzB,QAAS,EACT,OAAQ,EACR,KAAM,EAAgB,WACtB,mBAAoB,OAY1B,EAAA,0BAA4B,SAAC,EAAe,CAClD,GAAM,GAAQ,GAAO,EAAK,MAAM,OAChC,GAAI,EAAK,aAAa,QAAS,CAC7B,GAAM,GAAa,EAAK,aAAa,QAAQ,wBACvC,EAAgB,EAAW,KAC3B,EAAyB,EAAU,EACnC,EAAuB,EAAK,sBAClC,GAAI,EAAK,gCAEL,GACE,EACA,EACA,EAAK,iBAAiB,GAAuB,OAC7C,EAAK,iBAAiB,GAAuB,MAG/C,OAGI,GAAA,GAAyB,EAAK,MAAK,QAAnC,EAAO,IAAA,OAAG,GAAU,EAEtB,EAAqB,EAAK,yBAC1B,EAA6B,EAAmB,4BAA8B,EAC9E,EAA2B,EAAmB,0BAA4B,EAE1E,EAAuB,EACvB,EAAkB,EAAQ,OAAS,EACrC,EAAgB,GA4BpB,GA3BA,AAAI,GAAU,EAAO,EAAwB,EAAK,iBAAiB,GAAc,MAC/E,EAAgB,EACX,AAAI,GAAS,EAAO,EAAwB,EAAK,iBAAiB,GAAiB,QACxF,EAAgB,EACP,EAAK,gCACd,CACE,EAAK,iBAAiB,EAAwB,IAC9C,GACE,EACA,EACA,EAAK,iBAAiB,EAAwB,GAAG,OACjD,EAAK,iBAAiB,EAAwB,GAAG,MAGnD,EAAgB,EAAwB,EAExC,EAAK,iBAAiB,EAAwB,IAC9C,GACE,EACA,EACA,EAAK,iBAAiB,EAAwB,GAAG,OACjD,EAAK,iBAAiB,EAAwB,GAAG,OAGnD,GAAgB,EAAwB,IAGxC,IAAkB,GAGpB,OAFI,GAAa,EACb,EAAW,EACR,EAAa,GAAU,CAC5B,GAAM,GAAc,KAAK,KAAM,GAAW,GAAe,GACzD,GACE,GACE,EACA,EACA,EAAK,iBAAiB,GAAa,OACnC,EAAK,iBAAiB,GAAa,MAErC,CACA,EAAgB,EAChB,UACK,AAAI,IAAU,EAAO,EAAwB,EAAK,iBAAiB,GAAa,SACrF,EAAW,EACF,GAAS,EAAO,EAAwB,EAAK,iBAAiB,GAAa,UACpF,GAAa,GAKnB,AAAI,IAAkB,EAAK,qBAAuB,IAAkB,EAAK,oBAAsB,EACzF,EAAK,gCACP,EAAK,kBAEE,IAAyB,GAAiB,GAAiB,GACpE,GAAK,kBACL,EAAK,uBAAuB,EAAK,iBAAiB,GAAe,mBAAoB,gBACrF,EAAK,sBAAwB,KAmB3B,EAAA,mBAAqB,SAAC,EAAoC,OAAlC,EAAW,EAAA,YACjC,EAAyB,EAAK,MAAK,QAAnC,EAAO,IAAA,OAAG,GAAU,EACtB,EAAS,EAAQ,GACf,EAAwB,EAAK,MAAK,oBACpC,EAAa,EAAK,YAExB,MAAO,GAAO,YACZ,AAAA,gBAAA,MAAA,CACE,IAAQ,EAAO,IAAG,SAAQ,cACb,GACb,KAAK,SAAQ,oBACM,GACnB,QAAS,GAAgB,mBACP,EAClB,OAAQ,EAAK,aACb,UAAW,GACT,EAAW,UACX,EAAc,EAAQ,OAAS,EAAI,EAAW,eAAiB,EAAW,aAAY,GAAA,GAEpF,EAAC,EAAW,gBAAiB,GAAuB,EAAoB,cAAgB,MAG5F,cAAe,EAAK,oBAAoB,KAAK,EAAM,KAEnD,MAsCE,EAAA,6BAA+B,SAAC,EAAmC,CACzE,MAAO,AAAA,iBAAA,OAAA,CAAM,UAAW,EAAiB,eAAgB,EAAiB,WAoBpE,EAAA,oBAAsB,UAAA,CACpB,GAAA,GAAc,EAAK,MAAK,UAEhC,AAAI,GACF,EAAU,qBAIN,EAAA,iBAAmB,SAAC,EAAc,CACxC,GAAM,GAAmB,EAAG,OAAuB,aAAa,oBAC1D,EAAc,OAAO,GACnB,EAAyB,EAAK,MAAK,QAAnC,EAAO,IAAA,OAAG,GAAU,EAE5B,AAAI,IAAoB,MAAQ,EAAG,SAAW,IAK9C,GAAK,SAAS,CACZ,oBAAqB,CACnB,YAAa,EACb,eAAgB,EAAQ,GAAa,gBACrC,QAAS,EAAG,WAIhB,EAAG,iBACH,EAAG,oBAGG,EAAA,iBAAmB,SAAC,EAAiC,CACrD,GAAA,GAAoC,EAAK,MAAvC,EAAmB,EAAA,oBAAE,EAAQ,EAAA,SAErC,AAAI,GAAuB,CAAC,GAAY,EAAG,UAAY,EAAoB,SACzE,EAAK,SAAS,CAAE,SAAU,MAItB,EAAA,eAAiB,SAAC,EAAiB,CACnC,GAAA,GAAoC,EAAK,MAAvC,EAAmB,EAAA,oBAAE,EAAQ,EAAA,SAC/B,EAA4C,EAAK,MAA/C,EAAA,EAAA,QAAA,EAAO,IAAA,OAAG,GAAU,EAAE,EAAe,EAAA,gBAEvC,EAAmB,EAAG,OAAuB,aAAa,oBAEhE,GAAI,GAAC,GAAmB,GAIxB,IAAM,GAAc,OAAO,GAE3B,GAAI,CAAC,EAEH,AAAI,EAAG,QAAU,EAAS,OACxB,GAAK,SAAS,CACZ,oBAAqB,CACnB,YAAa,EACb,eAAgB,EAAQ,GAAa,mBAIzC,EAAG,iBACH,EAAG,uBAEA,CACL,GAAI,GAAS,OAGb,AAAI,EAAG,QAAU,EAAS,MACxB,GAAK,SAAS,CACZ,oBAAqB,SAGvB,EAAG,iBACH,EAAG,mBAEE,AAAI,EAAG,QAAU,EAAS,KAC/B,EAAY,GAAO,EAAK,MAAM,OAAS,EAAI,GAElC,EAAG,QAAU,EAAS,OAC/B,GAAY,GAAO,EAAK,MAAM,OAAS,GAAK,GAG1C,GACG,GAAG,UACN,IAAa,IAGf,EAAK,SAAS,CACZ,oBAAmB,EAAA,EAAA,GACd,GAAmB,CACtB,eAAgB,EAAoB,eAAiB,MAIrD,GACF,EAAgB,EAAQ,GAAc,EAAoB,eAAiB,EAAW,GAGxF,EAAG,iBACH,EAAG,sBAWD,EAAA,kBAAoB,SAAC,EAAiC,CAI1D,GAAA,GACE,EAAE,QACA,EAAqE,EAAK,MAAxE,EAAuB,EAAA,wBAAE,EAAe,EAAA,gBAAE,EAAA,EAAA,QAAA,EAAO,IAAA,OAAG,GAAU,EAC9D,EAAwB,EAAK,MAAK,oBAE1C,GAAI,IAAY,QAAa,IAAY,GAA0B,CAEjE,EAAK,gBAAgB,GACrB,OASF,GANI,EAAG,UAAY,EAAqB,SAClC,GACF,EAAwB,EAAQ,EAAqB,aAAc,IAInE,EAAiB,CACnB,GAAI,GAAW,EAAG,QAAU,EAAqB,QAEjD,AAAI,GAAO,EAAK,MAAM,QACpB,GAAW,CAAC,GAGd,EACE,EAAQ,EAAqB,aAC7B,EAAqB,eAAiB,EACtC,EAAqB,eAKnB,EAAA,aAAe,SAAC,EAAiC,CAC/C,GAAA,GAAwB,EAAK,MAAK,oBAE1C,AAAI,GACF,EAAK,SAAS,CACZ,oBAAqB,OACrB,SAAU,MAYR,EAAA,gBAAkB,SAAC,EAAiC,CACpD,GAAA,GAAoD,EAAK,MAAvD,EAAA,EAAA,QAAA,EAAO,IAAA,OAAG,GAAU,EAAE,EAAuB,EAAA,wBAC7C,EAAwB,EAAK,MAAK,oBAE1C,EAAK,SAAS,CACZ,oBAAqB,OACrB,SAAU,KAGR,GACF,EAAwB,EAAQ,EAAqB,aAAc,KAc/D,EAAA,qBAAuB,UAAA,CACrB,GAAA,GAAwB,EAAK,MAAK,oBACpC,EAAe,CAAC,EAAK,MAAM,eACjC,EAAK,SAAS,CACZ,eAAgB,IAEd,GACF,EAAoB,IA1zBtB,EAAuB,GACvB,EAAK,QAAU,GAAI,GAAW,GAE9B,EAAK,MAAQ,CACX,oBAAqB,OACrB,eAAgB,EAAK,MAAM,eAC3B,cAAe,CAAC,CAAC,EAAK,MAAM,WAAa,EAAK,MAAM,UAAU,iBAGhE,EAAK,iBAAmB,CACtB,YAAa,GACb,YAAa,IAEf,EAAK,IAAM,GAAM,UACjB,EAAK,sBAAwB,GAI7B,EAAK,gBAAkB,GAAI,IAAe,CACxC,UAAW,CACT,aAAc,UAAA,IAIhB,qBAAsB,EAAK,MAAM,yBA3BrC,gCA+BO,EAAA,UAAA,kBAAP,UAAA,CACU,GAAA,GAAc,KAAK,MAAK,UAEhC,KAAK,QAAQ,GAAG,EAAW,GAAkB,KAAK,qBAG9C,KAAK,aAAa,SAEpB,MAAK,QAAQ,GAAG,KAAK,aAAa,QAAS,YAAa,KAAK,kBAE7D,KAAK,QAAQ,GAAG,KAAK,aAAa,QAAS,UAAW,KAAK,gBAEvD,KAAK,0BACP,MAAK,oBAAsB,KAAK,gBAAgB,UAC9C,KAAK,aAAa,QAClB,KAAK,QACL,KAAK,gCAMN,EAAA,UAAA,mBAAP,SAA0B,EAAkC,CAc1D,GAbA,AAAI,KAAK,yBACH,CAAC,KAAK,qBAAuB,KAAK,aAAa,SACjD,MAAK,oBAAsB,KAAK,gBAAgB,UAC9C,KAAK,aAAa,QAClB,KAAK,QACL,KAAK,8BAGA,KAAK,qBACd,MAAK,oBAAoB,UACzB,MAAO,MAAK,qBAGV,KAAK,QAAU,GAAa,KAAK,iBAAiB,aAAe,GAAK,KAAK,iBAAiB,aAAe,EAAG,CACxG,GAAA,GAA0C,EAAS,QAA1C,EAAe,IAAA,OAAG,GAAU,EACrC,EAAyB,KAAK,MAAK,QAAnC,EAAO,IAAA,OAAG,GAAU,EAC5B,AAAI,EAAgB,KAAK,iBAAiB,aAAa,MAAQ,EAAQ,KAAK,iBAAiB,aAAa,KACxG,MAAK,iBAAmB,CACtB,YAAa,GACb,YAAa,KAKnB,AAAI,KAAK,MAAM,iBAAmB,EAAU,gBAC1C,KAAK,SAAS,CAAE,eAAgB,KAAK,MAAM,kBAIxC,EAAA,UAAA,qBAAP,UAAA,CACE,AAAI,KAAK,qBACP,MAAK,oBAAoB,UACzB,MAAO,MAAK,qBAGd,KAAK,gBAAgB,UAErB,KAAK,QAAQ,WAGR,EAAA,UAAA,OAAP,UAAA,CAAA,GAAA,GAAA,KACQ,EAmBF,KAAK,MAlBP,EAAA,EAAA,QAAA,EAAO,IAAA,OAAG,GAAU,EACpB,EAAS,EAAA,UACT,EAAiC,EAAA,kCACjC,EAA6B,EAAA,8BAC7B,EAAmB,EAAA,oBACnB,EAA2B,EAAA,4BAC3B,EAAW,EAAA,YACX,EAAa,EAAA,cACb,EAAmB,EAAA,oBACnB,EAAA,EAAA,4BAAA,EAA2B,IAAA,OAAG,KAAK,6BAA4B,EAC/D,EAAM,EAAA,OACN,EAAa,EAAA,cACb,EAAK,EAAA,MACL,EAAuB,EAAA,wBACvB,EAAiB,EAAA,kBACjB,EAAY,EAAA,aACZ,EAAkB,EAAA,mBAClB,EAAS,EAAA,UAEL,EAAmE,KAAK,MAAtE,EAAa,EAAA,cAAE,EAAmB,EAAA,oBAAE,EAAQ,EAAA,SAAE,EAAc,EAAA,eAC9D,EAAe,IAAwB,GAAoB,KAC3D,EAAmB,IAAwB,GAAoB,OAC/D,GAA0B,IAAuB,GAAmB,OAEpE,EAAqB,KAAK,yBAC1B,GACJ,GAAsB,EAAmB,2BACrC,EAAmB,2BACnB,EACA,EACJ,GAAsB,EAAmB,yBACrC,EAAmB,yBACnB,EAEN,KAAK,YAAc,GAAc,EAAQ,CACvC,MAAO,EACP,cAAa,EACb,kBAAmB,IAAwB,GAAoB,OAC/D,iBAAkB,CAAC,CAAC,GAAuB,EAC3C,SAAQ,EACR,eAAc,EACd,iBAAgB,EAChB,UAAS,IAGX,GAAM,GAAa,KAAK,YAClB,GAAgB,EAAe,GAAW,GAE1C,GAAQ,GAAO,GACrB,MACE,AAAA,iBAAC,GAAS,CACR,KAAK,MAAK,aACE,EACZ,UAAW,EAAW,KACtB,aAAc,KAAK,eACnB,WAAY,KAAK,aACjB,YAAa,KAAK,iBAAgB,oBAChB,gBAClB,UAAW,GAAmB,YAE7B,EACG,CACE,AAAA,gBAAA,MAAA,CACE,IAAI,aACJ,UAAW,EAAW,YAAW,kBACb,KAAK,IAAG,gBAC5B,QAAS,AAAC,EAA8C,OAA3B,KAAK,oBAA+B,gBAClD,EACf,KAAM,gBAEL,EACC,CACE,cAAe,EAAW,aAC1B,GAAO,KAAK,IAAG,gBACf,mBAAoB,GACpB,QAAS,EACT,SACE,AAAA,gBAAC,GAAe,CACd,GAAO,KAAK,IAAG,SAAQ,aAErB,IAAkB,EAAc,SAC5B,EACA,EAA2B,oBAEd,CAAC,GAAoB,OACxC,SAAU,GACV,SAAU,EACV,YAAa,GACb,UAAW,CAAC,EACZ,UAAW,EAAW,MACtB,wBAAyB,EACzB,aAAc,EACd,UAAW,MAIjB,KAAK,+BAGT,AAAC,KAAK,MAAM,4BAoBR,KAnBF,GAAiC,CAAC,EAChC,AAAA,gBAAA,QAAA,CACE,IAAI,kBACJ,GAAO,KAAK,IAAG,gBACf,UAAW,EAAW,gBAAe,cACxB,IAEZ,GAED,GAA+B,EACjC,AAAA,gBAAA,QAAA,CACE,IAAI,kBACJ,GAAO,KAAK,IAAG,gBACf,UAAW,EAAW,gBAAe,cACxB,IAEZ,GAED,MAGR,KACH,EAAqB,GAAK,KAAK,MAAM,wBAA0B,GAAsB,QACpF,AAAA,gBAAA,MAAA,CACE,UAAW,EAAW,oBACtB,QAAS,KAAK,qBAAoB,oBACf,GAAI,aACX,EAAiC,gBAC9B,CAAC,EAChB,KAAK,gBAEL,AAAA,gBAAC,GAAa,CACZ,UAAW,EAAW,eACtB,SAAU,GAAQ,iBAAmB,qBAGvC,KACJ,AAAA,gBAAC,GAAW,CAAC,YAAa,EAAa,KAAK,WAAW,MAAO,EAAqB,IAClF,EAAQ,IAAI,SAAC,EAAiB,EAAmB,CAChD,GAAM,IAAe,EACjB,GAAe,IAA8B,EAAc,EAAQ,OAAS,EAC5E,GACJ,MAAO,CACL,GACG,KAAgB,IAAgB,EAAQ,OAAS,IAClD,EAAK,gBAAgB,GACvB,AAAA,gBAAC,GAAa,CACZ,OAAQ,EACR,OAAQ,EAAO,OACf,IAAK,EAAO,IACZ,YAAc,GAAe,EAAI,GAAK,EACtC,SAAU,EAAK,IACf,YAAa,GACb,eAAgB,EAAK,gBACrB,eAAgB,EAAK,gBACrB,cAAe,EACf,oBAAqB,EAErB,4BAA6B,EAAK,MAAM,4BACxC,UAAW,EAAK,iBAAiB,cAAgB,EACjD,eAAgB,EAAK,MAAM,eAC3B,aAAc,IAEhB,EAAK,qBAAqB,MAG7B,GAAsB,IAA6B,GAAK,KAAK,gBAAgB,EAAQ,QACrF,GACC,AAAA,gBAAC,GAAK,KACJ,AAAA,gBAAA,MAAA,CACE,UAAW,EAAW,cACtB,YAAa,KAAK,kBAClB,UAAW,KAAK,qBASrB,EAAA,UAAA,MAAP,UAAA,OACE,MAAO,CAAC,CAAA,IAAC,KAAK,eAAe,WAAO,MAAA,IAAA,OAAA,OAAA,EAAE,UAQhC,EAAA,UAAA,uBAAR,UAAA,CACQ,GAAA,GAA+C,KAAK,MAAlD,EAAoB,EAAA,qBAAE,EAAkB,EAAA,mBAChD,MAAO,IAAuB,GAAoB,EAAA,EAAA,GAAS,GAAoB,CAAE,gBAAiB,UAG5F,EAAA,UAAA,0BAAR,UAAA,CACE,GAAM,GAAU,CACd,eAAgB,EAChB,QAAS,CAAE,KAAM,KAAM,MAAO,GAC9B,QAAS,UAAA,CAAM,MAAA,IACf,QAAS,UAAA,CAAM,MAAA,IACf,YAAa,UAAA,GACb,gBAAiB,KAAK,qBACtB,OAAQ,KAAK,QACb,UAAW,UAAA,GACX,WAAY,KAAK,aAEnB,MAAO,IASD,EAAA,UAAA,6BAAR,UAAA,CACE,MAAO,MAAK,uBAAyB,GAgD/B,EAAA,UAAA,wBAAR,UAAA,CACQ,GAAA,GAAwC,KAAK,MAA3C,EAAa,EAAA,cAAE,EAAkB,EAAA,mBAEzC,MAAO,KAAkB,EAAc,MAAQ,IAAuB,GAAmB,QAyBnF,EAAA,UAAA,gBAAR,UAAA,CACE,AAAI,KAAK,uBAAyB,GAChC,MAAK,uBAAuB,KAAK,iBAAiB,KAAK,uBAAuB,mBAAoB,QAClG,KAAK,sBAAwB,KAIzB,EAAA,UAAA,uBAAR,SAA+B,EAAsB,EAAuB,CACzE,EAAQ,WAAW,GAAmB,MAAM,QAAU,EACtD,EAAQ,WAAW,GAAmB,MAAM,QAAU,GA2IjD,EAAA,UAAA,iBAAR,SAAyB,EAAiB,CACxC,GAAI,KAAK,aAAa,QAAS,CAC7B,GAAM,GAAa,KAAK,aAAa,QAAQ,wBAC7C,GACE,EAAM,QAAU,EAAW,MAC3B,EAAM,QAAU,EAAW,OAC3B,EAAM,QAAU,EAAW,KAC3B,EAAM,QAAU,EAAW,OAE3B,MAAO,IAAsB,SAgC3B,EAAA,UAAA,qBAAR,SAA6B,EAAmB,CACtC,GAAA,GAAyB,KAAK,MAAK,QAAnC,EAAO,IAAA,OAAG,GAAU,EACtB,EAAS,EAAQ,GACf,EAAoB,EAAM,gBAClC,MAAO,GACH,EAAgB,CAAE,OAAM,EAAE,YAAW,GAAI,KAAK,oBAC9C,KAAK,mBAAmB,CAAE,OAAM,EAAE,YAAW,KAG3C,EAAA,UAAA,gBAAR,SAAwB,EAAqB,CAC3C,GAAM,GAAa,KAAK,YAClB,EAAgB,KAAK,MAAM,aAAe,GAAW,GAC3D,MACE,AAAA,iBAAA,MAAA,CAAK,IAAK,cAAe,UAAW,EAAW,cAAe,GAAI,kBAAkB,GAClF,AAAA,gBAAA,MAAA,CACE,KAAK,eACL,IAAK,oBACL,UAAW,EAAW,mBAAkB,oBACrB,GAAK,mBACN,EAAa,cAClB,IAEb,AAAA,gBAAC,EAAa,CAAC,SAAU,sBAE3B,AAAA,gBAAA,MAAA,CACE,IAAK,kBAAiB,cACT,GAAI,oBACE,GAAK,mBACN,EAClB,UAAW,EAAW,sBAiBtB,EAAA,UAAA,oBAAR,SAA4B,EAAqB,EAAiC,CAC1E,GAAA,GAAgD,KAAK,MAAnD,EAAmB,EAAA,oBAAE,EAAA,EAAA,QAAA,EAAO,IAAA,OAAG,GAAU,EACjD,AAAI,GACF,EAAoB,EAAQ,GAAc,IAyLtC,EAAA,UAAA,oBAAR,UAAA,CACE,GAAM,GAAgB,CAAC,CAAC,KAAK,MAAM,WAAa,KAAK,MAAM,UAAU,gBAErE,AAAI,KAAK,MAAM,gBAAkB,GAC/B,KAAK,SAAS,CACZ,cAAe,KAt0BP,EAAA,aAAe,CAC3B,oBAAqB,GAAoB,QACzC,sBAAuB,GAAsB,QAC7C,aAAc,IAk1BlB,GAv1BgB,aAy1BhB,YAAsB,EAAc,EAAgB,EAAc,EAAa,CAC7E,MAAO,GAAM,GAAU,GAAQ,GAAU,EAAQ,GAAU,GAAQ,GAAU,EADtE,qBAGT,YAAmB,EAAc,EAAW,EAAS,CACnD,MAAO,GAAM,GAAK,EAAI,GAAK,EADpB,kBAGT,YAAkB,EAAc,EAAW,EAAS,CAClD,MAAO,GAAM,GAAK,EAAI,GAAK,EADpB,iBAIT,YAA0B,EAAiC,CACzD,EAAG,kBADI,yByB93BF,GAAM,IAAkE,EAI7E,GAAmB,GAAW,OAAW,CAAE,MAAO,kBCfpD,MAAuB,OCAvB,OAAuB,OCAvB,OAAuB,OAMvB,GAAM,IAAc,WAAC,EAAW,EAAe,CAC7C,GAAI,GAAQ,GAAQ,GAAU,EAAO,UAAY,EAAK,EAAO,WAAa,GAM1E,MAJI,IAAU,MACZ,GAAQ,IAGN,MAAO,IAAU,UACZ,EAAM,WAGR,GAXW,eAmBP,GAAoE,WAAA,EAAK,CAElF,GAAA,GAWE,EAAK,QAVP,EAUE,EAAK,iBATP,EASE,EAAK,cARP,EAQE,EAAK,eARP,EAAc,IAAA,OAAG,GAAwB,EACzC,EAOE,EAAK,KANP,EAME,EAAK,UALP,EAKE,EAAK,mBAJP,EAIE,EAAK,gBAHP,EAGE,EAAK,cAFP,EAEE,EAAK,uBADP,EACE,EAAK,YAEH,EAAmB,AAAM,YAIzB,EAAgB,EAAiB,SAAY,GAAiB,QAAU,IAE9E,MACE,AAAA,kBAAA,MAAA,CAAK,UAAW,EAAc,OAAM,oBAAoB,mBAAmB,KAAK,gBAC7E,EAAQ,IAAI,SAAC,EAAQ,EAAW,CAC/B,GAAM,GACJ,MAAO,GAAO,iBAAoB,YAC9B,OACA,EAAO,gBACP,EAAe,gBACf,EAAe,iBACd,GAAO,SAAW,EAAe,sBAAwB,GAExD,EAAiE,EAAM,SAAvE,EAAQ,IAAA,OAAG,EAAkB,EAAE,EAAkC,EAAM,YAAxC,EAAW,IAAA,OAAG,EAAe,EAC9D,EACJ,GAAiB,EAAO,MAAO,GAC3B,EAAc,EAAO,KACrB,EACA,EAAS,EAAM,EAAW,GAC1B,GAAY,EAAM,GAElB,EAAmB,EAAc,EAAO,KAExC,EAAe,GAA0B,EAAc,EAAY,EAAM,EAAW,GAAU,OAEhG,EAAgB,GAEpB,AAAI,IAAiB,QAAa,IAAqB,QAAa,IAAiB,GACnF,GAAgB,IAGlB,EAAc,EAAO,KAAO,EAI5B,GAAM,GAAM,GAAG,EAAO,IAAM,KAAiB,OAAY,IAAI,EAAiB,IAC9E,MACE,AAAA,kBAAA,MAAA,CACE,IAAK,EACL,GAAI,EAAO,YAAc,EAAc,OACvC,KAAM,EAAO,YAAc,YAAc,WAAU,gBAAA,GAAA,gBAEpC,EAAc,EAAmB,EAChD,UAAW,GACT,EAAO,UACP,EAAO,aAAe,EAAc,YACpC,EAAO,aAAe,EAAc,YACpC,EAAc,KACd,EAAO,SAAW,EAAc,WAAa,EAAc,aAC3D,GAAiB,EAAc,eAEjC,MAAO,CAAE,MAAK,GAAE,oBACE,iBAAgB,sBACb,EAAO,KAE3B,OA1EoE,oBDCjF,GAAM,IAAgB,IAiBhB,GAA6B,cAE7B,GAAwB,GAE9B,GAAA,SAAA,EAAA,CAAoC,EAAA,EAAA,GAuBlC,WAAY,EAA2B,CAAvC,GAAA,GACE,EAAA,KAAA,KAAM,IAAM,KAtBN,SAAA,MAAQ,AAAM,eACd,EAAA,cAAgB,AAAM,eACtB,EAAA,WAAa,AAAM,eA2VnB,EAAA,oBAAsB,UAAA,CAC5B,GAAM,GAAiB,GAAkB,EAAK,OAE9C,AAAK,GAAe,EAAgB,EAAK,MAAM,iBAC7C,EAAK,SAAS,CACZ,eAAgB,KAkCd,EAAA,qBAAuB,SAAC,EAAmB,EAAgB,CACzD,GAAA,GAAe,EAAK,MAAK,WAC3B,EAA2B,EAAK,MAA9B,EAAc,EAAA,eAAE,EAAI,EAAA,KAE5B,AAAK,EAIM,EAAgB,aACzB,GAAK,oBAAsB,EAAgB,YAAY,EAAM,IAJzD,EAAgB,aAClB,EAAgB,YAAY,EAAM,GAMlC,IAAe,GACjB,EAAK,SAAS,CAAE,WAAY,KAzX9B,EAAuB,GACvB,EAAK,QAAU,GAAI,GAAW,GAE9B,EAAK,MAAQ,CACX,eAAgB,GAAkB,GAClC,kBAAmB,OACnB,WAAY,IAGd,EAAK,oBAAsB,KAZ7B,6BAVc,EAAA,yBAAd,SACE,EACA,EAA+B,CAE/B,MAAA,GAAA,EAAA,GACK,GAAa,CAChB,eAAgB,GAAkB,MAkB/B,EAAA,UAAA,kBAAP,UAAA,CACQ,GAAA,GAAkD,KAAK,MAArD,EAAc,EAAA,eAAE,EAAS,EAAA,UAAE,EAAI,EAAA,KAAE,EAAU,EAAA,WAEnD,AAAI,GAAkB,KAAK,MAAM,SAC/B,MAAK,sBAAwB,EAAe,UAC1C,KAAK,MAAM,QACX,KAAK,QACL,KAAK,2BAIL,GACF,KAAK,QAAQ,GAAG,EAAW,GAAkB,KAAK,qBAGhD,GAAc,GAEhB,MAAK,kBAAoB,GACzB,EAAW,QAIR,EAAA,UAAA,mBAAP,SAA0B,EAAmC,CAC3D,GAAM,GAAQ,KAAK,MACb,EAAuB,KAAK,MAA1B,EAAI,EAAA,KAAE,EAAU,EAAA,WAChB,EAAsB,EAAK,kBAqBnC,GAlBE,MAAK,MAAM,YAAc,EAAc,WACvC,KAAK,MAAM,OAAS,EAAc,MAClC,KAAK,MAAM,iBAAmB,EAAc,iBAExC,MAAK,uBACP,MAAK,sBAAsB,UAC3B,MAAO,MAAK,uBAGV,KAAK,MAAM,gBAAkB,KAAK,MAAM,SAC1C,MAAK,sBAAwB,KAAK,MAAM,eAAe,UACrD,KAAK,MAAM,QACX,KAAK,QACL,KAAK,4BAKP,GAAqB,EAAkB,OAAS,GAAK,KAAK,cAAc,QAAS,CACnF,GAAM,GAAW,KAAK,cAAc,QAAQ,wBAAwB,MAEpE,EAAkB,cAAc,GAEhC,KAAK,SAAS,CACZ,kBAAmB,SAIvB,AAAI,GAAQ,GAAc,CAAC,KAAK,mBAC9B,MAAK,kBAAoB,GACzB,EAAW,QAIR,EAAA,UAAA,qBAAP,UAAA,CACQ,GAAA,GAA0B,KAAK,MAA7B,EAAI,EAAA,KAAE,EAAa,EAAA,cAG3B,AAAI,GAAiB,GACnB,EAAc,MAGZ,KAAK,uBACP,MAAK,sBAAsB,UAC3B,MAAO,MAAK,uBAGd,KAAK,QAAQ,WAGR,EAAA,UAAA,sBAAP,SAA6B,EAAiC,EAA2B,CACvF,GAAI,KAAK,MAAM,sBAAuB,CACpC,GAAM,GAAoB,GAAkB,GAC5C,MAAI,MAAK,MAAM,eAAe,aAAe,EAAkB,WACtD,GAEF,CAAC,GAAe,KAAK,MAAO,OAEnC,OAAO,IAIJ,EAAA,UAAA,OAAP,UAAA,CACQ,GAAA,GAkCF,KAAK,MAjCP,EAAS,EAAA,UACT,EAAA,EAAA,QAAA,EAAO,IAAA,OAAG,GAAU,EACpB,EAAc,EAAA,eACd,EAAI,EAAA,KACJ,EAAS,EAAA,UACT,EAAE,EAAA,GACF,EAAA,EAAA,gBAAA,EAAe,IAAA,OAAG,EAAC,EACnB,EAAA,EAAA,cAAA,EAAa,IAAA,OAAG,KAAK,eAAc,EACnC,EAAuB,EAAA,wBACvB,EAAkB,EAAA,mBAClB,EAAe,EAAA,gBACf,EAAa,EAAA,cACb,EAAA,EAAA,SAAA,EAAQ,IAAA,OAAG,EAAC,EACZ,EAAkB,EAAA,mBAClB,EAAe,EAAA,gBACf,EAAqB,EAAA,sBACrB,EAAoB,EAAA,qBACpB,EAAqB,EAAA,sBAErB,EAAA,EAAA,YAAa,EAAS,IAAA,OAAG,GAAgB,EACzC,EAAS,EAAA,UACT,EAAW,EAAA,YACX,EAAsB,EAAA,uBACtB,EAAO,EAAA,QACP,GAAK,EAAA,MACL,EAAM,EAAA,OACN,GAAa,EAAA,cACb,EAAiB,EAAA,kBACjB,EAAA,EAAA,aAAA,GAAY,IAAA,OAAG,GAAI,EACnB,GAAc,EAAA,eACd,EAAK,EAAA,MACL,EAAc,EAAA,eACd,GAAA,EAAA,SAAA,GAAQ,KAAA,OAAG,GAAK,GAEZ,GAAoC,KAAK,MAAvC,GAAiB,GAAA,kBAAE,GAAU,GAAA,WAC/B,GAAmD,KAAK,MAAM,eAA5D,GAAA,GAAA,WAAA,GAAU,KAAA,OAAG,GAAK,GAAE,GAAA,GAAA,iBAAA,GAAgB,KAAA,OAAG,GAAK,GAC9C,GAAc,EAAiB,CAAC,CAAE,GAAe,SAAW,EAAe,QAAQ,IAAS,OAC5F,GAAoB,GAAa,KAAK,qBAAuB,GAA6B,GAC1F,GAAY,EAAkB,EAAgB,GAAQ,OACtD,GAAkB,EAAwB,EAAsB,GAAQ,OACxE,GAAY,CAAC,CAAC,GAAa,EAAU,cAAc,EAAM,IAAc,CAAC,GACxE,GAAwB,IAAkB,EAAc,SACxD,GAAe,IAAkB,EAAc,MAAQ,IAAuB,GAAmB,OACjG,GAAe,IAAkB,EAAc,KAAO,OAAY,GAClE,GAAoB,EAAQ,EAAY,EAAM,WAAa,EAAI,OAC/D,GAAc,EAAQ,EAAM,MAAQ,OACpC,GAAqB,EAAiB,EAAe,UAAY,GAAmB,WAE1F,KAAK,YAAW,EAAA,EAAA,GACX,KAAK,aACL,GAAc,EAAQ,CACvB,MAAO,GACP,WAAU,GACV,UAAW,CAAC,GACZ,YAAa,GACb,sBAAqB,EACrB,kBAAiB,GACjB,UAAS,EACT,QAAO,EACP,uBAAsB,EACtB,eAAc,GACd,SAAQ,MAIZ,GAAM,IAAyD,CAC7D,YAAa,KAAK,YAAY,YAC9B,YAAa,KAAK,YAAY,YAC9B,KAAM,KAAK,YAAY,KACvB,cAAe,KAAK,YAAY,cAChC,WAAY,KAAK,YAAY,WAC7B,aAAc,KAAK,YAAY,aAC/B,OAAQ,KAAK,YAAY,QAO3B,AAAK,GAAe,KAAK,gBAAkB,GAAI,KAC7C,MAAK,eAAiB,IAGxB,GAAM,IACJ,AAAA,iBAAC,EAAS,CACR,cAAe,KAAK,eACpB,YAAgB,EAAE,UAClB,cAAe,GACf,QAAS,EACT,KAAM,EACN,UAAW,EACX,iBAAmB,IAAe,EAAI,GAAM,GAAoB,EAAI,GACpE,mBAAoB,EACpB,gBAAiB,EACjB,uBAAwB,EACxB,eAAgB,KAId,GAAc,MACd,GAAO,KAAK,MAAM,KAAO,KAAK,MAAM,KAAO,GAEjD,MACE,AAAA,kBAAC,GAAS,EAAA,CAAA,oBACW,IACf,GAAe,KAAK,MAAO,IAC1B,MAAO,KAAgB,UACxB,CACE,oBAAqB,GACrB,UAAW,IAEb,GACA,EAAc,CAClB,UAAW,GACX,WAAY,KAAK,MACjB,aAAc,KAAK,WACnB,KAAM,GAAI,aACE,GAAS,gBACN,IAAY,OAAS,mBAClB,GAClB,UAAW,KAAK,YAAY,KAAI,uBACV,EAAS,8BACF,GAAI,0BACR,IAAY,OAAS,kBAC7B,EAAS,gBACX,KAAsB,OAAY,EAAY,EAAkB,OAAS,aAC3E,GAAqB,EAAoB,GAAM,OAAS,gBACtD,GAAiB,eAClB,GAAW,oBACP,aAClB,MAAO,CAAE,SAAU,GAAU,gBACd,GACf,eAAgB,KAEf,IACC,AAAA,iBAAA,MAAA,CAAK,KAAK,WAAU,gBAAgB,EAAC,wBAAyB,GAAM,UAAW,KAAK,YAAY,WAC7F,EAAc,CACb,GAAI,EAAQ,EAAE,YAAc,OAC5B,SAAU,GACV,cAAa,EACb,YAAa,GACb,aAAc,EACd,kBAAmB,EAAQ,EAAE,aAAa,EAAE,UAAY,OACxD,UAAS,GACT,QAAO,EACP,UAAW,KAAK,YAAY,MAC5B,MAAK,GACL,UAAW,IAAuB,GAAmB,OACrD,wBAAyB,EACzB,aAAY,MAKlB,AAAA,iBAAC,GAAW,CACV,YAAa,EACb,KAAK,WACL,MAAO,EAAsB,MAAK,MAAM,wBAA0B,GAAsB,OAAS,EAAI,KAGtG,GAAQ,GACR,IACC,AAAA,iBAAA,OAAA,CACE,KAAK,eACL,UAAW,GAAI,KAAK,YAAY,aAAc,KAAK,YAAY,MAC/D,IAAK,KAAK,eAEV,AAAA,iBAAC,EAAS,CACR,cAAe,KAAK,eACpB,YAAgB,EAAE,UAClB,QAAS,CAAC,GAAkB,QAC5B,KAAM,EACN,UAAW,EACX,iBAAmB,IAAe,EAAI,GAAM,GAAoB,EAAI,GAAK,EAAQ,OACjF,mBAAoB,EACpB,gBAAiB,KAKvB,AAAA,iBAAA,OAAA,CACE,KAAK,WACL,UAAW,KAAK,YAAY,WAAU,eACxB,GAAU,wBACD,OAYxB,EAAA,UAAA,YAAP,SAAmB,EAAe,EAAsC,CAC9D,GAAA,GAAyB,KAAK,MAAK,QAAnC,EAAO,IAAA,OAAG,GAAU,EACtB,EAAM,EAAA,GAAiB,EAAQ,IAErC,EAAO,SAAW,EAClB,EAAO,SAAW,OAElB,MAAO,GAAO,gBAEd,KAAK,SAAS,CACZ,kBAAmB,CACjB,MAAK,EACL,OAAM,EACN,cAAa,MAKZ,EAAA,UAAA,MAAP,SAAa,EAAsC,OAAtC,MAAA,KAAA,QAAA,GAAA,IACJ,CAAC,CAAA,IAAC,KAAK,WAAW,WAAO,MAAA,IAAA,OAAA,OAAA,EAAE,MAAM,KAGhC,EAAA,UAAA,eAAV,SAAyB,EAA4B,CACnD,MAAO,AAAA,kBAAC,GAAe,EAAA,GAAK,KAatB,EAAA,UAAA,uBAAR,UAAA,CACQ,GAAA,GAAwD,KAAK,MAA3D,EAAI,EAAA,KAAE,EAAS,EAAA,UAAE,EAAc,EAAA,eAAE,EAAgB,EAAA,iBACnD,EAAU,CACd,SAAU,EACV,eAAgB,EAChB,QAAS,CAAE,KAAM,EAAM,MAAO,GAC9B,QAAS,EAAgB,QACzB,QAAS,EAAgB,QACzB,YAAa,EAAgB,YAC7B,gBAAiB,KAAK,qBACtB,OAAQ,EAAgB,OACxB,UAAW,EAAgB,UAC3B,WAAY,EAAgB,YAG9B,MAAO,IA8BX,GAtZ0C,cAwZ1C,YAA2B,EAA2B,OAC5C,EAAyB,EAAK,UAAnB,EAAc,EAAK,UAEtC,MAAO,CACL,WAAY,CAAC,CAAC,IAAS,KAAA,OAAT,EAAW,gBAAgB,IACzC,iBAAkB,CAAC,CAAA,IAAC,GAAS,KAAA,OAAT,EAAW,WAAO,MAAA,IAAA,OAAA,OAAA,EAAA,KAAlB,KALf,0BE5bF,GAAM,IAA4D,EAIvE,GAAgB,GAAqB,OAAW,CAChD,MAAO,eChBT,OAAuB,OAmEvB,GAAM,IAAe,IACf,GAAsB,EAOtB,YACJ,EAAyF,CAEzF,MAAA,UAAA,EAAA,CAA2C,EAAA,EAAA,GAOzC,WAAY,EAAa,CAAzB,GAAA,GACE,EAAA,KAAA,KAAM,IAAM,KAPN,SAAA,MAAQ,AAAM,eAoGd,EAAA,wBAA0B,UAAA,CAChC,GAAM,GAAM,GAAU,EAAK,MAAM,SAEjC,EAAK,wBAA0B,GAAK,GAAY,eAAe,EAAK,gBACpE,EAAK,wBAAwB,QAAQ,EAAK,MAAM,UAG1C,EAAA,0BAA4B,UAAA,CAClC,AAAI,EAAK,yBACP,GAAK,wBAAwB,aAC7B,MAAO,GAAK,0BAKR,EAAA,gBAAkB,SAAC,EAAyB,CAC1C,GAAA,GAAa,EAAK,MAAK,SACzB,EAAkB,EAAK,MAAM,QAC7B,EAAgB,GAAqB,GACrC,EAAa,GAAQ,GACrB,EAAa,GAAQ,GACrB,EAAkB,YAAA,CACtB,AAAI,GAAmB,EAAK,4BAC1B,EAAK,2BAA2B,eAFZ,mBAMlB,EACH,IAAc,EAAW,SAAW,EAAU,OAAU,IAAc,EAAW,UAAY,EAAU,OAE1G,AAAI,GAAiB,EAAK,gBAAkB,IAAuB,GAAc,EAC/E,GAAK,kBACL,EAAK,SACH,CACE,SAAU,CACR,MAAO,EAAW,MAClB,OAAQ,EAAW,SAGvB,UAAA,CACE,EAAK,gBAAgB,MAIzB,GAAK,gBAAkB,EACvB,MAxIF,EAAK,OAAS,GAAI,IAAM,GACxB,EAAK,QAAU,GAAI,GAAW,GAC9B,EAAK,gBAAkB,EAEvB,EAAK,MAAQ,CACX,SAAU,CACR,MAAO,EACP,OAAQ,MAVd,oCAeO,EAAA,UAAA,kBAAP,UAAA,CAAA,GAAA,GAAA,KACQ,EAAqE,KAAK,MAAxE,EAAiB,EAAA,kBAAE,EAAqB,EAAA,sBAAE,EAAoB,EAAA,qBAChE,EAAM,GAAU,KAAK,MAAM,SAEjC,KAAK,eAAiB,KAAK,OAAO,SAAS,KAAK,eAAgB,GAAc,CAC5E,QAAS,KAGN,GACH,CAAI,CAAC,GAAyB,KAAK,6BACjC,KAAK,0BAEL,KAAK,QAAQ,GAAG,EAAK,SAAU,KAAK,gBAGtC,AAAI,EACF,KAAK,OAAO,WAAW,UAAA,CACrB,EAAK,mBACJ,IAEH,KAAK,oBAKJ,EAAA,UAAA,mBAAP,SAA0B,EAAqB,CACrC,GAAsB,GAAiC,EAAmC,qBAC5F,EAAkD,KAAK,MAArD,EAAqB,EAAA,sBAAE,EAAoB,EAAA,qBAC7C,EAAM,GAAU,KAAK,MAAM,SAEjC,AAAI,IAAyB,GAC3B,CAAK,EAWH,MAAK,4BACL,KAAK,QAAQ,IAAI,EAAK,SAAU,KAAK,iBAXrC,CAAI,CAAC,GAAyB,KAAK,6BAC5B,KAAK,yBACR,KAAK,0BAGP,KAAK,QAAQ,GAAG,EAAK,SAAU,KAAK,gBAGtC,KAAK,qBAQJ,EAAA,UAAA,qBAAP,UAAA,CACE,KAAK,QAAQ,UACb,KAAK,OAAO,UACZ,KAAK,6BAGA,EAAA,UAAA,OAAP,UAAA,CACU,GAAA,GAAa,KAAK,MAAK,SACzB,EAAc,EAAU,MAAQ,GAAK,EAAU,OAAS,EAAI,EAAW,OAE7E,MACE,AAAA,kBAAA,MAAA,CAAK,UAAU,cAAc,IAAK,KAAK,MAAO,MAAO,CAAE,SAAU,EAAG,UAAW,IAC7E,AAAA,iBAAC,EAAiB,EAAA,CAAC,IAAK,KAAK,4BAA6B,SAAU,GAAkB,KAAK,UAK1F,EAAA,UAAA,YAAP,UAAA,CACE,KAAK,gBAAgB,KAGf,EAAA,UAAA,eAAR,UAAA,CACE,KAAK,mBAGC,EAAA,UAAA,2BAAR,UAAA,CACE,GAAM,GAAM,GAAU,KAAK,MAAM,SAEjC,MAAO,IAAQ,EAAY,gBAmD/B,GArJ2C,IAH7B,qBCrET,GAAM,IAAgB,WAAC,EAA4B,CACxD,GAAI,GAAQ,EAEZ,GAAI,EAIF,OAHM,GAAe,GAAO,GACxB,EAAY,OAET,GAAmB,EAAgB,OAAS,GACjD,EAAE,EAEF,EAAe,EAAgB,MAE3B,GAAgB,EAAa,UAC/B,EAAgB,KAAI,MAApB,EAAwB,EAAa,UAK3C,MAAO,IAlBoB,iBLmD7B,GAAM,IAAgB,IAiBhB,GAAmB,IAEnB,GAAiC,EACjC,GAAkC,EA6BlC,GAAgE,WACpE,EAA6B,CAErB,GAAA,GAAc,EAAK,UAGzB,EA2EE,EAAK,uBA1EP,EA0EE,EAAK,8BAzEP,EAyEE,EAAK,4BAxEP,EAwEE,EAAK,UAvEP,EAuEE,EAAK,mBAtEP,EAsEE,EAAK,QArEP,EAqEE,EAAK,cApEP,EAoEE,EAAK,eAnEP,EAmEE,EAAK,OAlEP,EAkEE,EAAK,WAjEP,EAiEE,EAAK,YAhEP,EAgEE,EAAK,MA/DP,EA+DE,EAAK,kBA9DP,EA8DE,EAAK,gBA7DP,EA6DE,EAAK,WA5DP,EA4DE,EAAK,cA3DP,EA2DE,EAAK,kBA1DP,EA0DE,EAAK,oBAzDP,EAyDE,EAAK,0BAxDP,EAwDE,EAAK,cAxDP,EAAa,IAAA,OAAG,EAAU,KAAI,EAC9B,EAuDE,EAAK,+BAtDP,EAsDE,EAAK,mBArDP,EAqDE,EAAK,UApDP,EAoDE,EAAK,iBAnDP,EAmDE,EAAK,mBAlDP,EAkDE,EAAK,2BAlDP,EAA0B,IAAA,OAAG,GAAK,EAClC,EAiDE,EAAK,OAhDP,GAgDE,EAAK,UA/CP,EA+CE,EAAK,aA9CP,GA8CE,EAAK,mBA7CP,EA6CE,EAAK,SA5CP,EA4CE,EAAK,qBA3CP,GA2CE,EAAK,eA1CP,GA0CE,EAAK,OAzCP,EAyCE,EAAK,MAxCP,EAwCE,EAAK,eAxCP,GAAc,IAAA,OAAG,GAAwB,EACzC,GAuCE,EAAK,iBAtCP,GAsCE,EAAK,aArCP,GAqCE,EAAK,eApCP,GAoCE,EAAK,gBAnCP,GAmCE,EAAK,YAlCP,GAkCE,EAAK,SAjCP,GAiCE,EAAK,oBAhCP,GAgCE,EAAK,QA/BP,GA+BE,EAAK,QA9BP,GA8BE,EAAK,QA7BP,GA6BE,EAAK,aA5BP,GA4BE,EAAK,qBA3BP,GA2BE,EAAK,eA1BP,GA0BE,EAAK,UAzBP,GAyBE,EAAK,0BAxBP,GAwBE,EAAK,wBAvBP,GAuBE,EAAK,cAtBP,GAsBE,EAAK,iBArBP,GAqBE,EAAK,qBApBP,GAoBE,EAAK,gBAnBP,GAmBE,EAAK,oBAlBP,GAkBE,EAAK,iBAjBP,GAiBE,EAAK,mBAhBP,GAgBE,EAAK,OAfa,GAelB,EAAK,mBAdP,GAcE,EAAK,oBAbP,GAaE,EAAK,mBAZP,GAYE,EAAK,gBAXP,GAWE,EAAK,gBAVP,GAUE,EAAK,sBATP,GASE,EAAK,qBARP,GAQE,EAAK,0BAPP,GAOE,EAAK,sBANP,GAME,EAAK,sBALP,GAKE,EAAK,uBAJP,GAIE,EAAK,2BAHP,GAGE,EAAK,mBAFP,GAEE,EAAK,iBADP,GACE,EAAK,eAEH,GAAc,OACd,GAAO,EAAM,KAAO,EAAM,KAAO,GAEjC,GAAQ,GAAM,OAEd,GAAoB,GAAqB,GACzC,GAA6B,GAA8B,GAE3D,GAAsB,AAAM,UAAQ,UAAA,CACxC,MAAA,GAAA,CACE,qBAAsB,GAAW,EAAI,GACrC,sBAAuB,GAAW,EAAI,GACtC,OAAM,EACN,QAAO,IACJ,KAEJ,CAAC,GAAU,EAAQ,GAAS,KAE3B,GAAsB,GAAoB,KAI9C,GAHI,IAAkB,EAAc,QAClC,IAAsB,GAAoB,QAExC,IAAkB,EAAc,SAAU,CAE5C,GAAI,IACF,GAAc,EAAW,aAAe,EAAW,YAAY,8BACjE,AAAI,KAAkC,QACpC,IAAgC,IAElC,GAAM,IAAqB,IAAiC,CAAC,GAAU,GACvE,GAAsB,GAAqB,GAAoB,QAAU,GAAoB,OAG/F,AAAI,IAAuB,GAAmB,QAC5C,IAAsB,GAAoB,MAG5C,GAAM,IAA+B,AAAM,cACzC,SAAC,EAAuC,CACtC,MAAO,AAAA,iBAAC,GAAa,EAAA,GAAK,KAE5B,IAGI,GAA+B,AAAM,cAAY,UAAA,CACrD,MAAO,OACN,IAEG,GAA6B,EAAM,sBAEnC,GAAwB,AAAM,UAAQ,UAAA,CAC1C,MAAO,IACH,GAAsB,GAA4B,IAClD,IACH,CAAC,GAA4B,KAE1B,GAA6B,EAAM,sBAEnC,GAAwB,AAAM,UAAQ,UAAA,CAC1C,MAAO,IACH,GAAsB,GAA4B,IAClD,IACH,CAAC,GAA4B,KAE1B,GAAqB,AAAM,UAAQ,UAAA,CACvC,MAAO,CACL,QAAS,GACT,kBAAiB,GACjB,UAAS,EACT,cAAa,EACb,SAAQ,EACR,mBAAkB,EAClB,YAAW,EACX,eAAc,KAEf,CACD,GACA,GACA,EACA,EACA,EACA,EACA,EACA,KAGI,GAAyB,IAAwB,GAAqB,UAEtE,GAAkB,AAAM,cAC5B,SACE,EAKA,GAAiB,IAJf,IAAY,EAAA,aAMV,GAA2C,GAAsB,QACrE,GAAI,GAAwB,CAC1B,GAAI,IAAgB,KAAiB,GAAsB,OACzD,GAAoB,WACX,GAAQ,QAAS,CAC1B,GAAM,IAAa,GAAQ,QAAQ,wBACnC,AACE,GAAM,QAAU,GAAW,MAC3B,GAAM,QAAU,GAAW,OAC3B,GAAM,QAAU,GAAW,KAC3B,GAAM,QAAU,GAAW,QAE3B,IAAoB,GAAsB,SAG9C,GAAuB,MAG3B,CAAC,GAAwB,KAGrB,GAAqB,AAAM,UAAQ,UAAA,CACvC,GAAI,GACF,MAAA,GAAA,EAAA,GACK,IAAoB,CACvB,gBAAe,MAGlB,CAAC,GAAsB,KAEpB,GAAY,GAAkB,EAAI,GAAK,GAAc,GAAW,GAAQ,EAAM,OAAS,GACvF,GACH,MAAwB,GAAoB,KAAO,EAAI,GACvD,IAAkB,GAAgB,OAAS,GAC3C,GAAS,EAAI,GAEV,GAAa,AAAM,UAAQ,UAAA,CAC/B,MAAO,IAAc,GAAQ,CAC3B,MAAO,EACP,QAAO,EACP,QAAS,IAAe,GAAsB,aAC9C,wBAAyB,IAAkB,GAAc,sBACzD,UAAS,KAEV,CAAC,GAAQ,EAAO,EAAS,EAAY,EAAe,IAEjD,GAA6B,GAAc,EAAW,eAEtD,GAAkC,AAAM,UAAQ,UAAA,CACpD,MAAO,IACH,SAAC,EAAsC,GAAmD,CACxF,MAAO,IAA0B,EAAA,EAAA,GAE1B,GAAgB,CACnB,QAAS,GACT,kBAAiB,GACjB,YAAW,EACX,UAAS,EACT,cAAa,EACb,SAAQ,EACR,mBAAkB,EAClB,eAAc,KAEhB,KAGJ,QACH,CACD,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,KAGI,GAA6B,GAAc,EAAW,eAEtD,GAAkC,AAAM,UAAQ,UAAA,CACpD,MAAO,IACH,SAAC,EAAsC,GAAmD,WAChF,GAAe,EAAgB,WACjC,GACJ,KAAe,OAAW,IAAA,IAAC,EAAiB,UAAM,MAAA,KAAA,OAAA,OAAA,GAAG,OAAU,MAAA,KAAA,OAAA,OAAA,GAAG,IAAM,OACpE,GACJ,KAAa,QAAa,GAA2B,IACjD,GAA2B,IAAU,cACrC,EAEN,MAAO,IAA0B,EAAA,EAAA,GAE1B,GAAgB,CACnB,QAAS,GACT,kBAAiB,GACjB,YAAW,EACX,UAAS,EACT,cAAe,IAAuB,GAAmB,OAAS,EAAgB,EAAc,KAChG,SAAQ,EACR,mBAAkB,EAClB,eAAc,GACd,YAAa,GAAgB,OAC7B,aAAc,OACd,YAAa,OACb,aAAc,OACd,aAAc,KAAe,OAAY,GAAiB,GAAkB,EAAI,GAAK,SAEvF,KAGJ,SAAC,EAAsC,GAAkD,WAC/E,GAAe,EAAgB,WACjC,GACJ,KAAe,OAAW,IAAA,IAAC,EAAiB,UAAM,MAAA,KAAA,OAAA,OAAA,GAAG,OAAU,MAAA,KAAA,OAAA,OAAA,GAAG,IAAM,OACpE,GACJ,KAAa,QAAa,GAA2B,IACjD,GAA2B,IAAU,cACrC,EAEN,MAAO,IAAa,EAAA,EAAA,GACf,GAAgB,CACnB,YAAa,GAAgB,OAC7B,aAAc,OACd,YAAa,OACb,aAAc,OACd,aAAc,KAAe,OAAY,GAAiB,GAAkB,EAAI,GAAK,YAG5F,CACD,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,KAGI,GAAkB,AAAM,UAAQ,UAAA,CACpC,MAAA,GAAA,EAAA,GACK,GAAU,CACb,KAAM,KAAS,GAAc,WAAa,eAC1C,eAAgB,GAChB,eAAgB,GAEhB,YAAW,EAAA,CACT,qBAAsB,CACpB,aAAc,KAEb,GAAU,KAAA,OAAV,EAAY,gBAGlB,CAAC,EAAY,GAAiC,GAAiC,GAA2B,KAEvG,GAAkB,GAAS,UAAA,CAC/B,MAAA,IAAgB,SAAC,EAAkB,CACjC,GAAI,IAAqB,EAEzB,SAAQ,QAAQ,SAAC,GAAe,CAAK,MAAC,KAAc,GAAO,iBAAmB,GAAO,WAE9E,OAIL,GAAwB,GAAc,EAAW,sBAEjD,GAAW,AAAM,UAAQ,UAAA,CAC7B,MAAO,IAAgB,KACtB,CAAC,GAAiB,KAEf,GAAe,AAAM,cACzB,SAAC,EAAsB,GAAW,GAAe,GAAc,CAC7D,GAAM,IAAmB,EAAM,YAC3B,GAAsB,EAAM,YAAa,IACzC,GAEE,GAA+B,GAAQ,GAAM,IAAM,OACnD,GACJ,IAAY,GAA2B,IACnC,GAA2B,IAAU,4BACrC,EAEA,GAAU,KAAS,GAAc,OAAY,eAE7C,GAA6B,CACjC,KAAM,GACN,UAAW,GACX,gBAAkB,GAAkB,EAAI,GAAK,GAC7C,QAAO,EACP,QAAS,GACT,kBAAmB,EACnB,GAAO,GAAK,IAAI,GAChB,cAAa,EACb,UAAS,EACT,WAAY,GACZ,cAAe,GACf,mBAAkB,GAClB,gBAAe,GACf,iBAAgB,GAChB,eAAc,EACd,eAAc,GACd,SAAQ,EACR,mBAAkB,EAClB,sBAAqB,GACrB,gBAAe,GACf,sBAAqB,GACrB,qBAAoB,GACpB,sBAAqB,GACrB,sBAAqB,GACrB,YAAW,EACX,eAAc,GACd,wBAAyB,GACzB,uBAAsB,GACtB,SAAQ,GACR,aAAY,GACZ,KAAM,IAGR,MAAK,IAQE,GAAiB,IAPlB,GACK,GAAoB,GAAO,IAG7B,MAKX,CACE,EACA,GACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,GACA,EACA,EACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,EAAM,YACN,GACA,GACA,KAIE,GAAmB,AAAM,cAC7B,SAAC,EAAoB,CACnB,MAAO,UAAC,GAAW,GAAiB,CAClC,MAAO,IAAa,EAAc,GAAM,MAG5C,CAAC,KAGG,GAAe,AAAM,cACzB,SAAC,EAAuC,CAEtC,MAAO,GAAM,QAAU,GAAkB,EAAS,MAAO,IAE3D,CAAC,IAGG,GAAmB,EAAA,EAAA,GACpB,IAAc,CACjB,aAAc,GACd,UAAW,GAAW,UACtB,UAAW,GAAiB,GAAe,UAAY,GAAmB,SAC1E,qBACE,IAAkB,GAAe,qBAAuB,GAAe,qBAAuB,GAChG,uBACE,IAAkB,GAAe,uBAC7B,GAAe,uBACf,GACN,yBAA0B,GAC1B,OAAQ,IAAkB,GAAe,OAAS,GAAe,OAAS,KAGtE,GAAO,EACX,AAAA,gBAAC,GAAW,CACV,eAAgB,GAChB,aAAc,GACd,OAAQ,EACR,WAAY,GACZ,MAAO,EACP,aAAc,GACd,KAAK,eACL,UAAW,EACX,cAAe,IAAuB,GAAmB,OAAS,EAAgB,EAAc,KAChG,eAAgB,EAChB,eAAgB,GAChB,iBAAkB,EAClB,UAAW,GACX,0BAA2B,GAC3B,aAAc,EACd,mBAAoB,GACpB,eAAgB,GAChB,QAAS,IAGX,AAAA,gBAAC,GAAS,EAAA,GAAK,IACb,AAAA,gBAAC,GAAI,EAAA,CACH,IAAK,GACL,KAAK,eACL,MAAO,EACP,aAAc,GAAiB,GAC/B,aAAc,EACd,mBAAoB,IAChB,MAKJ,GAAkB,AAAM,cAC5B,SAAC,EAAoC,CAEnC,AAAI,EAAG,QAAU,EAAS,MACpB,GAAa,SAAW,GAAa,QAAQ,SAG3C,GAAU,qBAAqB,SAAW,GAC5C,EAAU,iBAAiB,EAAG,GAAM,IAGtC,EAAG,iBACH,EAAG,oBAIT,CAAC,EAAW,KAGR,GAAmB,AAAM,cAC7B,SAAC,EAAoC,CAEnC,AAAI,EAAG,QAAU,EAAS,IAAM,CAAC,EAAG,QAC9B,GAAU,SAAW,GAAU,QAAQ,SACzC,GAAG,iBACH,EAAG,oBAIT,CAAC,KAGH,MAGE,AAAA,iBAAA,MAAA,EAAA,CACE,IAAK,GACL,UAAW,GAAW,KAAI,oBACR,cAAa,qBACZ,QAAO,aACd,GACP,EAA6B,CAAE,KAAM,eAAkB,IAE5D,AAAA,gBAAC,GAAU,MACX,AAAA,gBAAA,MAAA,CACE,KAAM,GAAI,aACE,EAAgB,gBACb,EAAoB,GAAK,GAAQ,gBACjC,GAAQ,gBACT,OAAM,YACT,GAEX,AAAA,gBAAA,MAAA,CAAK,UAAW,GAAiB,KAAK,eAAe,UAAW,GAAW,eACxE,GACC,GACE,CACE,aAAc,GACd,cAAe,EACf,WAAY,EACZ,UAAW,EACX,QAAS,GACT,cAAe,EACf,oBAAqB,EACrB,gBAAiB,GACjB,wBAAyB,GACzB,oBAAqB,GACrB,kBAAmB,GACnB,eAAgB,GAChB,oBAAqB,GACrB,UAAW,EACX,8BAA+B,EAC/B,4BAA6B,EAC7B,oBAAqB,GACrB,sBAAuB,GAAc,EAAW,sBAChD,SAAU,EACV,mBAAoB,GACpB,qBAAsB,EACtB,eAAgB,GAChB,mBAAkB,EAClB,YAAW,EACX,wBAAyB,GACzB,SAAU,GAAgB,IAC1B,aAAY,IAEd,KAGN,AAAA,gBAAA,MAAA,CAAK,UAAW,GAAkB,KAAK,eAAe,UAAW,GAAW,gBACzE,AAAC,GAcA,GAbA,AAAA,gBAAC,GAAa,EAAA,CACZ,IAAK,GACL,UAAW,EACX,+BAAgC,EAChC,cAAe,EACf,cAAe,EACf,kBAAmB,EACnB,kBAAmB,IACd,GAAsB,IAE1B,KAMN,GAAqB,EAAA,GACjB,QA/mByD,oBAunBtE,GAAA,SAAA,EAAA,CAAqC,EAAA,EAAA,GAoCnC,WAAY,EAAwB,CAApC,GAAA,GACE,EAAA,KAAA,KAAM,IAAM,KAxBN,SAAA,MAAQ,AAAM,cACd,EAAA,QAAU,AAAM,cAChB,EAAA,aAAe,AAAM,cACrB,EAAA,MAAQ,AAAM,cACd,EAAA,WAAa,AAAM,cACnB,EAAA,eAAiB,AAAM,cA4KrB,EAAA,aAAe,SACvB,EACA,EAAiD,CAEjD,MAAO,AAAA,iBAAC,GAAU,EAAA,GAAK,KAGjB,EAAA,0BAA4B,SAClC,EACA,EAAgC,CAE1B,GAAA,GASF,EAAK,MARP,EAAkB,EAAA,mBAClB,EAAK,EAAA,MACL,EAAM,EAAA,OACN,EAAA,EAAA,cAAA,EAAa,IAAA,OAAG,EAAK,WAAW,KAAI,EACpC,EAAO,EAAA,QACP,EAAQ,EAAA,SACR,EAAO,EAAA,QACP,EAAc,EAAA,eAGR,EAAqC,GAAK,MAAM,YAAc,IAAE,qBAAhE,EAAoB,IAAA,OAAG,OAAS,EAClC,EAAoB,EAAU,UAAY,EAAU,SAAS,OAAU,EACvE,EAAoB,GAAY,EAAS,OAAU,EACnD,EAAuB,EAAU,SAAW,GAAU,EAAU,SAAW,OAC7E,EAAqB,GAEzB,AAAI,EAAU,aAAe,EAAK,MAAM,YACtC,GAAqB,IAGvB,GAAI,GAAY,EAEhB,MAAI,IACF,GAAK,qBAAuB,EAAU,oBAEtC,EAAS,EAAA,EAAA,GACJ,GAAS,CACZ,iBAAkB,EAAK,uBAAyB,OAAY,EAAK,qBAAuB,MAIxF,CAAC,EAAK,MAAM,sBAAwB,EAAU,QAAU,GAC1D,EAAK,WAAW,SAAS,EAAU,MAAO,GAI1C,GAAU,qBAAuB,GACjC,EAAU,UAAY,GACtB,IAAqB,GACrB,EAAU,UAAY,IAEtB,GAAqB,IAGvB,EAAS,EAAA,EAAA,GACJ,GACA,EAAK,eAAe,EAAW,EAAW,KAG3C,EAAU,gBAAkB,GAC9B,GAAqB,IAIrB,IAAyB,QACzB,EAAU,YACV,EAAU,WAAW,uBAAyB,QAE9C,GAAS,EAAA,EAAA,GACJ,GAAS,CACZ,YAAa,EAAU,WAAW,qBAClC,oBAAqB,CAAC,EAAU,WAAW,wBAI3C,EAAU,iBAAmB,GAC/B,GAAK,iBAAmB,EAAK,gBAAgB,UAC7C,EAAK,gBAAkB,EAAU,eAC7B,GAAI,IAAe,CACjB,UAAW,EAAK,WAChB,qBAAsB,EAAU,uBAElC,OACJ,EAAqB,IAGnB,GACF,GAAS,EAAA,EAAA,GACJ,GAAS,CACZ,QAAS,MAIN,GAGD,EAAA,2BAA6B,SAAC,EAA4B,CAChE,EAAK,SAAS,CAAE,oBAAqB,KAG/B,EAAA,yBAA2B,SAAC,EAAiB,EAAiB,CACpE,EAAK,SAAS,CAAE,SAAU,KAgBpB,EAAA,eAAiB,SAAC,EAAmB,CACrC,GAAA,GAAsB,EAAI,MAAxB,EAAI,EAAA,KAAE,EAAS,EAAA,UACjB,EAAU,EAAK,YAAY,EAAM,GACvC,EAAK,YAAY,GAAW,EAE5B,EAAK,wBAAwB,GAErB,GAAA,GAAkB,EAAK,MAAK,cACpC,AAAI,GACF,EAAc,EAAM,IAqBhB,EAAA,kBAAoB,SAAC,EAAmB,CACtC,GAAA,GAAqB,EAAK,MAAK,iBAEjC,EAAsB,EAAI,MAAxB,EAAI,EAAA,KAAE,EAAS,EAAA,UACjB,EAAU,EAAK,YAAY,EAAM,GACvC,MAAO,GAAK,YAAY,GAEpB,GACF,EAAiB,EAAM,IAInB,EAAA,kBAAoB,SAAC,EAAkB,CAC7C,EAAK,SAAS,CACZ,YAAa,IAEX,EAAK,aAAa,SACpB,EAAK,aAAa,QAAQ,kBAAkB,IAsOxC,EAAA,iBAAmB,SAAC,EAAyB,EAAkB,EAA2B,CAChG,GAAM,GAAqB,KAAK,IAAI,EAAe,UAAY,GAAkB,GACjF,AAAI,EAAK,MAAM,gBACb,EAAK,MAAM,eAAe,EAAgB,EAAoB,GAGhE,EAAK,yBAAyB,EAAgB,GAE9C,EAAK,SAAQ,EAAA,EAAA,GACR,EAAK,eAAe,EAAK,MAAO,EAAK,MAAO,GAAM,IAAoB,CACzE,QAAS,OAwBL,EAAA,qBAAuB,SAAC,EAAiB,EAAmB,CAClE,GAAI,GAAM,EACN,EAAQ,EACN,EAAa,OAAO,KAAK,EAAK,aAAa,OAEjD,OAAW,KAAO,GAAK,YACrB,GAAI,EAAK,YAAY,eAAe,GAAM,CACxC,GAAM,GAAa,EAAK,YAAY,GACpC,EAAW,YAAY,EAAa,SAAC,EAAa,CAChD,EAAM,KAAK,IAAI,EAAK,GACpB,IACI,IAAU,GACZ,EAAK,iBAAiB,EAAQ,EAAK,OAcrC,EAAA,oBAAsB,SAAC,EAAkB,EAAkC,CAC3E,GAAA,GAAiC,EAAK,MAApC,EAAK,EAAA,MAAE,EAAmB,EAAA,oBAElC,GAAI,EAAC,GAKD,EAAG,aAAa,mBAAoB,CACtC,GAAM,GAAQ,OAAO,EAAG,aAAa,oBACrC,AAAI,GAAS,GACP,IACF,EAAoB,EAAM,GAAQ,EAAO,GAE3C,EAAK,SAAS,CACZ,iBAAkB,OAMlB,EAAA,QAAU,SAAC,EAAoC,CACrD,EAAK,SAAS,CACZ,iBAAkB,MAtnBpB,EAAuB,GACvB,EAAK,OAAS,GAAI,IAAM,GAExB,EAAK,YAAc,GACnB,EAAK,iBAAmB,GAExB,EAAK,MAAQ,CACX,iBAAkB,GAClB,UAAW,EACX,gBAAiB,EAAK,oBAAoB,EAAO,QACjD,SAAU,GACV,YAAa,EAAM,YAAc,EAAM,WAAW,qBAClD,oBAAqB,EAAM,YAAc,CAAC,EAAM,WAAW,qBAC3D,QAAS,GACT,yBAA0B,EAAK,2BAGjC,EAAK,WACH,EAAM,WACN,GAAI,IAAU,CACZ,mBAAoB,OACpB,OAAQ,EAAM,OACd,cAAe,EAAM,gBAGpB,EAAK,MAAM,sBACd,EAAK,WAAW,SAAS,EAAM,MAA2B,IAG5D,EAAK,gBAAkB,EAAM,eACzB,GAAI,IAAe,CACjB,UAAW,EAAK,WAChB,qBAAsB,EAAM,uBAE9B,OACJ,EAAK,qBAAuB,EAAM,sBAtCpC,8BAPc,EAAA,yBAAd,SACE,EACA,EAAgC,CAEhC,MAAO,GAAc,yBAAyB,EAAW,IA4CpD,EAAA,UAAA,cAAP,SAAqB,EAAe,EAA6C,EAA2B,CAC1G,KAAK,MAAM,SAAW,KAAK,MAAM,QAAQ,cAAc,EAAO,EAAa,GAC3E,KAAK,aAAa,SAAW,KAAK,aAAa,QAAQ,cAAc,EAAO,EAAa,IAGpF,EAAA,UAAA,WAAP,SACE,EACA,EACA,EACA,EAA2B,CAF3B,AAAA,IAAA,QAAA,GAAA,IAIA,GAAM,GAAO,KAAK,MAAM,MAAM,GAC9B,GAAI,EAAM,CACR,KAAK,cAAc,EAAO,EAAa,GAEvC,GAAM,GAAU,KAAK,YAAY,EAAM,GACjC,EAAM,KAAK,YAAY,GAC7B,AAAI,GACF,KAAK,eAAe,EAAK,KAKxB,EAAA,UAAA,wBAAP,UAAA,CACE,MAAI,MAAK,OAAS,KAAK,MAAM,QACpB,KAAK,MAAM,QAAQ,0BACjB,KAAK,cAAgB,KAAK,aAAa,QACzC,KAAK,aAAa,QAAQ,0BAE5B,GAGF,EAAA,UAAA,qBAAP,UAAA,CACE,AAAI,KAAK,iBAEP,KAAK,gBAAgB,UAEvB,KAAK,OAAO,WAGP,EAAA,UAAA,mBAAP,SAA0B,EAA8B,EAA4B,CAGlF,GAFA,KAAK,wBAED,KAAK,uBAAyB,OAAW,CAC3C,GAAM,GAAO,KAAK,MAAM,MAAM,KAAK,sBACnC,GAAI,EAAM,CACR,GAAM,GAAU,KAAK,YAAY,EAAM,KAAK,sBACtC,EAAM,KAAK,YAAY,GAC7B,AAAI,GACF,KAAK,wBAAwB,IAKnC,GACE,KAAK,MAAM,QAAU,EAAU,OAC/B,KAAK,MAAM,MAAM,OAAS,GAC1B,KAAK,MAAM,mBAAqB,IAChC,CAAC,GAAgB,KAAK,MAAM,QAAS,SAAS,cAA8B,IAC5E,CAIA,GAAM,GACJ,KAAK,MAAM,iBAAmB,KAAK,MAAM,MAAM,OAC3C,KAAK,MAAM,iBACX,KAAK,MAAM,MAAM,OAAS,EAC1B,EAAO,KAAK,MAAM,MAAM,GACxB,EAAU,KAAK,YAAY,EAAM,KAAK,MAAM,kBAC5C,EAAM,KAAK,YAAY,GAC7B,AAAI,EACF,KAAK,eAAe,GAEpB,KAAK,qBAAuB,EAGhC,AAAI,KAAK,MAAM,aACb,KAAK,MAAM,YAAY,OAIpB,EAAA,UAAA,OAAP,UAAA,CACE,MACE,AAAA,iBAAC,GAAgB,EAAA,GACX,KAAK,MACL,KAAK,MAAK,CACd,UAAW,KAAK,WAChB,eAAgB,KAAK,gBACrB,QAAS,KAAK,MACd,QAAS,KAAK,MACd,eAAgB,KAAK,aACrB,aAAc,KAAK,WACnB,UAAW,KAAK,QAChB,iBAAkB,KAAK,eACvB,0BAA2B,KAAK,2BAChC,wBAAyB,KAAK,yBAC9B,cAAe,KAAK,eACpB,iBAAkB,KAAK,kBACvB,gBAAiB,KAAK,iBACtB,oBAAqB,KAAK,qBAC1B,iBAAkB,KAAK,kBACvB,mBAAoB,KAAK,oBACzB,OAAQ,KAAK,QACb,mBAAoB,KAAK,iBAKxB,EAAA,UAAA,YAAP,UAAA,CACE,EAAA,UAAM,YAAW,KAAA,MACjB,KAAK,qBA6GC,EAAA,UAAA,sBAAR,UAAA,CAKE,OAJQ,GAAW,KAAK,MAAK,OACzB,EAAQ,EACR,EAAgB,EAEb,GAAiB,EAAc,OAAS,GAC7C,IACA,EAAgB,EAAc,GAAG,SAGnC,MAAO,IAgBD,EAAA,UAAA,wBAAR,SAAgC,EAAmB,CACzC,GAAA,GAAc,EAAI,MAAK,UAC/B,AAAI,KAAK,uBAAyB,QAAa,IAAc,KAAK,sBAChE,MAAK,eAAe,GACpB,MAAO,MAAK,uBAIR,EAAA,UAAA,eAAR,SAAuB,EAAqB,EAAsC,CAAtC,AAAA,IAAA,QAAA,GAAA,IACtC,KAAK,eAAe,SACtB,KAAK,eAAe,QAAQ,kBAE9B,KAAK,OAAO,WAAW,UAAA,CACrB,EAAI,MAAM,IACT,IAwBG,EAAA,UAAA,kBAAR,UAAA,CACE,AAAI,KAAK,aAAa,SACpB,KAAK,aAAa,QAAQ,cAExB,KAAK,MAAM,SACb,KAAK,MAAM,QAAQ,eAIf,EAAA,UAAA,sBAAR,UAAA,CACE,KAAK,MAAM,gBAAgB,QAAQ,SAAA,EAAM,CACvC,AAAI,EAAO,gBACT,EAAO,eAAe,EAAO,iBAK3B,EAAA,UAAA,eAAR,SACE,EACA,EACA,EACA,EAA4B,CAE5B,GAAM,GAAkB,KAAK,oBAAoB,EAAU,EAAe,EAAa,GAC/E,EAAa,KAAK,MAAK,SACzB,EAAgB,GAAY,EAAS,MAAQ,EAAS,MAAQ,EAEpE,MAAA,GAAA,EAAA,GACK,GAAa,CAChB,gBAAiB,EACjB,UAAW,KAKP,EAAA,UAAA,oBAAR,SACE,EACA,EACA,EACA,EAA4B,CAJ9B,GAAA,GAAA,KAMiB,EAAkD,EAAQ,MAAhD,EAAwC,EAAQ,WAApC,EAA4B,EAAQ,cAArB,EAAa,EAAQ,SACnE,EAAgB,GAAY,EAAS,MAAQ,EAAS,MAAQ,EACrD,EAAe,EAAQ,QAEhC,EAAU,KAAK,MAAQ,KAAK,MAAM,QAAU,GAC5C,EAAY,EAAgB,EAAc,UAAY,GACtD,EAAoB,EAAgB,EAAc,kBAAoB,OAE5E,GACE,CAAC,GACD,IAAc,GACd,IAAsB,GACrB,EAAC,GAAW,IAAe,GAE5B,MAAO,IAAc,GAGvB,EAAa,GAAc,GAAa,EAAU,IAElD,GAAI,GAEJ,MAAI,KAAe,GAAsB,aACvC,GAAkB,KAAK,iBAAiB,EAAY,EAAe,GAGnE,EAAgB,QAAQ,SAAA,EAAM,CAC5B,EAAK,yBAAyB,EAAQ,EAAO,oBAG/C,GAAkB,KAAK,qBAAqB,EAAY,EAAe,GAEvE,EAAgB,QAAQ,SAAA,EAAM,CAC5B,EAAK,mBAAmB,EAAO,KAAK,aAAe,EAAO,mBAIvD,GAID,EAAA,UAAA,iBAAR,SAAyB,EAAuB,EAAuB,EAAwB,CAA/F,GAAA,GAAA,KACQ,EAAiG,KAAK,MAApG,EAAA,EAAA,cAAA,EAAa,IAAA,OAAG,KAAK,WAAW,KAAI,EAAE,EAAkB,EAAA,mBAAE,EAAU,EAAA,WAAE,EAAoB,EAAA,qBAC9F,EAAiB,EAAiB,IAAc,GAChD,EAAuB,EAE3B,EAAW,QAAQ,SAAC,EAAY,CAC9B,AAAI,GAAwB,CAAC,EAAI,SAC/B,GAAkB,EAAI,UAAY,EAAI,UAAY,GAElD,IAAkB,EAAI,UAAY,GAClC,GAAwB,EAAI,UAG9B,GAAkB,GAAe,EAAK,EAAO,MAG/C,GAAM,GACJ,IAAkB,EAAc,MAAQ,IAAuB,GAAmB,OAAS,GAAiB,EACxG,EAAmB,KAAK,wBAA0B,GACxD,GAAkB,EAAgB,EAElC,GAAI,GAAgB,EAAiB,EAGrC,MAAK,IACH,EAAW,QAAQ,SAAC,EAAe,CACjC,GAAM,GAAS,EAAA,EAAA,GAAiB,GAAW,EAAK,iBAAiB,EAAO,MAExE,GAAI,EAAU,UAAY,EAAU,SAAU,CAC5C,GAAM,GAAY,EAAU,SAAW,EAAgB,EAAU,SAC3D,EAAc,EAAY,EAAU,SAE1C,AAAI,EAAc,GAChB,IAAkB,EAClB,GAAyB,EAAe,GAAY,EAAU,UAAa,EAAU,aAM7F,EAAgB,EAAiB,EAAI,EAAiB,EAAuB,EAEtE,EAAW,IAAI,SAAA,EAAM,CAC1B,GAAM,GAAS,EAAA,EAAA,GAAiB,GAAW,EAAK,iBAAiB,EAAO,MAGxE,MAAI,CAAC,GAAwB,EAAU,UAAY,GAAkB,GAIhE,EAAU,iBACb,CAAI,CAAC,GAAwB,EAAU,SAErC,GAAU,gBAAkB,EAAU,SAAW,EAAU,SAAW,EACtE,EAAU,gBAAkB,KAAK,IAAI,EAAU,gBAAiB,EAAU,UAAY,OAAO,YAE7F,EAAU,gBAAkB,EAAU,UAAY,EAAU,UAAY,IAIrE,KAKH,EAAA,UAAA,qBAAR,SAA6B,EAAuB,EAAuB,EAAwB,CAAnG,GAAA,GAAA,KACU,EAA6D,EAAK,cAAlE,EAAa,IAAA,OAAG,KAAK,WAAW,KAAI,EAAE,EAAuB,EAAK,mBACpE,EACJ,IAAkB,EAAc,MAAQ,IAAuB,GAAmB,OAAS,GAAiB,EACxG,EAAmB,KAAK,wBAA0B,GACpD,EAAa,EACb,EAAe,EACb,EAAiB,EAAiB,GAAgB,GAClD,EAA6B,EAAW,IAAI,SAAC,EAAQ,EAAC,CAC1D,GAAM,GAAU,EAAA,EAAA,GACX,GAAM,CACT,gBAAiB,EAAO,UAAY,KAGhC,EAAS,EAAA,EAAA,GACV,GACA,EAAK,iBAAiB,EAAO,MAIlC,MAAM,GAAW,eAAiB,EAAW,eAC3C,IAAgB,GAAe,EAAY,IAG7C,GAAc,GAAe,EAAW,GAEjC,IAGT,GAAI,EAAe,EACjB,MAAO,GAMT,OAHI,GAAY,EAAgB,OAAS,EAGlC,GAAa,GAAK,EAAa,GAAgB,CACpD,GAAM,GAAS,EAAgB,GAEzB,EAAW,EAAO,UAAY,GAC9B,EAAgB,EAAa,EAGnC,GAAI,EAAO,gBAAmB,GAAY,GAAiB,CAAE,GAAO,eAAiB,EAAO,eAAgB,CAC1G,GAAM,GAAgB,EAAO,gBAC7B,EAAO,gBAAkB,KAAK,IAAI,EAAO,gBAAmB,EAAe,GAC3E,GAAc,EAAgB,EAAO,oBAErC,IAAc,GAAe,EAAQ,GACrC,EAAgB,OAAO,EAAW,GAEpC,IAIF,OAAS,GAAI,EAAG,EAAI,EAAgB,QAAU,EAAa,EAAgB,IAAK,CAC9E,GAAM,GAAS,EAAgB,GACzB,EAAS,IAAM,EAAgB,OAAS,EACxC,EAAY,KAAK,iBAAiB,EAAO,KAC/C,GAAI,KAAa,EAAU,iBAAmB,CAAC,GAI/C,IAAM,GAAY,EAAiB,EAC/B,EAAS,OACb,GAAI,EACF,EAAY,MACP,CACL,GAAM,GAAW,EAAO,SAClB,EAAW,EAAO,UAAY,GAAY,GAChD,EAAY,EAAW,KAAK,IAAI,EAAW,EAAW,GAAY,EAGpE,EAAO,gBAAmB,EAAO,gBAA6B,EAC9D,GAAc,GAGhB,MAAO,IAiBD,EAAA,UAAA,yBAAR,SAAiC,EAAiB,EAA0B,CAC1E,GAAM,GAAY,KAAK,mBAAmB,EAAO,KACjD,EAAU,gBAAkB,EAC5B,EAAU,aAAe,GAGnB,EAAA,UAAA,mBAAR,SAA2B,EAAW,CACpC,MAAQ,MAAK,iBAAiB,GAAO,KAAK,iBAAiB,IAAQ,IAkE7D,EAAA,UAAA,YAAR,SAAoB,EAAW,EAAiB,CACtC,GAAA,GAAW,KAAK,MAAK,OAEzB,EAAuC,OAC3C,MAAI,IACF,GAAU,EAAK,KAGb,GACF,GAAU,EAAO,EAAM,IAGpB,GACH,GAAU,GAGL,GAhrBK,EAAA,aAAe,CAC3B,WAAY,GAAsB,UAClC,cAAe,EAAc,SAC7B,cAAe,GAAc,sBAC7B,mBAAoB,GAAmB,QACvC,gBAAiB,GACjB,QAAS,GACT,aAAc,IARL,EAAe,GAAA,CAD3B,IACY,GAmrBb,GAnrB2C,aAqrBrC,YACJ,EACA,EACA,EACA,EACA,EACA,EACA,EAAqB,CAErB,GAAM,GAAqB,GAE3B,GAAI,GAAS,EAAM,OAAQ,CACzB,GAAM,GAAY,EAAM,GAExB,OAAW,KAAY,GACrB,AAAI,EAAU,eAAe,IAC3B,EAAQ,KAAK,CACX,IAAK,EACL,KAAM,EACN,UAAW,EACX,SAAU,GACV,SAAU,IACV,cAAe,CAAC,CAAC,EAAQ,OACzB,cAAe,CAAC,CAAC,EAAQ,OACzB,YAAa,IAAgB,OAAY,GAAQ,EACjD,SAAU,IAAoB,EAC9B,mBAAoB,CAAC,CAAC,EACtB,YAAa,GACb,kBAAmB,GAAkB,UACrC,YAAa,EACb,cAAe,EACf,UAAW,IAAqB,IAMxC,MAAO,GArCO,qBAwChB,YAAwB,EAAiB,EAA0B,EAAkB,CAC3E,GAAA,GAA8C,EAAK,eAAnD,EAAc,IAAA,OAAG,GAAwB,EAEjD,MACG,GAAc,EAAI,EAAO,iBAC1B,EAAe,gBACf,EAAe,iBACd,GAAO,SAAW,EAAe,sBAAwB,GAPrD,uBAWT,YAA8B,EAAmC,CAI/D,OAHI,GAAQ,EACR,EAAgB,EAEb,GAAiB,EAAc,OAAS,GAC7C,IACA,EAAgB,EAAc,GAAG,SAGnC,MAAO,GATA,6BAgBT,YAAuC,EAAmC,CACxE,MAAO,AAAM,WAAQ,UAAA,CACnB,GAAM,GAAwC,GAC9C,GAAI,EAGF,OAFI,GAAW,EACX,EAAkB,EACF,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAQ,CAAvB,GAAM,GAAK,EAAA,GACN,EAAQ,EAAK,IACrB,EAAS,GAAO,CAAE,4BAA6B,EAAiB,cAAe,GAC/E,IACA,GAAY,EAAM,MAAQ,EAG9B,MAAO,IACN,CAAC,IAdG,sCMt9CT,GAAM,IAAmB,CACvB,KAAM,iBACN,QAAS,0BACT,eAAgB,gCAChB,cAAe,+BACf,QAAS,WACT,wBAAyB,2BACzB,SAAU,gBAGC,GAAY,WAAC,EAA6B,SAC7C,EAAgE,EAAK,MAA9D,EAAyD,EAAK,UAAnD,EAA8C,EAAK,wBAA1B,EAAqB,EAAK,QAAjB,EAAY,EAAK,QACrE,EAAmB,EAAK,eAC1B,EAAa,EAAoB,GAAkB,GAEzD,MAAO,CACL,KAAM,CACJ,EAAW,KACX,EAAM,MAAM,MACZ,CACE,SAAU,WACV,MAAO,EAAe,SACtB,UAAS,GAAA,GACP,EAAC,MAAM,EAAW,UAAa,CAC7B,UAAW,GACX,UAAW,kBAKjB,GAAW,EAAW,QAEtB,GAAW,CACT,EAAW,QACX,CACE,UAAS,GAAA,GACP,EAAC,IAAI,EAAW,UAAa,CAC3B,UAAW,SAMnB,GAA2B,CACzB,EAAW,wBACX,CACE,UAAW,OACX,UAAW,UACX,wBAAyB,UAI7B,GAGF,UAAW,CACT,CACE,QAAS,eACT,SAAU,OACV,UAAW,IAGf,cAAe,EAAW,cAC1B,eAAgB,EAAW,iBArDN,aCPlB,GAAM,IAA0D,EAIrE,GAAiB,GAAW,OAAW,CACvC,MAAO,gBCPT,GAAM,IAAmB,CACvB,KAAM,oBACN,iBAAkB,uCAGP,GAAY,WAAC,EAAgC,SAChD,EAAqB,EAAK,UAAf,EAAU,EAAK,MAE5B,EAAa,EAAoB,GAAkB,GAEnD,EAA8B,CAClC,SAAU,WACV,cAAe,QAGX,EAA2B,CAC/B,SAAU,WACV,IAAK,EACL,MAAO,EACP,OAAQ,EACR,KAAM,EACN,wBAAyB,SAG3B,MAAO,CACL,KAAM,CAAC,EAAW,KAAM,EAAM,MAAM,OAAQ,EAAkB,GAC9D,iBAAkB,CAChB,EAAW,iBACX,CACE,UAAW,EAAM,sBAAwB,SAAW,SAAW,QAEjE,GAEF,YAAa,CACX,CACE,IAAK,EACL,OAAQ,EACR,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,aAAc,4BAIpB,GAEF,YAAa,CACX,CACE,OAAQ,EACR,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,UAAW,4BAIjB,GAEF,iBAAkB,CAChB,CACE,OAAQ,GAEV,EACA,CACE,MAAO,WAzDU,aCTzB,OAAuB,OCAvB,OAAuB,OA+GV,GAAsB,CACjC,KAAM,OACN,OAAQ,UAqBG,GAAwB,AAAM,iBAAsC,CAAE,eAAgB,SD3GnG,GAAM,IAAgB,IAEtB,GAAA,SAAA,EAAA,CACU,EAAA,EAAA,GAaR,WAAY,EAA2B,CAAvC,GAAA,GACE,EAAA,KAAA,KAAM,IAAM,KAZN,SAAA,MAAQ,AAAM,eACd,EAAA,gBAAkB,AAAM,eACxB,EAAA,gBAAkB,AAAM,eACxB,EAAA,kBAAoB,AAAM,eA8M3B,EAAA,UAAY,SAAC,EAAiB,CACnC,EAAK,aAAa,IAAI,IAGjB,EAAA,YAAc,SAAC,EAAiB,CACrC,EAAK,aAAa,OAAO,IAGpB,EAAA,UAAY,SAAC,EAAc,CAChC,EAAK,UAAU,IAAI,GAGf,EAAK,kBACP,GAAO,mBAAmB,EAAK,kBAC/B,EAAK,WAAW,KAIb,EAAA,aAAe,SAAC,EAAc,CACnC,EAAK,UAAU,OAAO,GACtB,EAAK,4BAA4B,GACjC,EAAK,qBAGA,EAAA,WAAa,SAAC,EAAgB,EAAmB,CACtD,AAAI,EAAK,aAAe,EAAK,aACvB,IACF,EAAK,4BAA4B,GAE/B,EAAO,cAAgB,EAAO,kBAChC,EAAK,sBAAsB,EAAQ,EAAK,YAAa,EAAO,kBAG1D,EAAO,iBAAmB,EAAO,qBACnC,EAAK,sBAAsB,EAAQ,EAAK,YAAa,EAAO,uBAK3D,EAAA,uBAAyB,UAAA,CAC9B,GAAM,GAAc,EAAK,UAErB,EAAkB,EAClB,EAAqB,EAEzB,EAAY,QAAQ,SAAC,EAAc,CAC3B,GAAA,GAAkC,EAAO,MAAvC,EAAW,EAAA,YAAE,EAAc,EAAA,eACnC,AAAI,EAAO,kBACL,IACF,IAAmB,EAAO,iBAAiB,cAEzC,GACF,IAAsB,EAAO,iBAAiB,cAEhD,EAAK,mBAAmB,MAI5B,EAAK,SAAS,CACZ,gBAAiB,EACjB,mBAAoB,KAIjB,EAAA,kBAAoB,UAAA,CACzB,AAAI,EAAK,kBACP,EAAK,aAAa,QAAQ,SAAA,EAAM,CAE9B,EAAO,EAAK,iBAAkB,EAAK,gBAKlC,EAAA,kBAAoB,UAAA,CACzB,MAAI,GAAK,iBACA,EAAK,iBAAiB,UAGxB,GAGF,EAAA,iBAAmB,SAAC,EAAc,CACvC,AAAI,GAAU,EAAK,kBACjB,EAAO,WAAW,EAAK,mBAInB,EAAA,0BAA4B,UAAA,CAClC,MAAO,CACL,eAAgB,CACd,UAAW,EAAK,UAChB,YAAa,EAAK,YAClB,UAAW,EAAK,UAChB,aAAc,EAAK,aACnB,uBAAwB,EAAK,uBAC7B,WAAY,EAAK,WACjB,kBAAmB,EAAK,kBACxB,iBAAkB,EAAK,oBA+BrB,EAAA,sBAAwB,SAC9B,EACA,EACA,EAAkC,CAGlC,GAAI,CAAC,EAAgB,SAAS,OAC5B,EAAgB,YAAY,WAGxB,CAAC,EAAgB,SAAS,GAAqB,CACjD,GAAM,GAAoC,GAAG,MAAM,KAAK,EAAgB,UAElE,EAAuB,GAG7B,EAAK,UAAU,QAAQ,SAAA,EAAU,CAC/B,AAAI,KAAoB,EAAK,aAAe,EAAO,cAExC,EAAO,kBAChB,EAAW,KAAK,KAmBpB,OAfM,GAAmB,EACtB,KAAK,SAAC,EAAG,EAAC,CACT,MAAQ,GAAE,MAAM,iBAAmB,GAAM,GAAE,MAAM,iBAAmB,KAErE,OAAO,SAAA,EAAI,CACV,GAAM,GACJ,IAAoB,EAAK,YAAc,EAAK,iBAAmB,EAAK,oBACtE,MAAI,GACK,EAAuB,QAAQ,GAAiB,GAElD,KAIP,EAAiD,OACxB,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAkB,CAA1C,GAAM,GAAc,EAAA,GACvB,GAAK,GAAe,MAAM,iBAAmB,IAAO,GAAO,MAAM,iBAAmB,GAAI,CACtF,EAA6B,EAC7B,OAMJ,GAAI,GAAyC,KAC7C,AAAI,GACF,GACE,IAAoB,EAAK,YACrB,EAA2B,iBAC3B,EAA2B,qBAEnC,EAAgB,aAAa,EAAoB,KAK/C,EAAA,4BAA8B,SAAC,EAAc,CACnD,AAAI,EAAK,aAAe,EAAO,kBAAoB,EAAK,YAAY,SAAS,EAAO,mBAClF,EAAK,YAAY,YAAY,EAAO,kBAElC,EAAK,aAAe,EAAO,qBAAuB,EAAK,YAAY,SAAS,EAAO,sBACrF,EAAK,YAAY,YAAY,EAAO,sBAIhC,EAAA,gBAAkB,UAAA,CACxB,GAAM,GAAiB,EAAK,qBACtB,EAAkB,EAAK,sBAE7B,EAAK,SAAS,CACZ,eAAc,EACd,gBAAe,IAGjB,EAAK,qBAGC,EAAA,yBAA2B,SAAC,EAAgB,EAAc,CAChE,MAAA,GAAA,EAAA,CACE,OAAQ,GACJ,GAAO,EAAK,MAAM,OAClB,CACE,MAAO,IACP,KAAS,GAAK,MAAM,gBAAkB,EAAK,sBAAwB,GAAC,MAEtE,CACE,KAAM,IACN,MAAU,GAAK,MAAM,gBAAkB,EAAK,sBAAwB,GAAC,OAEvE,EACA,CACE,IAAK,KAEP,CACE,OAAW,GAAK,MAAM,iBAAmB,EAAK,uBAAyB,GAAC,QAe1E,EAAA,UAAY,UAAA,CACV,GAAA,GAAqB,EAAI,iBAEjC,AAAI,GACF,EAAK,UAAU,QAAQ,SAAC,EAAc,CACpC,EAAO,WAAW,KAItB,EAAK,oBA9bL,EAAK,aAAe,GAAI,KACxB,EAAK,UAAY,GAAI,KAErB,EAAuB,GACvB,EAAK,OAAS,GAAI,IAAM,GACxB,EAAK,QAAU,GAAI,GAAW,GAE9B,EAAK,MAAQ,CACX,gBAAiB,EACjB,mBAAoB,EACpB,eAAgB,EAChB,gBAAiB,GAGnB,EAAK,iBAAmB,EAAK,OAAO,SAAS,EAAK,kBAAmB,MAhBvE,iCAmBA,OAAA,eAAW,EAAA,UAAA,OAAI,KAAf,UAAA,CACE,MAAO,MAAK,MAAM,yCAGpB,OAAA,eAAW,EAAA,UAAA,cAAW,KAAtB,UAAA,CACE,MAAO,MAAK,gBAAgB,yCAG9B,OAAA,eAAW,EAAA,UAAA,cAAW,KAAtB,UAAA,CACE,MAAO,MAAK,gBAAgB,yCAG9B,OAAA,eAAW,EAAA,UAAA,mBAAgB,KAA3B,UAAA,CACE,MAAO,MAAK,kBAAkB,yCAGzB,EAAA,UAAA,kBAAP,UAAA,CAAA,GAAA,GAAA,KACU,EAA0B,KAAK,MAAK,sBAC5C,KAAK,QAAQ,GAAG,KAAK,iBAAkB,SAAU,KAAK,WACtD,KAAK,QAAQ,GAAG,OAAQ,SAAU,KAAK,iBACnC,KAAK,kBAAoB,GAC3B,MAAK,iBAAiB,UAAY,GAIpC,KAAK,6BACL,KAAK,UAAU,QAAQ,SAAA,EAAM,CAC3B,EAAK,WAAW,KAElB,KAAK,oBAED,oBAAsB,SACxB,MAAK,kBAAoB,GAAI,kBAAiB,SAAA,EAAQ,CAEpD,WAAiC,EAA8B,CAC7D,MAAI,MAAK,cAAgB,MAAQ,KAAK,cAAgB,KAC7C,KAAK,YAAY,SAAS,EAAe,SAAW,KAAK,YAAY,SAAS,EAAe,QAE/F,GAJA,+BAQT,GAAM,GAAkB,EAAK,sBAY7B,GAVI,IAAoB,EAAK,MAAM,iBACjC,EAAK,SAAS,CACZ,gBAAiB,IAKrB,EAAK,oBAGD,EAAS,KAAK,EAAwB,KAAK,IAC7C,EAAK,6BACA,CAEL,GAAM,GAAuB,GAC7B,EAAK,UAAU,QAAQ,SAAA,EAAM,CAC3B,AAAI,EAAO,MAAQ,EAAO,KAAK,SAAS,EAAS,GAAG,SAClD,EAAW,KAAK,KAGhB,EAAW,QACb,EAAW,QAAQ,SAAA,EAAM,CACvB,EAAO,mBAMX,KAAK,MACP,KAAK,kBAAkB,QAAQ,KAAK,KAAM,CACxC,UAAW,GACX,WAAY,GACZ,QAAS,GACT,cAAe,OAMhB,EAAA,UAAA,qBAAP,UAAA,CACE,KAAK,QAAQ,UACb,KAAK,OAAO,UAER,KAAK,mBACP,KAAK,kBAAkB,cAKpB,EAAA,UAAA,sBAAP,SAA6B,EAAiC,EAA+B,CAC3F,MACE,MAAK,MAAM,WAAa,EAAU,UAClC,KAAK,MAAM,wBAA0B,EAAU,uBAC/C,KAAK,MAAM,YAAc,EAAU,WACnC,KAAK,MAAM,kBAAoB,EAAU,iBACzC,KAAK,MAAM,qBAAuB,EAAU,oBAC5C,KAAK,MAAM,iBAAmB,EAAU,gBACxC,KAAK,MAAM,kBAAoB,EAAU,iBAItC,EAAA,UAAA,mBAAP,SAA0B,EAAiC,EAA+B,CACxF,GAAM,GAAwB,KAAK,MAAM,sBACzC,AACE,KAAK,kBACL,MAAO,IAA0B,UACjC,EAAU,wBAA0B,GAEpC,MAAK,iBAAiB,UAAY,GAKlC,GAAU,kBAAoB,KAAK,MAAM,iBACzC,EAAU,qBAAuB,KAAK,MAAM,qBAE5C,KAAK,oBAGP,KAAK,OAAO,WAAW,KAAK,gBAAiB,IAGxC,EAAA,UAAA,OAAP,UAAA,CACQ,GAAA,GAA+E,KAAK,MAAlF,EAAS,EAAA,UAAE,EAAoB,EAAA,qBAAE,EAAwB,EAAA,yBAAE,EAAK,EAAA,MAAE,EAAM,EAAA,OAC1E,EAA0C,KAAK,MAA7C,EAAe,EAAA,gBAAE,EAAkB,EAAA,mBACrC,EAAa,GAAc,EAAS,CACxC,MAAO,EACP,UAAS,EACT,oBAAqB,KAAK,MAAM,sBAG5B,EAAuB,EACzB,CACE,KAAM,QACN,SAAU,EACV,aAAc,GAEhB,GAEJ,MACE,AAAA,kBAAA,MAAA,EAAA,GAAS,GAAe,KAAK,MAAO,IAAc,CAAE,IAAK,KAAK,MAAO,UAAW,EAAW,OACzF,AAAA,iBAAA,MAAA,CACE,IAAK,KAAK,gBACV,UAAW,EAAW,YACtB,MAAO,KAAK,yBAAyB,EAAiB,MAExD,AAAA,iBAAA,MAAA,EAAA,CACE,IAAK,KAAK,mBACN,EAAoB,CACxB,UAAW,EAAW,iBAAgB,qBAClB,KAEpB,AAAA,iBAAC,GAAsB,SAAQ,CAAC,MAAO,KAAK,6BACzC,KAAK,MAAM,WAGhB,AAAA,iBAAA,MAAA,CAAK,UAAW,EAAW,YAAa,MAAO,KAAK,yBAAyB,EAAoB,KAC/F,AAAA,iBAAA,MAAA,CAAK,IAAK,KAAK,gBAAiB,UAAW,EAAW,sBAMvD,EAAA,UAAA,2BAAP,UAAA,CAAA,GAAA,GAAA,KACE,AAAI,KAAK,kBACP,KAAK,UAAU,QAAQ,SAAA,EAAM,CAC3B,EAAO,mBAAmB,EAAK,qBAK9B,EAAA,UAAA,kBAAP,UAAA,CACE,KAAK,mBAyGC,EAAA,UAAA,mBAAR,SAA2B,EAAc,CACvC,AAAI,KAAK,aAAe,KAAK,aAAe,KAAK,kBAAoB,EAAO,kBAE1E,CAAI,EAAO,MAAM,aAAe,EAAO,MAAM,eAEzC,GAAO,MAAM,aACb,CAAC,KAAK,YAAY,SAAS,EAAO,mBAClC,EAAO,kBAEP,EAAO,UAAU,EAAO,kBAIxB,EAAO,MAAM,gBACb,CAAC,KAAK,YAAY,SAAS,EAAO,mBAClC,EAAO,qBAEP,EAAO,UAAU,EAAO,sBAEhB,KAAK,iBAAiB,SAAS,EAAO,mBAEhD,EAAO,gBA4GL,EAAA,UAAA,mBAAR,UAAA,CACU,GAAA,GAAqB,KAAI,iBACjC,MAAO,GAAmB,EAAiB,YAAc,EAAiB,YAAc,GAGlF,EAAA,UAAA,oBAAR,UAAA,CACU,GAAA,GAAqB,KAAI,iBACjC,MAAO,GAAmB,EAAiB,aAAe,EAAiB,aAAe,GAc9F,GA/cgB,cExBT,GAAM,IAAgE,EAI3E,GAAoB,GAAW,OAAW,CAAE,MAAO,mBCVrD,OAAuB,OCkCvB,GAAY,IAAZ,AAAA,UAAY,EAAkB,CAC5B,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,OAAA,GAAA,SACA,EAAA,EAAA,OAAA,GAAA,WAHU,IAAA,IAAkB,KDpB9B,GAAA,IAAA,SAAA,EAAA,CAA4B,EAAA,EAAA,GAe1B,WAAY,EAAmB,CAA/B,GAAA,GACE,EAAA,KAAA,KAAM,IAAM,KARN,SAAA,MAAQ,AAAM,eACd,EAAA,kBAAoB,AAAM,eAC1B,EAAA,qBAAuB,AAAM,eAC7B,EAAA,kBAAoB,AAAM,eAC1B,EAAA,aAAe,AAAM,eA+CtB,EAAA,WAAa,SAAC,EAAsB,CACjC,GAAA,GAAqB,EAAI,iBAEjC,AAAI,GAAoB,EAAK,MAAM,gBACjC,GAAiB,WAAa,EAAU,aAwHpC,EAAA,YAAc,UAAA,CAA8B,MAAA,GAAK,SAuDjD,EAAA,eAAiB,SAAC,EAAwB,EAAkC,CAClF,GAAI,EAAK,MAAQ,EAAK,iBAAkB,CACtC,GAAM,GAAkB,EAAK,6BAA6B,GACtD,EAAc,GACd,EAAiB,GAErB,GAAI,EAAK,aAAc,CACrB,GAAM,GAAqB,EAAkB,EAAK,4BAClD,EAAc,EAAqB,EAAU,UAK/C,AAAI,EAAK,iBAAmB,EAAU,aAAe,EAAsB,cAAgB,GACzF,GACE,EAAkB,KAAK,MAAM,EAAU,YACvC,EAAK,mCAAmC,EAAW,IAGvD,AACE,SAAS,eACT,EAAK,iBAAiB,SAAS,SAAS,gBACvC,GAAK,MAAM,cAAgB,GAAe,EAAK,MAAM,iBAAmB,GAEzE,EAAK,eAAiB,SAAS,cAE/B,EAAK,eAAiB,OAGxB,EAAK,SAAS,CACZ,YAAa,EAAK,cAAgB,EAClC,eAAgB,EAChB,gBAAiB,MAKf,EAAA,0BAA4B,UAAA,CAClC,GAAI,GAAW,EACf,MAAI,GAAK,kBACP,GAAW,EAAK,iBAAiB,WAG5B,GAGD,EAAA,mCAAqC,SAC3C,EACA,EAAyC,CAEzC,GAAI,GAAW,EACf,MAAI,GAAK,qBACP,GACE,EAAU,aAAe,EAA6B,aAAe,EAAK,oBAAoB,WAG3F,GAGD,EAAA,6BAA+B,SAAC,EAAsB,CAC5D,GAAI,GAAW,EACX,EAAW,EAAK,KAEpB,GAAI,EAAU,CACZ,KAAO,GAAY,EAAS,eAAiB,GAC3C,GAAY,EAAS,UACrB,EAAW,EAAS,aAGtB,AAAI,GAAY,EAAS,eAAiB,GACxC,IAAY,EAAS,WAGzB,MAAO,IArSP,EAAuB,GACvB,EAAK,MAAQ,CACX,YAAa,GACb,eAAgB,GAChB,gBAAiB,QAEnB,EAAK,eAAiB,SATxB,qBAYA,OAAA,eAAW,EAAA,UAAA,OAAI,KAAf,UAAA,CACE,MAAO,MAAK,MAAM,yCAGpB,OAAA,eAAW,EAAA,UAAA,cAAW,KAAtB,UAAA,CACE,MAAO,MAAK,aAAa,yCAG3B,OAAA,eAAW,EAAA,UAAA,mBAAgB,KAA3B,UAAA,CACE,MAAO,MAAK,kBAAkB,yCAGhC,OAAA,eAAW,EAAA,UAAA,sBAAmB,KAA9B,UAAA,CACE,MAAO,MAAK,qBAAqB,yCAGnC,OAAA,eAAW,EAAA,UAAA,mBAAgB,KAA3B,UAAA,CACE,MAAO,MAAK,kBAAkB,yCAGhC,OAAA,eAAW,EAAA,UAAA,eAAY,KAAvB,UAAA,CACE,MACE,MAAK,MAAM,iBAAmB,GAAmB,MAAQ,KAAK,MAAM,iBAAmB,GAAmB,wCAI9G,OAAA,eAAW,EAAA,UAAA,kBAAe,KAA1B,UAAA,CACE,MACE,MAAK,MAAM,iBAAmB,GAAmB,MAAQ,KAAK,MAAM,iBAAmB,GAAmB,wCAYvG,EAAA,UAAA,kBAAP,UAAA,CACU,GAAA,GAAmB,KAAK,cAAa,eAE7C,AAAI,CAAC,GAIL,GAAe,UAAU,KAAK,gBAC9B,EAAe,UAAU,QAGpB,EAAA,UAAA,qBAAP,UAAA,CACU,GAAA,GAAmB,KAAK,cAAa,eAE7C,AAAI,CAAC,GAIL,GAAe,YAAY,KAAK,gBAChC,EAAe,aAAa,QAGvB,EAAA,UAAA,mBAAP,SAA0B,EAAyB,EAAuB,CAChE,GAAA,GAAmB,KAAK,cAAa,eAE7C,GAAI,EAAC,EAIC,IAAA,GAAmD,KAAK,MAAtD,EAAc,EAAA,eAAE,EAAW,EAAA,YAAE,EAAe,EAAA,gBAChD,EAAsB,GAC1B,AAAI,EAAU,kBAAoB,GAChC,GAAe,WAAW,KAAM,IAChC,EAAa,IAEX,GAAU,cAAgB,GAAe,EAAU,iBAAmB,IACpE,MAAK,gBACP,KAAK,eAAe,QAEtB,EAAe,yBACf,EAAa,IAEX,GAEF,EAAe,iBAAiB,QAI7B,EAAA,UAAA,sBAAP,SAA6B,EAAyB,EAAuB,CAC3E,GAAI,CAAC,KAAK,QAAQ,eAChB,MAAO,GAGH,GAAA,GAAmD,KAAK,MAAtD,EAAW,EAAA,YAAE,EAAc,EAAA,eAAE,EAAe,EAAA,gBAEpD,MAAQ,KAAgB,EAAU,aAChC,IAAmB,EAAU,gBAC7B,KAAK,MAAM,iBAAmB,EAAU,gBACxC,KAAK,MAAM,WAAa,EAAU,UAClC,IAAoB,EAAU,iBAC9B,GAAyB,KAAK,kBAAmB,KAAK,oBACtD,GAAyB,KAAK,kBAAmB,KAAK,uBACtD,GAAyB,KAAK,kBAAmB,KAAK,eAGnD,EAAA,UAAA,OAAP,UAAA,CACQ,GAAA,GAAkC,KAAK,MAArC,EAAW,EAAA,YAAE,EAAc,EAAA,eAC7B,EAAgC,KAAK,MAAnC,EAAe,EAAA,gBAAE,EAAQ,EAAA,SAEjC,MAAK,MAAK,QAAQ,eAKhB,AAAA,iBAAA,MAAA,CAAK,IAAK,KAAK,OACZ,KAAK,cACJ,AAAA,iBAAA,MAAA,CAAK,IAAK,KAAK,kBAAmB,MAAO,CAAE,cAAe,EAAc,OAAS,SAC/E,AAAA,iBAAA,MAAA,CAAK,MAAO,KAAK,4BAA4B,MAGhD,KAAK,iBACJ,AAAA,iBAAA,MAAA,CAAK,IAAK,KAAK,qBAAsB,MAAO,CAAE,cAAe,EAAiB,OAAS,SACrF,AAAA,iBAAA,MAAA,CAAK,MAAO,KAAK,4BAA4B,MAGjD,AAAA,iBAAA,MAAA,CAAK,MAAO,KAAK,yCAA0C,IAAK,KAAK,cACjE,IAAe,IAAmB,AAAA,iBAAA,OAAA,CAAM,MAAO,IAA4B,GAC7E,AAAA,iBAAA,MAAA,CACE,IAAK,KAAK,kBACV,UAAW,GAAe,EAAiB,EAAkB,OAC7D,MAAO,KAAK,kBAAkB,GAAe,IAE5C,KAtBA,AAAA,iBAAA,MAAA,KAAM,KAAK,MAAM,WA6BrB,EAAA,UAAA,UAAP,SAAiB,EAA6B,CAC5C,AAAI,KAAK,kBACP,EAAc,YAAY,KAAK,mBAI5B,EAAA,UAAA,YAAP,UAAA,CACE,AAAI,KAAK,kBAAoB,KAAK,aAChC,KAAK,YAAY,YAAY,KAAK,mBAI/B,EAAA,UAAA,mBAAP,SAA0B,EAAyB,CACjD,GAAM,GAAkB,KAAK,6BAA6B,GAC1D,KAAK,SAAS,CAAE,gBAAiB,KAK3B,EAAA,UAAA,kBAAR,SAA0B,EAAiB,CACzC,MAAO,CACL,gBAAiB,KAAK,MAAM,uBAAyB,KAAK,iBAC1D,SAAU,EAAW,SAAW,KAI5B,EAAA,UAAA,4BAAR,SAAoC,EAAiB,CACnD,GAAM,GAAS,KAAK,iBAAmB,KAAK,iBAAiB,aAAe,EAC5E,MAAO,CACL,WAAY,EAAW,SAAW,UAClC,OAAQ,EAAW,EAAI,IAInB,EAAA,UAAA,uCAAR,UAAA,CACQ,GAAA,GAAkC,KAAK,MAArC,EAAW,EAAA,YAAE,EAAc,EAAA,eACnC,GAAI,GAAe,EAAgB,CACjC,GAAI,GAAS,EACT,EAAQ,EAUZ,MAAI,MAAK,kBAAoB,KAAK,iBAAiB,mBACjD,GAAS,KAAK,iBAAiB,aAS/B,EACE,KAAK,iBAAiB,kBAAkB,YACtC,MAAK,iBAAiB,kBAAkC,YACxD,KAAK,iBAAiB,kBAAkB,cAEvC,CACL,OAAQ,EACR,MAAO,OAGT,OAAO,IAiFH,EAAA,UAAA,eAAR,UAAA,CACE,GAAI,EAAC,KAAK,KAMV,QAFI,GAAoB,KAAK,KAG3B,OAAO,iBAAiB,GAAM,iBAAiB,sBAAwB,oBACvE,OAAO,iBAAiB,GAAM,iBAAiB,sBAAwB,eACvE,CACA,GAAI,EAAK,UAAY,OAEnB,OAEF,AAAI,EAAK,eACP,GAAO,EAAK,eAGhB,MAAO,QAAO,iBAAiB,GAAM,iBAAiB,sBA7U1C,EAAA,aAA6B,CACzC,eAAgB,GAAmB,KACnC,eAAgB,IAGJ,EAAA,YAAc,GA0U9B,GAhVkC,cAkVlC,YAAkC,EAAiC,EAAkC,CACnG,MAAQ,IAAK,GAAK,EAAE,SAAW,EAAE,SAAW,EAAE,QAAQ,eAAiB,EAAE,QAAQ,aAD1E,iC1D7UT,OAAgB,QAChB,GAAqB,QACrB,GAAuD,O4DpBvD,OAAyB,QAGzB,OAAgB,QAChB,GAAoC,OAU7B,GAAM,IAAiB,GAAC,CAC7B,MACA,MACA,MACA,YAMI,CACJ,GAAM,GAAQ,kBAAW,GACnB,EAAS,KACT,EAAM,EAAO,UACb,EAAU,EAAe,IAG/B,GAFA,EAAI,WAAW,QAAQ,GAAK,OAAS,EAEjC,MAAO,GAAM,MAAM,UAAa,YAAc,EAAI,WAAW,SAAU,CACzE,GAAM,GAAO,EAAI,WAAW,SAEtB,EAAW,EAAM,MAAM,SAAS,CACpC,MACA,MACA,KAAM,EAAM,GAAG,KACf,MACA,UAGF,GAAI,GACE,OAAO,IAAa,UACtB,GAAK,MAAM,OAAO,MAAM,GAAO,IAC1B,EAAK,MAAM,OAAO,MAAM,MACxB,IAIH,EAAK,MAAM,OAAO,OAAO,QAAQ,GAAO,GAC1C,GAAK,MAAM,OAAO,OAAO,KAAK,GAC9B,GAAe,EAAK,MAAO,EAAK,IAAK,GAAQ,KAAK,IAGhD,EAAK,MAAM,OAAO,OAAO,IAAQ,EAAK,MAAM,YAC9C,MACE,WAAC,EAAK,IAAI,SAAV,CAAmB,MAAO,EAAK,OAC7B,+BACE,WAAC,GAAD,CACE,QAAS,CAAC,CAAE,cACV,WAAC,MAAD,CACE,UAAU,wCACV,IAAK;AAAA;AAAA;AAAA;AAAA,uBAMJ,GAGL,IAAK,EAAK,IACV,KAAM,MASpB,MACE,+BACG,GAAY,CACX,QACA,MACA,MACA,SACA,SAAU,EAAI,eA3EQ,kBAiFxB,GAAc,GAAC,CACnB,QACA,SACA,MACA,MACA,cAOI,CACJ,GAAM,GAAM,EAAM,GACd,EAAS,EAAM,MAAM,QAAQ,GACjC,GAAI,GACE,MAAO,IAAW,WAAY,CAChC,GAAM,GAAS,EAAO,GACtB,MACE,+BACE,WAAC,MAAD,CAAK,UAAU,uBAAuB,EAAO,QAKrD,GAAI,GAAU,GACd,GAAI,MAAM,QAAQ,IAChB,GAAU,EAAO,GACb,EAAO,IAAM,MAAO,GAAO,GAAG,OAAU,YAC1C,MAAO,+BAAG,EAAO,GAAG,MAAM,EAAK,EAAK,CAAE,KAAM,EAAO,IAAK,KAI5D,AAAI,MAAO,IAAW,UACpB,GAAU,GAGZ,GAAM,GAAM,eAAI,EAAK,sBAAsB,KACvC,EAAQ,eAAI,EAAK,GAErB,GAAI,EAAO,CACT,GAAI,EACF,OAAQ,EAAI,KAAK,mBACV,OACH,GAAI,MAAO,IAAU,SACnB,MAAO,IAAO,GAAI,MAAK,GAAQ,uBAEjC,MAIN,MAAI,OAAO,IAAU,SACZ,WAAC,GAAD,CAAW,MAAO,EAAO,QAAS,KACpC,+BAAG,GAEZ,MAAO,KAvDW,eC/FpB,OAAyB,QACzB,GAAyE,OASlE,GAAM,IAAiB,EAAC,GAMzB,CACJ,GAAM,GAAI,cAAO,CACf,cAAe,GACf,SAAU,OAEN,CAAE,MAAK,WAAU,MAAK,OAAQ,EAC9B,EAAQ,kBAAW,GACnB,EAAO,EAAM,MACb,EAAO,EAAE,QACT,EAAS,KAsBf,GApBI,MAAO,GAAM,MAAM,UAAa,YAAc,CAAC,EAAI,WAAW,UAChE,GAAa,CAAE,QAAO,MAAK,MAAK,WAGlC,AAAI,EAAK,gBACP,EAAK,SAAW,EAAK,gBAAgB,CACnC,SAAU,EAAS,EAAM,UACzB,MAAO,EACP,KAAM,EAAM,GAAG,KACf,MACA,UAGF,EAAK,SAAW,EAAS,EAAM,UAG7B,EAAC,EAAK,YAAc,EAAK,iBAAmB,KAC9C,GAAK,cAAgB,IAGnB,CAAC,EAAI,YAAc,CAAC,EAAK,SAC3B,MAAO,MAGT,EAAI,WAAW,OAAS,IAAM,CAC5B,IACA,OAAS,KAAO,QAAO,OAAO,EAAI,WAAW,SAC3C,EAAI,UAIR,GAAI,GAAS,GACb,AAAI,EAAK,eACP,GAAS,kBAGP,GAAM,GAAG,SAAW,EAAM,GAAG,iBAC/B,GAAS,eAGX,GAAI,GACF,+BACE,WAAC,MAAD,CACE,UAAW,6BAA6B,IACxC,IAAK;AAAA;AAAA;AAAA;AAAA,UAKL,QAAS,AAAC,GAAO,CACf,AAAI,EAAK,YACP,EAAK,WAAW,EAAK,EAAK,EAAI,KAIjC,AAAE,EAAK,gBACJ,EAAK,gBAAgB,CACnB,IAAK,EACL,KAAM,EAAM,GAAG,KACf,MAAO,EACP,QACA,SAAU,EAAK,WAEjB,EAAK,WAKX,EAAQ,EACZ,AAAI,EAAK,SACP,GAAQ,EAAK,QAAQ,CAAE,SAAU,EAAS,MAAK,WAGjD,GAAM,GAAW,EAAI,WAAW,SAChC,MAAI,IAAY,EAAS,KAAO,EAAS,IAAI,SAEzC,WAAC,EAAS,IAAI,SAAd,CAAuB,MAAO,EAAS,OACpC,GAIA,GAlGqB,kBAqGxB,GAAe,GAAC,CACpB,MACA,QACA,SACA,SAMI,GAVe,gB7D/Ed,GAAM,IAAc,GAAC,CAAE,SAA8C,CAoC1E,GAAM,GAAO,AAnCH,cAAO,CACf,IAAK,KACL,SAAU,AAAC,GAAO,CAChB,AAAI,EAAK,MAAQ,GAAM,EAAG,WAAa,EAAM,MAAM,YACjD,GAAM,MAAM,WAAW,EAAI,EAAG,UAC9B,EAAM,MAAM,WAAW,EAAI,EAAG,WAC1B,EAAM,MAAM,UACd,EAAM,MAAM,SAAS,GAGvB,EAAM,OAAO,WAGjB,kBAAmB,GAAI,KACvB,aAAc,GACd,UAAW,AAAC,GAAQ,CAClB,GAAM,GAAK,GAAI,QAAO,UACtB,AAAK,EAAK,kBAAkB,IAAI,IAC9B,GAAK,aAAa,KAAK,CAAE,MAAK,OAC9B,EAAK,kBAAkB,IAAI,IAE7B,EAAK,aAAe,EAAK,aAAa,OAAO,AAAC,GACxC,EAAK,EAAE,GAAK,IACd,GAAK,kBAAkB,OAAO,EAAE,KACzB,IAEF,IAEL,EAAK,aAAa,OAAS,GAC7B,EAAmB,CAAE,KAAM,EAAK,aAAa,IAAI,AAAC,GAAM,EAAE,KAAM,WAGpE,KAAM,KAGO,QACT,EAAS,KACf,iBAAU,IAAM,CACd,EAAM,MAAM,OAAS,EACnB,UAAY,CACZ,AAAM,OAAe,UACjB,QAAe,SAAW,GAC5B,MAGF,KAAM,IAAU,IAAM,EAAM,MAAM,SAClC,EAAK,KAAO,GACZ,SAED,IAEH,GAAM,GAAQ,kBAAW,GACnB,EAAqB,eACzB,KAAO,IAAiD,CACtD,GAAI,MAAO,GAAM,GAAG,WAAc,WAChC,KAAM,GAAM,GAAG,UAAU,WAChB,MAAO,GAAM,GAAG,WAAc,SACvC,OAAS,CAAC,EAAK,IAAc,QAAO,QAAQ,EAAM,GAAG,WAAY,CAC/D,GAAM,CAAE,QAAS,EACX,EAAY,EAAK,OAAO,AAAC,GAAM,CAAC,EAAE,SAExC,GAAI,EAAU,OAAS,EAAG,CACxB,OAAS,KAAO,GACd,AAAK,EAAI,IACP,GAAI,GAAO,IAIf,GAAM,GAAa,KAAM,GAAU,GAAG,GAEhC,EAAU,GAChB,OAAS,KAAK,GACZ,EAAQ,EAAE,EAAU,KAAO,EAG7B,OAAS,KAAO,GACd,EAAI,GAAO,EAAQ,EAAI,EAAU,KAGnC,EAAM,UAAU,YAKxB,IACA,CACE,SAAU,KAId,GAAI,CAAC,EAAK,KAAM,MAAO,MAEvB,GAAI,GAAQ,EAAM,GAAG,MAAQ,GACvB,EAAO,EAAM,KACnB,GAAI,GAAQ,EAAK,QAAU,EAAG,CAC5B,EAAQ,GACR,GAAI,GAAa,GACjB,OAAS,KAAK,GAAM,GAAG,KACrB,AAAI,EAAI,OAAS,EAAK,QACpB,EAAI,KAAK,GAET,GAAM,KAAK,GACX,EAAM,CAAC,IAIX,GAAI,CAAC,EAAM,MAAM,gBACf,eAAQ,MAAM,sDACP,KAIX,GAAM,GAAW,IAAS,IAAI,QAAU,EAExC,MACE,UAAC,MAAD,CACE,UAAU,4BACV,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAuBH,GAAM,GAAG,SAAW,EAAM,GAAG,iBAC7B,8BACE,UAAC,GAAD,CACE,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAgBX,UAAC,GAAD,CAAS,KAAM,EAAM,GAAG,SAAW,GAChC,GAAW,CAAC,EAAM,GAAG,QACpB,UAAC,OAAD,CAAM,UAAU,4CACd,UAAC,GAAD,CACE,SAAS,eACT,IAAK;AAAA;AAAA,kBAIP,8BAAE,mBAGJ,8BACI,GAAM,GAAG,WAAa,EAAM,GAAG,MAC/B,8BACE,UAAC,GAAD,CAAS,KAAM,GAAY,MAAO,UAAU,SAC1C,EAAC,EAAM,GAAG,MAAQ,EAAM,GAAG,KAAK,SAAW,IAAM,aAO7D,UAAC,GAAD,CACE,oBAAqB,GAAoB,KACzC,aAAc,AAAC,GAAW,CACxB,AAAI,GACF,GAAE,YAAY,EAAK,UACnB,EAAE,UAAU,EAAK,UACjB,WAAW,IAAM,CACf,AAAI,EAAE,kBAAoB,EAAM,MAAM,YACpC,GAAE,iBAAiB,WAAa,EAAM,MAAM,WAAW,EACvD,EAAE,iBAAiB,UAAY,EAAM,MAAM,WAAW,QAM9D,UAAC,GAAD,CACE,+BAA8B,GAC9B,cACE,EAAM,MAAM,IAAI,SACZ,EAAc,SACd,EAAc,KAEpB,MAAO,EACP,aAAc,AAAC,GAAM,CACnB,AAAM,GAAG,GAAK,IAAM,IAEtB,cAAe,GAAc,cAC7B,mBACE,EAAM,MAAM,IAAI,SACZ,GAAmB,QACnB,GAAmB,OAKzB,sBACE,EAAM,MAAM,IAAI,aAAe,GAC3B,IACS,KAET,CAAC,EAAO,IAAkB,CACxB,GAAI,CAAC,EACH,MAAO,MAET,GAAM,GAA8B,EAAC,GACnC,UAAC,GAAD,IAAiB,IADiB,+BAGpC,MACE,UAAC,GAAD,CACE,eAAgB,GAAmB,OACnC,eAAc,IAEb,EAAe,IACX,EACH,kCAMd,oBAAqB,CAAC,EAAG,IAAQ,CAC/B,AAAI,GAAO,EAAI,WACT,EAAM,GAAG,QAAQ,EAAI,YACvB,EAAM,GAAG,MAAM,SAIrB,QACE,EACI,CACE,CACE,IAAK,EACL,IAAK,EACL,UAAW,IACX,KAAM,IACN,YAAa,GACb,aAAc,IAGlB,GAAe,GAErB,mBAAoB,IAAM,GAC1B,QAAS,GACT,YAAa,CAAC,EAAU,IACjB,EACL,GAAK,UAAU,EAAS,MAEpB,EAAM,MACJ,MAAM,QAAQ,EAAS,MAEvB,UAAC,MAAD,CACE,UAAU,8BACV,IAAK;AAAA;AAAA;AAAA;AAAA,uBAMJ,EAAS,KAAK,IAAI,CAAC,EAAG,IAEnB,UAAC,GAAD,CACE,IAAK,EACL,IAAK,EACL,IAAK,EACL,IAAK,EAAS,UACd,SAAU,GAET,AAAC,GACC,GAAiB,EAAc,IAAQ,kCAWtD,UAAC,GAAD,CACE,IAAK,EACL,IAAK,EAAS,KACd,IAAK,EAAS,UACd,SAAU,GAET,AAAC,GAAQ,GAAiB,EAAc,IAAQ,iCAzC/B,KA6CxB,mBAAoB,CAAC,EAAK,EAAK,IAAW,CACxC,GAAI,EACF,MACE,UAAC,GAAD,CACE,IAAK,EACL,IAAK,EACL,IAAK,GAAO,EACZ,OAAQ,UA/TC,eAyUrB,GAAiB,EAAC,GAA4B,CAClD,GAAM,GAAU,EAAM,MAAM,QACtB,EAAS,EAAM,GAAG,OAExB,MAAK,OAAM,QAAQ,GAEZ,EACJ,OAAO,AAAC,GAAM,CAAC,CAAC,GAChB,IAAI,CAAC,EAAQ,IAAQ,CACpB,GAAI,GAAU,GACV,EAAQ,GACR,EAAc,KAEZ,EAAS,EAAC,GAAa,CAC3B,AAAI,EAAI,KACN,GAAU,EAAI,KAEhB,AAAI,EAAI,MACN,EAAQ,EAAI,MAEZ,EAAQ,GAAS,IAPN,UAWf,AAAI,MAAO,IAAW,YACf,CAAI,MAAO,IAAW,SAC3B,GAAU,EACV,EAAQ,GAAS,IACR,MAAM,QAAQ,IACvB,GAAU,EAAO,GACb,EAAO,IACT,EAAO,EAAO,MAIlB,GAAM,GAAc,CAClB,IAAK,EAAI,WACT,MACA,UAAW,EACX,KAAM,EACN,YAAa,GACb,SAAU,GACV,SAAU,IACV,aAAc,GAGhB,AAAI,MAAM,QAAQ,IACZ,EAAO,IAAM,EAAO,GAAG,OACzB,GAAO,SAAW,EAAO,GAAG,MAC5B,EAAO,SAAW,EAAO,GAAG,OAIhC,GAAM,GAAU,GAAoB,eAAI,EAAQ,YAAc,IAC9D,GAAI,GAAW,EAAQ,OAAS,EAAG,CACjC,GAAM,GAAM,EAAQ,GACd,CAAC,EAAG,GAAK,OAAO,QAAQ,GAAK,GAEnC,GAAI,EAAQ,QAAQ,KAAO,EAAG,CAC5B,GAAM,GAAM,EAAQ,MAAM,KAEpB,EACJ,EAAI,SAAW,EACX,GAAG,EAAI,MAAM,EAAI,MAAM,EAAI,KAC3B,GAAG,EAAI,MAAM,EAAI,KACjB,EAAW,eAAI,EAAK,GAC1B,AAAI,GACF,GAAO,SAAW,GAClB,EAAO,mBAAqB,IAAa,WAEtC,AAAI,KAAY,GACrB,GAAO,SAAW,GAClB,EAAO,mBAAqB,IAAM,OAItC,MAAO,KAxEyB,IAJf",
  "names": []
}
