{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Icon/components/Icon/Icon.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Icon/components/Icon/Icon.types.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Image/components/Image/Image.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Image/components/Image/Image.types.ts", "../../../node_modules/.pnpm/@fluentui+react-hooks@8.3.6_7ebb500358f89bf998744b75094fbd09/node_modules/@fluentui/react-hooks/lib/useMergedRefs.ts", "../../../node_modules/.pnpm/@fluentui+style-utilities@8.4.2_7ebb500358f89bf998744b75094fbd09/node_modules/@fluentui/style-utilities/lib/utilities/utilities/buildClassMap.ts", "../../../node_modules/.pnpm/@fluentui+style-utilities@8.4.2_7ebb500358f89bf998744b75094fbd09/node_modules/@fluentui/style-utilities/lib/utilities/utilities/icons.ts", "../../../node_modules/.pnpm/@fluentui+style-utilities@8.4.2_7ebb500358f89bf998744b75094fbd09/node_modules/@fluentui/style-utilities/lib/classNames/classNames/AnimationClassNames.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Image/components/Image/Image.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Image/components/Image/Image.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Icon/components/Icon/FontIcon.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Icon/components/Icon/Icon.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Icon/components/Icon/Icon.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/TextField/components/TextField/TextField.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/TextField/components/TextField/TextField.styles.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/TextField/components/TextField/TextField.ts"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { IconType } from './Icon.types';\nimport { Image } from '../Image/Image';\nimport { ImageLoadState } from '../Image/Image.types';\nimport { getNativeProps, htmlElementProperties, classNamesFunction } from '../../Utilities';\nimport { getIconContent } from './FontIcon';\nimport type { IIconProps, IIconStyleProps, IIconStyles } from './Icon.types';\nimport type { IImageProps } from '../Image/Image.types';\n\nexport interface IIconState {\n  imageLoadError: boolean;\n}\n\nconst getClassNames = classNamesFunction<IIconStyleProps, IIconStyles>({\n  // Icon is used a lot by other components.\n  // It's likely to see expected cases which pass different className to the Icon.\n  // Therefore setting a larger cache size.\n  cacheSize: 100,\n});\n\nexport class IconBase extends React.Component<IIconProps, IIconState> {\n  constructor(props: IIconProps) {\n    super(props);\n    this.state = {\n      imageLoadError: false,\n    };\n  }\n\n  public render() {\n    const { children, className, styles, iconName, imageErrorAs, theme } = this.props;\n    const isPlaceholder = typeof iconName === 'string' && iconName.length === 0;\n    const isImage =\n      // eslint-disable-next-line deprecation/deprecation\n      !!this.props.imageProps || this.props.iconType === IconType.image || this.props.iconType === IconType.Image;\n    const iconContent = getIconContent(iconName) || {};\n    const { iconClassName, children: iconContentChildren, mergeImageProps } = iconContent;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      iconClassName,\n      isImage,\n      isPlaceholder,\n    });\n\n    const RootType = isImage ? 'span' : 'i';\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, [\n      'aria-label',\n    ]);\n    const { imageLoadError } = this.state;\n    const imageProps: IImageProps = {\n      ...this.props.imageProps,\n      onLoadingStateChange: this._onImageLoadingStateChange,\n    };\n    const ImageType = (imageLoadError && imageErrorAs) || Image;\n\n    // eslint-disable-next-line deprecation/deprecation\n    const ariaLabel = this.props['aria-label'] || this.props.ariaLabel;\n    const accessibleName = imageProps.alt || ariaLabel || this.props.title;\n    const hasName = !!(\n      accessibleName ||\n      this.props['aria-labelledby'] ||\n      imageProps['aria-label'] ||\n      imageProps['aria-labelledby']\n    );\n    const containerProps = hasName\n      ? {\n          role: isImage || mergeImageProps ? undefined : 'img',\n          'aria-label': isImage || mergeImageProps ? undefined : accessibleName,\n        }\n      : {\n          'aria-hidden': true,\n        };\n\n    let finalIconContentChildren = iconContentChildren;\n\n    if (mergeImageProps && iconContentChildren && typeof iconContentChildren === 'object' && accessibleName) {\n      finalIconContentChildren = React.cloneElement(iconContentChildren, {\n        alt: accessibleName,\n      });\n    }\n\n    return (\n      <RootType\n        data-icon-name={iconName}\n        {...containerProps}\n        {...nativeProps}\n        {...(mergeImageProps\n          ? {\n              title: undefined,\n              'aria-label': undefined,\n            }\n          : {})}\n        className={classNames.root}\n      >\n        {isImage ? <ImageType {...imageProps} /> : children || finalIconContentChildren}\n      </RootType>\n    );\n  }\n\n  private _onImageLoadingStateChange = (state: ImageLoadState): void => {\n    if (this.props.imageProps && this.props.imageProps.onLoadingStateChange) {\n      this.props.imageProps.onLoadingStateChange(state);\n    }\n    if (state === ImageLoadState.error) {\n      this.setState({ imageLoadError: true });\n    }\n  };\n}\n", "import * as React from 'react';\nimport type { IImageProps } from '../Image/Image.types';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IBaseProps, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\n * {@docCategory Icon}\n */\nexport enum IconType {\n  /**\n   * Render using the fabric icon font.\n   * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\n   */\n  default = 0,\n\n  /**\n   * Render using an image, where imageProps would be used.\n   * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\n   */\n  image = 1,\n\n  /**\n   * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\n   */\n  Default = 100000,\n\n  /**\n   * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\n   */\n  Image = 100001,\n}\n\n/**\n * {@docCategory Icon}\n */\nexport interface IIconProps extends IBaseProps, React.HTMLAttributes<HTMLElement> {\n  /**\n   * The name of the icon to use from the icon font.\n   * If string is empty, a placeholder icon will be rendered the same width as an icon.\n   */\n  iconName?: string;\n\n  /**\n   * The aria label of the icon for the benefit of screen readers.\n   * @deprecated Use the native prop `aria-label`\n   */\n  ariaLabel?: string;\n\n  /**\n   * The type of icon to render (image or icon font).\n   * @deprecated Inferred based on the presence of `imageProps`\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  iconType?: IconType;\n\n  /**\n   * If rendering an image icon, these props will be passed to the Image component.\n   */\n  imageProps?: IImageProps;\n\n  /**\n   * If rendering an image icon, this component will be rendered in the event that loading the image fails.\n   */\n  imageErrorAs?: React.ComponentType<IImageProps>;\n\n  /**\n   * Gets the styles for an Icon.\n   */\n  styles?: IStyleFunctionOrObject<IIconStyleProps, IIconStyles>;\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory Icon}\n */\nexport interface IIconStyleProps {\n  className?: string;\n  iconClassName?: string;\n  isPlaceholder: boolean;\n  isImage: boolean;\n  styles?: Partial<IIconStyles>;\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory Icon}\n */\nexport interface IIconStyles {\n  root?: IStyle;\n\n  /**\n   * @deprecated Use `root`.\n   */\n  imageContainer?: IStyle;\n}\n\n/**\n * Props for a basic icon component which only supports font glyphs and can't be targeted by customizations.\n * {@docCategory Icon}\n */\nexport interface IFontIconProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * The name of the icon to use from the icon font.\n   * If string is empty, a placeholder icon will be rendered the same width as an icon.\n   */\n  iconName?: string;\n\n  /**\n   * Custom class to style the icon.\n   */\n  className?: string;\n}\n\n/**\n * Props for a basic image icon component which doesn't directly provide image load error handling\n * and can't be targeted by customizations.\n * {@docCategory Icon}\n */\nexport interface IImageIconProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Props passed to the Image component.\n   */\n  imageProps: IImageProps;\n\n  /**\n   * Custom class to style the icon.\n   */\n  className?: string;\n}\n", "import * as React from 'react';\nimport { classNamesFunction, getNativeProps, imgProperties } from '../../Utilities';\nimport { ImageCoverStyle, ImageFit, ImageLoadState } from './Image.types';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport type { IImageProps, IImageStyleProps, IImageStyles } from './Image.types';\n\nconst getClassNames = classNamesFunction<IImageStyleProps, IImageStyles>();\n\nexport interface IImageState {\n  loadState?: ImageLoadState;\n}\n\nconst SVG_REGEX = /\\.svg$/i;\nconst KEY_PREFIX = 'fabricImage';\n\nfunction useLoadState(\n  props: IImageProps,\n  imageElement: React.RefObject<HTMLImageElement>,\n): readonly [\n  ImageLoadState,\n  /* onImageLoad */ (ev: React.SyntheticEvent<HTMLImageElement>) => void,\n  /* onImageError */ (ev: React.SyntheticEvent<HTMLImageElement>) => void,\n] {\n  const { onLoadingStateChange, onLoad, onError, src } = props;\n\n  const [loadState, setLoadState] = React.useState<ImageLoadState>(ImageLoadState.notLoaded);\n\n  // eslint-disable-next-line no-restricted-properties\n  React.useLayoutEffect(() => {\n    // If the src property changes, reset the load state\n    // (does nothing if the load state is already notLoaded)\n    setLoadState(ImageLoadState.notLoaded);\n  }, [src]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- intended to run every render\n  React.useEffect(() => {\n    if (loadState === ImageLoadState.notLoaded) {\n      // testing if naturalWidth and naturalHeight are greater than zero is better than checking\n      // .complete, because .complete will also be set to true if the image breaks. However,\n      // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back\n      // to checking .complete for these images.\n      const isLoaded: boolean = imageElement.current\n        ? (src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0) ||\n          (imageElement.current.complete && SVG_REGEX.test(src!))\n        : false;\n\n      if (isLoaded) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    }\n  });\n\n  React.useEffect(() => {\n    onLoadingStateChange?.(loadState);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run when loadState changes\n  }, [loadState]);\n\n  const onImageLoaded = React.useCallback(\n    (ev: React.SyntheticEvent<HTMLImageElement>) => {\n      onLoad?.(ev);\n      if (src) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    },\n    [src, onLoad],\n  );\n\n  const onImageError = React.useCallback(\n    (ev: React.SyntheticEvent<HTMLImageElement>) => {\n      onError?.(ev);\n      setLoadState(ImageLoadState.error);\n    },\n    [onError],\n  );\n\n  return [loadState, onImageLoaded, onImageError] as const;\n}\n\nexport const ImageBase: React.FunctionComponent<IImageProps> = React.forwardRef<HTMLImageElement, IImageProps>(\n  (props, forwardedRef) => {\n    const frameElement = React.useRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>;\n    const imageElement = React.useRef<HTMLImageElement>() as React.RefObject<HTMLImageElement>;\n    const [loadState, onImageLoaded, onImageError] = useLoadState(props, imageElement);\n\n    const imageProps = getNativeProps<React.ImgHTMLAttributes<HTMLImageElement>>(props, imgProperties, [\n      'width',\n      'height',\n    ]);\n    const {\n      src,\n      alt,\n      width,\n      height,\n      shouldFadeIn = true,\n      shouldStartVisible,\n      className,\n      imageFit,\n      role,\n      maximizeFrame,\n      styles,\n      theme,\n      loading,\n    } = props;\n    const coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      width,\n      height,\n      maximizeFrame,\n      shouldFadeIn,\n      shouldStartVisible,\n      isLoaded:\n        loadState === ImageLoadState.loaded || (loadState === ImageLoadState.notLoaded && props.shouldStartVisible),\n      isLandscape: coverStyle === ImageCoverStyle.landscape,\n      isCenter: imageFit === ImageFit.center,\n      isCenterContain: imageFit === ImageFit.centerContain,\n      isCenterCover: imageFit === ImageFit.centerCover,\n      isContain: imageFit === ImageFit.contain,\n      isCover: imageFit === ImageFit.cover,\n      isNone: imageFit === ImageFit.none,\n      isError: loadState === ImageLoadState.error,\n      isNotImageFit: imageFit === undefined,\n    });\n\n    // If image dimensions aren't specified, the natural size of the image is used.\n    return (\n      <div className={classNames.root} style={{ width: width, height: height }} ref={frameElement}>\n        <img\n          {...imageProps}\n          onLoad={onImageLoaded}\n          onError={onImageError}\n          key={KEY_PREFIX + props.src || ''}\n          className={classNames.image}\n          ref={useMergedRefs(imageElement, forwardedRef)}\n          src={src}\n          alt={alt}\n          role={role}\n          loading={loading}\n        />\n      </div>\n    );\n  },\n);\nImageBase.displayName = 'ImageBase';\n\nfunction useCoverStyle(\n  props: IImageProps,\n  loadState: ImageLoadState,\n  imageElement: React.RefObject<HTMLImageElement>,\n  frameElement: React.RefObject<HTMLDivElement>,\n) {\n  const previousLoadState = React.useRef(loadState);\n  const coverStyle = React.useRef<ImageCoverStyle | undefined>();\n\n  if (\n    coverStyle === undefined ||\n    (previousLoadState.current === ImageLoadState.notLoaded && loadState === ImageLoadState.loaded)\n  ) {\n    coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);\n  }\n\n  previousLoadState.current = loadState;\n\n  return coverStyle.current!;\n}\n\nfunction computeCoverStyle(\n  props: IImageProps,\n  loadState: ImageLoadState,\n  imageElement: React.RefObject<HTMLImageElement>,\n  frameElement: React.RefObject<HTMLDivElement>,\n): ImageCoverStyle {\n  const { imageFit, width, height } = props;\n\n  // Do not compute cover style if it was already specified in props\n  if (props.coverStyle !== undefined) {\n    return props.coverStyle;\n  } else if (\n    loadState === ImageLoadState.loaded &&\n    (imageFit === ImageFit.cover ||\n      imageFit === ImageFit.contain ||\n      imageFit === ImageFit.centerContain ||\n      imageFit === ImageFit.centerCover) &&\n    imageElement.current &&\n    frameElement.current\n  ) {\n    // Determine the desired ratio using the width and height props.\n    // If those props aren't available, measure measure the frame.\n    let desiredRatio;\n    if (\n      typeof width === 'number' &&\n      typeof height === 'number' &&\n      imageFit !== ImageFit.centerContain &&\n      imageFit !== ImageFit.centerCover\n    ) {\n      desiredRatio = width / height;\n    } else {\n      desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;\n    }\n\n    // Examine the source image to determine its original ratio.\n    const naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight;\n\n    // Should we crop from the top or the sides?\n    if (naturalRatio > desiredRatio) {\n      return ImageCoverStyle.landscape;\n    }\n  }\n  return ImageCoverStyle.portrait;\n}\n", "import * as React from 'react';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Image}\n */\nexport interface IImage {}\n\n/**\n * {@docCategory Image}\n */\nexport interface IImageProps extends React.ImgHTMLAttributes<HTMLImageElement>, React.RefAttributes<HTMLImageElement> {\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules\n   */\n  styles?: IStyleFunctionOrObject<IImageStyleProps, IImageStyles>;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Additional css class to apply to the Component\n   * @defaultvalue undefined\n   */\n  className?: string;\n\n  /**\n   * If true, fades the image in when loaded.\n   * @defaultvalue true\n   */\n  shouldFadeIn?: boolean;\n\n  /**\n   * If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until\n   * it is successfully loaded. This disables shouldFadeIn.\n   * @defaultvalue false;\n   */\n  shouldStartVisible?: boolean;\n\n  /**\n   * Used to determine how the image is scaled and cropped to fit the frame.\n   *\n   * @defaultvalue If both dimensions are provided, then the image is fit using `ImageFit.scale`.\n   * Otherwise, the image won't be scaled or cropped.\n   */\n  imageFit?: ImageFit;\n\n  /**\n   * @deprecated Not used. Use `onLoadingStateChange` and re-render the Image with a different src.\n   */\n  errorSrc?: string;\n\n  /**\n   * If true, the image frame will expand to fill its parent container.\n   */\n  maximizeFrame?: boolean;\n\n  /**\n   * Optional callback method for when the image load state has changed.\n   * The 'loadState' parameter indicates the current state of the Image.\n   */\n  onLoadingStateChange?: (loadState: ImageLoadState) => void;\n\n  /**\n   * Specifies the cover style to be used for this image. If not\n   * specified, this will be dynamically calculated based on the\n   * aspect ratio for the image.\n   */\n  coverStyle?: ImageCoverStyle;\n\n  /**\n   * Allows for browser-level image lazy-loading.\n   */\n  loading?: 'lazy' | 'eager';\n}\n\n/**\n * The possible methods that can be used to fit the image.\n * {@docCategory Image}\n */\nexport enum ImageFit {\n  /**\n   * The image is not scaled. The image is centered and cropped within the content box.\n   */\n  center = 0,\n\n  /**\n   * The image is scaled to maintain its aspect ratio while being fully contained within the frame. The image will\n   * be centered horizontally and vertically within the frame. The space in the top and bottom or in the sides of\n   * the frame will be empty depending on the difference in aspect ratio between the image and the frame.\n   */\n  contain = 1,\n\n  /**\n   * The image is scaled to maintain its aspect ratio while filling the frame. Portions of the image will be cropped\n   * from the top and bottom, or the sides, depending on the difference in aspect ratio between the image and the frame.\n   */\n  cover = 2,\n\n  /**\n   * Neither the image nor the frame are scaled. If their sizes do not match, the image will either be cropped or the\n   * frame will have empty space.\n   */\n  none = 3,\n\n  /**\n   * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will\n   * behave as ImageFit.center if the image's natural height or width is less than the Image frame's height or width,\n   * but if both natural height and width are larger than the frame it will behave as ImageFit.cover.\n   */\n  centerCover = 4,\n\n  /**\n   * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will\n   * behave as ImageFit.center if the image's natural height and width is less than the Image frame's height and width,\n   * but if either natural height or width are larger than the frame it will behave as ImageFit.contain.\n   */\n  centerContain = 5,\n}\n\n/**\n * The cover style to be used on the image\n * {@docCategory Image}\n */\nexport enum ImageCoverStyle {\n  /**\n   * The image will be shown at 100% height of container and the width will be scaled accordingly\n   */\n  landscape = 0,\n\n  /**\n   * The image will be shown at 100% width of container and the height will be scaled accordingly\n   */\n  portrait = 1,\n}\n\n/**\n * {@docCategory Image}\n */\nexport enum ImageLoadState {\n  /**\n   * The image has not yet been loaded, and there is no error yet.\n   */\n  notLoaded = 0,\n\n  /**\n   * The image has been loaded successfully.\n   */\n  loaded = 1,\n\n  /**\n   * An error has been encountered while loading the image.\n   */\n  error = 2,\n\n  /**\n   * @deprecated Not used. Use `onLoadingStateChange` and re-render the Image with a different src.\n   */\n  errorLoaded = 3,\n}\n\n/**\n * {@docCategory Image}\n */\nexport interface IImageStyleProps {\n  /**\n   * Accept theme prop.\n   */\n  theme: ITheme;\n\n  /**\n   * Accept custom classNames\n   */\n  className?: string;\n\n  /**\n   * If true, the image frame will expand to fill its parent container.\n   */\n  maximizeFrame?: boolean;\n\n  /**\n   * If true, the image is loaded\n   */\n  isLoaded?: boolean;\n\n  /**\n   * If true, fades the image in when loaded.\n   * @defaultvalue true\n   */\n  shouldFadeIn?: boolean;\n\n  /**\n   * If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until\n   * it is successfully loaded. This disables shouldFadeIn.\n   * @defaultvalue false;\n   */\n  shouldStartVisible?: boolean;\n\n  /**\n   * If true the image is coverStyle landscape instead of portrait\n   */\n  isLandscape?: boolean;\n\n  /**\n   * ImageFit booleans for center, cover, contain, centerContain, centerCover, none\n   */\n  isCenter?: boolean;\n  isContain?: boolean;\n  isCover?: boolean;\n  isCenterContain?: boolean;\n  isCenterCover?: boolean;\n  isNone?: boolean;\n\n  /**\n   * if true image load is in error\n   */\n  isError?: boolean;\n\n  /**\n   * if true, imageFit is undefined\n   */\n  isNotImageFit?: boolean;\n\n  /**\n   * Image width value\n   */\n  width?: number | string;\n\n  /**\n   * Image height value\n   */\n  height?: number | string;\n}\n\n/**\n * {@docCategory Image}\n */\nexport interface IImageStyles {\n  /**\n   * Style set for the root div element.\n   */\n  root: IStyle;\n  /**\n   * Style set for the img element.\n   */\n  image: IStyle;\n}\n", "import * as React from 'react';\n\n/**\n * A Ref function which can be treated like a ref object in that it has an attached\n * current property, which will be updated as the ref is evaluated.\n */\nexport type RefObjectFunction<T> = React.RefObject<T> & ((value: T) => void);\n\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs - Refs to collectively update with one ref value.\n * @returns A function with an attached \"current\" prop, so that it can be treated like a RefObject.\n */\nexport function useMergedRefs<T>(...refs: (React.Ref<T> | undefined)[]): RefObjectFunction<T> {\n  const mergedCallback: RefObjectFunction<T> = (React.useCallback(\n    (value: T) => {\n      // Update the \"current\" prop hanging on the function.\n      ((mergedCallback as unknown) as React.MutableRefObject<T>).current = value;\n\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref) {\n          // work around the immutability of the React.Ref type\n          ((ref as unknown) as React.MutableRefObject<T>).current = value;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- already exhaustive\n    [...refs],\n  ) as unknown) as RefObjectFunction<T>;\n\n  return mergedCallback;\n}\n", "import { mergeStyles } from '../MergeStyles';\n\n/**\n * Builds a class names object from a given map.\n *\n * @param styles - Map of unprocessed styles.\n * @returns Map of property name to class name.\n */\nexport function buildClassMap<T extends Object>(styles: T): { [key in keyof T]?: string } {\n  let classes: { [key in keyof T]?: string } = {};\n\n  for (let styleName in styles) {\n    if (styles.hasOwnProperty(styleName)) {\n      let className: string;\n\n      Object.defineProperty(classes, styleName, {\n        get: (): string => {\n          if (className === undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            className = mergeStyles(styles[styleName] as any).toString();\n          }\n          return className;\n        },\n        enumerable: true,\n        configurable: true,\n      });\n    }\n  }\n\n  return classes;\n}\n", "import { GlobalSettings, warn } from '@fluentui/utilities';\nimport { fontFace, mergeStyles, Stylesheet } from '@fluentui/merge-styles';\nimport type { IRawStyle, IFontFace } from '@fluentui/merge-styles';\n\nexport interface IIconSubset {\n  fontFace?: IFontFace;\n  icons: {\n    [key: string]: string | JSX.Element;\n  };\n\n  style?: IRawStyle;\n  /**\n   * Indicates to the icon renderer that it is safe to merge any props on the original `Icon` element\n   * onto the child content element registered for the icon which are valid for HTML images.\n   */\n  mergeImageProps?: boolean;\n}\n\nexport interface IIconSubsetRecord extends IIconSubset {\n  isRegistered?: boolean;\n  className?: string;\n}\n\nexport interface IIconRecord {\n  code: string | undefined;\n  subset: IIconSubsetRecord;\n}\n\nexport interface IIconOptions {\n  /**\n   * By default, registering the same set of icons will generate a console warning per duplicate icon\n   * registered, because this scenario can create unexpected consequences.\n   *\n   * Some scenarios include:\n   *\n   * Icon set was previously registered using a different base url.\n   * Icon set was previously registered but a different version was provided.\n   * Icons in a previous registered set overlap with a new set.\n   *\n   * To simply ignore previously registered icons, you can specify to disable warnings. This means\n   * that if an icon which was previous registered is registered again, it will be silently ignored.\n   * However, consider whether the problems listed above will cause issues.\n   **/\n  disableWarnings: boolean;\n\n  /**\n   * @deprecated Use `disableWarnings` instead.\n   */\n  warnOnMissingIcons?: boolean;\n}\n\nexport interface IIconRecords {\n  __options: IIconOptions;\n  __remapped: { [key: string]: string };\n  [key: string]: IIconRecord | {};\n}\n\nconst ICON_SETTING_NAME = 'icons';\n\nconst _iconSettings = GlobalSettings.getValue<IIconRecords>(ICON_SETTING_NAME, {\n  __options: {\n    disableWarnings: false,\n    warnOnMissingIcons: true,\n  },\n  __remapped: {},\n});\n\n// Reset icon registration on stylesheet resets.\nconst stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(() => {\n    for (const name in _iconSettings) {\n      if (_iconSettings.hasOwnProperty(name) && !!(_iconSettings[name] as IIconRecord).subset) {\n        (_iconSettings[name] as IIconRecord).subset.className = undefined;\n      }\n    }\n  });\n}\n\n/**\n * Normalizes an icon name for consistent mapping.\n * Current implementation is to convert the icon name to lower case.\n *\n * @param name - Icon name to normalize.\n * @returns {string} Normalized icon name to use for indexing and mapping.\n */\nconst normalizeIconName = (name: string): string => name.toLowerCase();\n\n/**\n * Registers a given subset of icons.\n *\n * @param iconSubset - the icon subset definition.\n */\nexport function registerIcons(iconSubset: IIconSubset, options?: Partial<IIconOptions>): void {\n  let subset = {\n    ...iconSubset,\n    isRegistered: false,\n    className: undefined,\n  };\n  let { icons } = iconSubset;\n\n  // Grab options, optionally mix user provided ones on top.\n  options = options ? { ..._iconSettings.__options, ...options } : _iconSettings.__options;\n\n  for (const iconName in icons) {\n    if (icons.hasOwnProperty(iconName)) {\n      const code = icons[iconName];\n      const normalizedIconName = normalizeIconName(iconName);\n\n      if (_iconSettings[normalizedIconName]) {\n        _warnDuplicateIcon(iconName);\n      } else {\n        _iconSettings[normalizedIconName] = {\n          code,\n          subset,\n        } as IIconRecord;\n      }\n    }\n  }\n}\n\n/**\n * Unregisters icons by name.\n *\n * @param iconNames - List of icons to unregister.\n */\nexport function unregisterIcons(iconNames: string[]): void {\n  const options = _iconSettings.__options;\n\n  for (const iconName of iconNames) {\n    const normalizedIconName = normalizeIconName(iconName);\n    if (_iconSettings[normalizedIconName]) {\n      delete _iconSettings[normalizedIconName];\n    } else {\n      // Warn that we are trying to delete an icon that doesn't exist\n      if (!options.disableWarnings) {\n        warn(`The icon \"${iconName}\" tried to unregister but was not registered.`);\n      }\n    }\n\n    // Delete any aliases for this iconName\n    if (_iconSettings.__remapped[normalizedIconName]) {\n      delete _iconSettings.__remapped[normalizedIconName];\n    }\n\n    // Delete any items that were an alias for this iconName\n    Object.keys(_iconSettings.__remapped).forEach((key: string) => {\n      if (_iconSettings.__remapped[key] === normalizedIconName) {\n        delete _iconSettings.__remapped[key];\n      }\n    });\n  }\n}\n\n/**\n * Remaps one icon name to another.\n */\nexport function registerIconAlias(iconName: string, mappedToName: string): void {\n  _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);\n}\n\n/**\n * Gets an icon definition. If an icon is requested but the subset has yet to be registered,\n * it will get registered immediately.\n *\n * @public\n * @param name - Name of icon.\n */\nexport function getIcon(name?: string): IIconRecord | undefined {\n  let icon: IIconRecord | undefined = undefined;\n  const options = _iconSettings.__options;\n\n  name = name ? normalizeIconName(name) : '';\n  name = _iconSettings.__remapped[name] || name;\n\n  if (name) {\n    icon = _iconSettings[name!] as IIconRecord;\n\n    if (icon) {\n      let { subset } = icon;\n      if (subset && subset.fontFace) {\n        if (!subset.isRegistered) {\n          fontFace(subset.fontFace);\n          subset.isRegistered = true;\n        }\n\n        if (!subset.className) {\n          subset.className = mergeStyles(subset.style, {\n            fontFamily: subset.fontFace.fontFamily,\n            fontWeight: subset.fontFace.fontWeight || 'normal',\n            fontStyle: subset.fontFace.fontStyle || 'normal',\n          });\n        }\n      }\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      if (!options.disableWarnings && options.warnOnMissingIcons) {\n        warn(\n          `The icon \"${name}\" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.`,\n        );\n      }\n    }\n  }\n\n  return icon;\n}\n\n/**\n * Sets the icon options.\n *\n * @public\n */\nexport function setIconOptions(options: Partial<IIconOptions>): void {\n  _iconSettings.__options = {\n    ..._iconSettings.__options,\n    ...options,\n  };\n}\n\nlet _missingIcons: string[] = [];\nlet _missingIconsTimer: number | undefined = undefined;\n\nfunction _warnDuplicateIcon(iconName: string): void {\n  const options = _iconSettings.__options;\n  const warningDelay = 2000;\n  const maxIconsInMessage = 10;\n\n  if (!options.disableWarnings) {\n    _missingIcons.push(iconName);\n    if (_missingIconsTimer === undefined) {\n      _missingIconsTimer = setTimeout(() => {\n        warn(\n          `Some icons were re-registered. Applications should only call registerIcons for any given ` +\n            `icon once. Redefining what an icon is may have unintended consequences. Duplicates ` +\n            `include: \\n` +\n            _missingIcons.slice(0, maxIconsInMessage).join(', ') +\n            (_missingIcons.length > maxIconsInMessage ? ` (+ ${_missingIcons.length - maxIconsInMessage} more)` : ''),\n        );\n        _missingIconsTimer = undefined;\n        _missingIcons = [];\n      }, warningDelay);\n    }\n  }\n}\n", "import { buildClassMap } from '../utilities/index';\nimport { AnimationStyles } from '../styles/index';\nimport type { IAnimationStyles } from '../interfaces/index';\n\n/**\n * {@docCategory AnimationClassNames}\n */\nexport const AnimationClassNames: { [key in keyof IAnimationStyles]?: string } = buildClassMap(AnimationStyles);\n", "import { AnimationClassNames, getGlobalClassNames } from '../../Styling';\nimport { getWindow } from '../../Utilities';\nimport type { IStyle } from '../../Styling';\nimport type { IImageStyleProps, IImageStyles } from './Image.types';\n\nconst GlobalClassNames = {\n  root: 'ms-Image',\n  rootMaximizeFrame: 'ms-Image--maximizeFrame',\n  image: 'ms-Image-image',\n  imageCenter: 'ms-Image-image--center',\n  imageContain: 'ms-Image-image--contain',\n  imageCover: 'ms-Image-image--cover',\n  imageCenterContain: 'ms-Image-image--centerContain',\n  imageCenterCover: 'ms-Image-image--centerCover',\n  imageNone: 'ms-Image-image--none',\n  imageLandscape: 'ms-Image-image--landscape',\n  imagePortrait: 'ms-Image-image--portrait',\n};\n\nexport const getStyles = (props: IImageStyleProps): IImageStyles => {\n  const {\n    className,\n    width,\n    height,\n    maximizeFrame,\n    isLoaded,\n    shouldFadeIn,\n    shouldStartVisible,\n    isLandscape,\n    isCenter,\n    isContain,\n    isCover,\n    isCenterContain,\n    isCenterCover,\n    isNone,\n    isError,\n    isNotImageFit,\n    theme,\n  } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const ImageFitStyles: IStyle = {\n    position: 'absolute',\n    left: '50% /* @noflip */',\n    top: '50%',\n    transform: 'translate(-50%,-50%)', // @todo test RTL renders transform: translate(50%,-50%);\n  };\n\n  // Cut the mustard using msMaxTouchPoints to detect IE11 which does not support CSS object-fit\n  const window: Window | undefined = getWindow();\n  const supportsObjectFit: boolean = window !== undefined && window.navigator.msMaxTouchPoints === undefined;\n  const fallbackObjectFitStyles =\n    (isContain && isLandscape) || (isCover && !isLandscape)\n      ? { width: '100%', height: 'auto' }\n      : { width: 'auto', height: '100%' };\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        overflow: 'hidden',\n      },\n      maximizeFrame && [\n        classNames.rootMaximizeFrame,\n        {\n          height: '100%',\n          width: '100%',\n        },\n      ],\n      isLoaded && shouldFadeIn && !shouldStartVisible && AnimationClassNames.fadeIn400,\n      (isCenter || isContain || isCover || isCenterContain || isCenterCover) && {\n        position: 'relative',\n      },\n      className,\n    ],\n    image: [\n      classNames.image,\n      {\n        display: 'block',\n        opacity: 0,\n      },\n      isLoaded && [\n        'is-loaded',\n        {\n          opacity: 1,\n        },\n      ],\n      isCenter && [classNames.imageCenter, ImageFitStyles],\n      isContain && [\n        classNames.imageContain,\n        supportsObjectFit && {\n          width: '100%',\n          height: '100%',\n          objectFit: 'contain',\n        },\n        !supportsObjectFit && fallbackObjectFitStyles,\n        !supportsObjectFit && ImageFitStyles,\n      ],\n      isCover && [\n        classNames.imageCover,\n        supportsObjectFit && {\n          width: '100%',\n          height: '100%',\n          objectFit: 'cover',\n        },\n        !supportsObjectFit && fallbackObjectFitStyles,\n        !supportsObjectFit && ImageFitStyles,\n      ],\n      isCenterContain && [\n        classNames.imageCenterContain,\n        isLandscape && {\n          maxWidth: '100%',\n        },\n        !isLandscape && {\n          maxHeight: '100%',\n        },\n        ImageFitStyles,\n      ],\n      isCenterCover && [\n        classNames.imageCenterCover,\n        isLandscape && {\n          maxHeight: '100%',\n        },\n        !isLandscape && {\n          maxWidth: '100%',\n        },\n        ImageFitStyles,\n      ],\n      isNone && [\n        classNames.imageNone,\n        {\n          width: 'auto',\n          height: 'auto',\n        },\n      ],\n      isNotImageFit && [\n        !!width &&\n          !height && {\n            height: 'auto',\n            width: '100%',\n          },\n        !width &&\n          !!height && {\n            height: '100%',\n            width: 'auto',\n          },\n        !!width &&\n          !!height && {\n            height: '100%',\n            width: '100%',\n          },\n      ],\n      isLandscape && classNames.imageLandscape,\n      !isLandscape && classNames.imagePortrait,\n      !isLoaded && 'is-notLoaded',\n      shouldFadeIn && 'is-fadeIn',\n      isError && 'is-error',\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ImageBase } from './Image.base';\nimport { getStyles } from './Image.styles';\nimport type { IImageProps, IImageStyleProps, IImageStyles } from './Image.types';\n\nexport const Image: React.FunctionComponent<IImageProps> = styled<IImageProps, IImageStyleProps, IImageStyles>(\n  ImageBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Image',\n  },\n  true,\n);\nImage.displayName = 'Image';\n", "import * as React from 'react';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon } from '../../Styling';\nimport type { IFontIconProps } from './Icon.types';\nimport type { IIconRecord, IIconSubsetRecord } from '../../Styling';\n\nexport interface IIconContent {\n  children?: string | JSX.Element;\n  iconClassName?: string;\n  fontFamily?: string;\n  mergeImageProps?: boolean;\n}\n\nexport const getIconContent = memoizeFunction(\n  (iconName?: string): IIconContent | null => {\n    const { code, subset }: Pick<IIconRecord, 'code'> & { subset: Partial<IIconSubsetRecord> } = getIcon(iconName) || {\n      subset: {},\n      code: undefined,\n    };\n\n    if (!code) {\n      return null;\n    }\n\n    return {\n      children: code,\n      iconClassName: subset.className,\n      fontFamily: subset.fontFace && subset.fontFace.fontFamily,\n      mergeImageProps: subset.mergeImageProps,\n    };\n  },\n  undefined,\n  true /*ignoreNullOrUndefinedResult */,\n);\n\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport const FontIcon: React.FunctionComponent<IFontIconProps> = props => {\n  const { iconName, className, style = {} } = props;\n  const iconContent = getIconContent(iconName) || {};\n  const { iconClassName, children, fontFamily, mergeImageProps } = iconContent;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLElement>>(props, htmlElementProperties);\n  const accessibleName = props['aria-label'] || props.title;\n  const containerProps =\n    props['aria-label'] || props['aria-labelledby'] || props.title\n      ? {\n          role: mergeImageProps ? undefined : 'img',\n        }\n      : {\n          'aria-hidden': true,\n        };\n\n  let finalChildren = children;\n\n  if (mergeImageProps) {\n    if (typeof children === 'object' && typeof children.props === 'object' && accessibleName) {\n      finalChildren = React.cloneElement(children, { alt: accessibleName });\n    }\n  }\n\n  return (\n    <i\n      data-icon-name={iconName}\n      {...containerProps}\n      {...nativeProps}\n      {...(mergeImageProps\n        ? {\n            title: undefined,\n            'aria-label': undefined,\n          }\n        : {})}\n      className={css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className)}\n      // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles\n      // https://github.com/microsoft/fluentui/issues/10449\n      style={{ fontFamily, ...style }}\n    >\n      {finalChildren}\n    </i>\n  );\n};\n\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\nexport const getFontIcon = memoizeFunction((iconName: string, className?: string, ariaLabel?: string) => {\n  return FontIcon({ iconName, className, 'aria-label': ariaLabel });\n});\n", "import { mergeStyleSets } from '../../Styling';\nimport type { IIconStyleProps, IIconStyles } from './Icon.types';\n\n/** Class names used in themeable and non-themeable Icon components */\nexport const classNames = mergeStyleSets({\n  root: {\n    display: 'inline-block',\n  },\n  placeholder: [\n    'ms-Icon-placeHolder',\n    {\n      width: '1em',\n    },\n  ],\n  image: [\n    'ms-Icon-imageContainer',\n    {\n      overflow: 'hidden',\n    },\n  ],\n});\n/** Class name used only in non-themeable Icon components */\nexport const MS_ICON = 'ms-Icon';\n\nexport const getStyles = (props: IIconStyleProps): IIconStyles => {\n  const { className, iconClassName, isPlaceholder, isImage, styles } = props;\n\n  return {\n    root: [\n      isPlaceholder && classNames.placeholder,\n      classNames.root,\n      isImage && classNames.image,\n      iconClassName,\n      className,\n      styles && styles.root,\n      // eslint-disable-next-line deprecation/deprecation\n      styles && styles.imageContainer,\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IconBase } from './Icon.base';\nimport { getStyles } from './Icon.styles';\nimport type { IIconProps, IIconStyleProps, IIconStyles } from './Icon.types';\n\n/**\n * Legacy Icon component which can be targeted by customization. It's recommended to use `FontIcon`\n * or `ImageIcon` instead, especially in scenarios where rendering performance is important.\n * {@docCategory Icon}\n */\nexport const Icon: React.FunctionComponent<IIconProps> = styled<IIconProps, IIconStyleProps, IIconStyles>(\n  IconBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Icon',\n  },\n  true,\n);\nIcon.displayName = 'Icon';\n", "import * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  classNamesFunction,\n  DelayedRender,\n  getId,\n  getNativeProps,\n  getWindow,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  isIE11,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { ILabelStyleProps, ILabelStyles } from '../../Label';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n\n  /**\n   * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\n   * currently being revealed.\n   */\n  isRevealingPassword?: boolean;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nconst REVEAL_ICON_NAME = 'RedEye';\nconst HIDE_ICON_NAME = 'Hide';\n\nexport class TextFieldBase\n  extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    if (prevProps.value !== props.value) {\n      // Only if the value in props changed, reset the record of the last value seen by a\n      // change/input event (don't do this if the value in state changed, since at least in tests\n      // the state update may happen before the second event in a series)\n      this._lastChangeValue = undefined;\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      invalid,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      canRevealPassword,\n      revealPasswordAriaLabel,\n      type,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused, isRevealingPassword } = this.state;\n    const errorMessage = this._errorMessage;\n    const isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n\n    const hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    const classNames = (this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: isInvalid,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n      hasRevealButton,\n    }));\n\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div ref={this.props.elementRef} className={classNames.root}>\n        <div className={classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={classNames.prefix}>{onRenderPrefix(this.props, this._onRenderPrefix)}</div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={classNames.icon} {...iconProps} />}\n            {hasRevealButton && (\n              // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n              <button\n                aria-label={revealPasswordAriaLabel}\n                className={classNames.revealButton}\n                onClick={this._onRevealButtonClick}\n                aria-pressed={!!isRevealingPassword}\n                type=\"button\"\n              >\n                <span className={classNames.revealSpan}>\n                  <Icon\n                    className={classNames.revealIcon}\n                    iconName={isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME}\n                  />\n                </span>\n              </button>\n            )}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={classNames.suffix}>{onRenderSuffix(this.props, this._onRenderSuffix)}</div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>{this._renderErrorMessage()}</DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * Renders error message based on the type of the message.\n   *\n   * - If error message is string, it will render using the built in styles.\n   * - If error message is an element, user has full control over how it's rendered.\n   */\n  private _renderErrorMessage(): JSX.Element | null {\n    const errorMessage = this._errorMessage;\n\n    return errorMessage ? (\n      typeof errorMessage === 'string' ? (\n        <p className={this._classNames.errorMessage}>\n          <span data-automation-id=\"error-message\">{errorMessage}</span>\n        </p>\n      ) : (\n        <div className={this._classNames.errorMessage} data-automation-id=\"error-message\">\n          {errorMessage}\n        </div>\n      )\n    ) : null;\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const { invalid = !!this._errorMessage } = this.props;\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={invalid}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): JSX.Element | null {\n    const { ariaLabel, invalid = !!this._errorMessage, type = 'text', label } = this.props;\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement> = {\n      type: this.state.isRevealingPassword ? 'text' : type,\n      id: this._id,\n      ...getNativeProps(this.props, inputProperties, ['defaultValue', 'type']),\n      'aria-labelledby': this.props['aria-labelledby'] || (label ? this._labelId : undefined),\n      ref: this._textElement as React.RefObject<HTMLInputElement>,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      'aria-label': ariaLabel,\n      'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      'aria-invalid': invalid,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur,\n    };\n\n    const defaultRender = (updatedInputProps: React.InputHTMLAttributes<HTMLInputElement>) => {\n      return <input {...updatedInputProps} />;\n    };\n    const onRenderInput = this.props.onRenderInput || defaultRender;\n    return onRenderInput(inputProps, defaultRender);\n  }\n\n  private _onRevealButtonClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState(prevState => ({ isRevealingPassword: !prevState.isRevealingPassword }));\n  };\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if any of the following are true:\n    // - the value is undefined (in case one of the IE bugs comes back)\n    // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n    // - it's the same as the previous value\n    const previousValue = _getValue(this.props, this.state) || '';\n    if (value === undefined || value === this._lastChangeValue || value === previousValue) {\n      this._lastChangeValue = undefined;\n      return;\n    }\n    this._lastChangeValue = value;\n\n    this.props.onChange?.(event, value);\n\n    if (!this._isControlled) {\n      // ONLY if this is an uncontrolled component, update the displayed value.\n      // (Controlled components must update the `value` prop from `onChange`.)\n      this.setState({ uncontrolledValue: value });\n    }\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n\n// Only calculate this once across all TextFields, since will stay the same\nlet __browserNeedsRevealButton: boolean | undefined;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    const win = getWindow();\n\n    if (win?.navigator) {\n      // Edge, Chromium Edge\n      const isEdge = /^Edg/.test(win.navigator.userAgent || '');\n\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}\n", "import {\n  AnimationClassNames,\n  getFocusStyle,\n  getGlobalClassNames,\n  getInputFocusStyle,\n  HighContrastSelector,\n  normalize,\n  getPlaceholderStyles,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport type { IStyle } from '../../Styling';\nimport type { ILabelStyles, ILabelStyleProps } from '../../Label';\nimport type { ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\nimport type { IStyleFunctionOrObject } from '@fluentui/utilities';\n\nconst globalClassNames = {\n  root: 'ms-TextField',\n  description: 'ms-TextField-description',\n  errorMessage: 'ms-TextField-errorMessage',\n  field: 'ms-TextField-field',\n  fieldGroup: 'ms-TextField-fieldGroup',\n  prefix: 'ms-TextField-prefix',\n  suffix: 'ms-TextField-suffix',\n  wrapper: 'ms-TextField-wrapper',\n  revealButton: 'ms-TextField-reveal',\n\n  multiline: 'ms-TextField--multiline',\n  borderless: 'ms-TextField--borderless',\n  underlined: 'ms-TextField--underlined',\n  unresizable: 'ms-TextField--unresizable',\n\n  required: 'is-required',\n  disabled: 'is-disabled',\n  active: 'is-active',\n};\n\nfunction getLabelStyles(props: ITextFieldStyleProps): IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles> {\n  const { underlined, disabled, focused, theme } = props;\n  const { palette, fonts } = theme;\n\n  return () => ({\n    root: [\n      underlined &&\n        disabled && {\n          color: palette.neutralTertiary,\n        },\n      underlined && {\n        fontSize: fonts.medium.fontSize,\n        marginRight: 8,\n        paddingLeft: 12,\n        paddingRight: 0,\n        lineHeight: '22px',\n        height: 32,\n      },\n      underlined &&\n        focused && {\n          selectors: {\n            [HighContrastSelector]: {\n              height: 31, // -1px to prevent jumpiness in HC with the increased border-width to 2px\n            },\n          },\n        },\n    ],\n  });\n}\n\nexport function getStyles(props: ITextFieldStyleProps): ITextFieldStyles {\n  const {\n    theme,\n    className,\n    disabled,\n    focused,\n    required,\n    multiline,\n    hasLabel,\n    borderless,\n    underlined,\n    hasIcon,\n    resizable,\n    hasErrorMessage,\n    inputClassName,\n    autoAdjustHeight,\n    hasRevealButton,\n  } = props;\n\n  const { semanticColors, effects, fonts } = theme;\n\n  const classNames = getGlobalClassNames(globalClassNames, theme);\n\n  const fieldPrefixSuffix: IStyle = {\n    // Suffix/Prefix are not editable so the disabled slot perfectly fits.\n    background: semanticColors.disabledBackground,\n    color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 10px',\n    lineHeight: 1,\n    whiteSpace: 'nowrap',\n    flexShrink: 0,\n    selectors: {\n      [HighContrastSelector]: {\n        background: 'Window',\n        color: disabled ? 'GrayText' : 'WindowText',\n      },\n    },\n  };\n\n  // placeholder style constants\n  const placeholderStyles: IStyle = [\n    {\n      color: semanticColors.inputPlaceholderText,\n      opacity: 1,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n  ];\n\n  const disabledPlaceholderStyles: IStyle = {\n    color: semanticColors.disabledText,\n    selectors: {\n      [HighContrastSelector]: {\n        color: 'GrayText',\n      },\n    },\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      required && classNames.required,\n      disabled && classNames.disabled,\n      focused && classNames.active,\n      multiline && classNames.multiline,\n      borderless && classNames.borderless,\n      underlined && classNames.underlined,\n      normalize,\n      {\n        position: 'relative',\n      },\n      className,\n    ],\n    wrapper: [\n      classNames.wrapper,\n\n      underlined && [\n        {\n          display: 'flex',\n          borderBottom: `1px solid ${!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText}`,\n          width: '100%',\n        },\n        disabled && {\n          borderBottomColor: semanticColors.disabledBackground,\n          selectors: {\n            [HighContrastSelector]: {\n              borderColor: 'GrayText',\n              ...getHighContrastNoAdjustStyle(),\n            },\n          },\n        },\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderBottomColor: 'Highlight',\n                  ...getHighContrastNoAdjustStyle(),\n                },\n              },\n            },\n          },\n        },\n        focused && [\n          {\n            position: 'relative',\n          },\n          getInputFocusStyle(\n            !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n            0,\n            'borderBottom',\n          ),\n        ],\n      ],\n    ],\n    fieldGroup: [\n      classNames.fieldGroup,\n      normalize,\n      {\n        border: `1px solid ${semanticColors.inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n        background: semanticColors.inputBackground,\n        cursor: 'text',\n        height: 32,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n        position: 'relative',\n      },\n      multiline && {\n        minHeight: '60px',\n        height: 'auto',\n        display: 'flex',\n      },\n\n      !focused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: semanticColors.inputBorderHovered,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderColor: 'Highlight',\n                  ...getHighContrastNoAdjustStyle(),\n                },\n              },\n            },\n          },\n        },\n\n      focused &&\n        !underlined &&\n        getInputFocusStyle(\n          !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n          effects.roundedCorner2,\n        ),\n      disabled && {\n        borderColor: semanticColors.disabledBackground,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n\n        cursor: 'default',\n      },\n      borderless && {\n        border: 'none',\n      },\n      borderless &&\n        focused && {\n          border: 'none',\n          selectors: {\n            ':after': {\n              border: 'none',\n            },\n          },\n        },\n      underlined && {\n        flex: '1 1 0px',\n        border: 'none',\n        textAlign: 'left',\n      },\n      underlined &&\n        disabled && {\n          backgroundColor: 'transparent',\n        },\n\n      hasErrorMessage &&\n        !underlined && {\n          borderColor: semanticColors.errorText,\n          selectors: {\n            '&:hover': {\n              borderColor: semanticColors.errorText,\n            },\n          },\n        },\n      !hasLabel &&\n        required && {\n          selectors: {\n            ':before': {\n              content: `'*'`,\n              color: semanticColors.errorText,\n              position: 'absolute',\n              top: -5,\n              right: -10,\n            },\n            [HighContrastSelector]: {\n              selectors: {\n                ':before': {\n                  color: 'WindowText',\n                  right: -14, // moving the * 4 pixel to right to alleviate border clipping in HC mode.\n                },\n              },\n            },\n          },\n        },\n    ],\n    field: [\n      fonts.medium,\n      classNames.field,\n      normalize,\n      {\n        borderRadius: 0,\n        border: 'none',\n        background: 'none',\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        padding: '0 8px',\n        width: '100%',\n        minWidth: 0,\n        textOverflow: 'ellipsis',\n        outline: 0,\n        selectors: {\n          '&:active, &:focus, &:hover': { outline: 0 },\n          '::-ms-clear': {\n            display: 'none',\n          },\n          [HighContrastSelector]: {\n            background: 'Window',\n            color: disabled ? 'GrayText' : 'WindowText',\n          },\n        },\n      },\n      getPlaceholderStyles(placeholderStyles),\n      multiline &&\n        !resizable && [\n          classNames.unresizable,\n          {\n            resize: 'none',\n          },\n        ],\n      multiline && {\n        minHeight: 'inherit',\n        lineHeight: 17,\n        flexGrow: 1,\n        paddingTop: 6,\n        paddingBottom: 6,\n        overflow: 'auto',\n        width: '100%',\n      },\n      multiline &&\n        autoAdjustHeight && {\n          overflow: 'hidden',\n        },\n      hasIcon &&\n        !hasRevealButton && {\n          paddingRight: 24,\n        },\n      multiline &&\n        hasIcon && {\n          paddingRight: 40,\n        },\n      disabled && [\n        {\n          backgroundColor: semanticColors.disabledBackground,\n          color: semanticColors.disabledText,\n          borderColor: semanticColors.disabledBackground,\n        },\n        getPlaceholderStyles(disabledPlaceholderStyles),\n      ],\n      underlined && {\n        textAlign: 'left',\n      },\n      focused &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingLeft: 11,\n              paddingRight: 11,\n            },\n          },\n        },\n      focused &&\n        multiline &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingTop: 4, // take into consideration the 2px increased border-width (not when borderless).\n            },\n          },\n        },\n      inputClassName,\n    ],\n    icon: [\n      multiline && {\n        paddingRight: 24,\n        alignItems: 'flex-end',\n      },\n      {\n        pointerEvents: 'none',\n        position: 'absolute',\n        bottom: 6,\n        right: 8,\n        top: 'auto',\n        fontSize: IconFontSizes.medium,\n        lineHeight: 18,\n      },\n      disabled && {\n        color: semanticColors.disabledText,\n      },\n    ],\n    description: [\n      classNames.description,\n      {\n        color: semanticColors.bodySubtext,\n        fontSize: fonts.xSmall.fontSize,\n      },\n    ],\n    errorMessage: [\n      classNames.errorMessage,\n      AnimationClassNames.slideDownIn20,\n      fonts.small,\n      {\n        color: semanticColors.errorText,\n        margin: 0,\n        paddingTop: 5,\n        display: 'flex',\n        alignItems: 'center',\n      },\n    ],\n    prefix: [classNames.prefix, fieldPrefixSuffix],\n    suffix: [classNames.suffix, fieldPrefixSuffix],\n    revealButton: [\n      classNames.revealButton,\n      'ms-Button',\n      'ms-Button--icon',\n      getFocusStyle(theme, { inset: 1 }),\n      {\n        height: 30,\n        width: 32,\n        border: 'none',\n        padding: '0px 4px',\n        backgroundColor: 'transparent',\n        color: semanticColors.link,\n        selectors: {\n          ':hover': {\n            outline: 0,\n            color: semanticColors.primaryButtonBackgroundHovered,\n            backgroundColor: semanticColors.buttonBackgroundHovered,\n            selectors: {\n              [HighContrastSelector]: {\n                borderColor: 'Highlight',\n                color: 'Highlight',\n              },\n            },\n          },\n          ':focus': { outline: 0 },\n        },\n      },\n      hasIcon && {\n        marginRight: 28,\n      },\n    ],\n    revealSpan: {\n      display: 'flex',\n      height: '100%',\n      alignItems: 'center',\n    },\n    revealIcon: {\n      margin: '0px 4px',\n      pointerEvents: 'none',\n      bottom: 6,\n      right: 8,\n      top: 'auto',\n      fontSize: IconFontSizes.medium,\n      lineHeight: 18,\n    },\n    subComponentStyles: {\n      label: getLabelStyles(props),\n    },\n  };\n}\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TextFieldBase } from './TextField.base';\nimport { getStyles } from './TextField.styles';\nimport type { ITextFieldProps, ITextFieldStyles, ITextFieldStyleProps } from './TextField.types';\n\nexport const TextField: React.FunctionComponent<ITextFieldProps> = styled<\n  ITextFieldProps,\n  ITextFieldStyleProps,\n  ITextFieldStyles\n>(TextFieldBase, getStyles, undefined, {\n  scope: 'TextField',\n});\n\nexport type { ITextField } from './TextField.types';\n"],
  "mappings": "ibAAA,MAAuB,OCSvB,GAAY,GAAZ,AAAA,UAAY,EAAQ,CAKlB,EAAA,EAAA,QAAA,GAAA,UAMA,EAAA,EAAA,MAAA,GAAA,QAKA,EAAA,EAAA,QAAA,KAAA,UAKA,EAAA,EAAA,MAAA,QAAA,UArBU,GAAA,GAAQ,KCTpB,MAAuB,OCmFvB,GAAY,GAAZ,AAAA,UAAY,EAAQ,CAIlB,EAAA,EAAA,OAAA,GAAA,SAOA,EAAA,EAAA,QAAA,GAAA,UAMA,EAAA,EAAA,MAAA,GAAA,QAMA,EAAA,EAAA,KAAA,GAAA,OAOA,EAAA,EAAA,YAAA,GAAA,cAOA,EAAA,EAAA,cAAA,GAAA,kBArCU,GAAA,GAAQ,KA4CpB,GAAY,GAAZ,AAAA,UAAY,EAAe,CAIzB,EAAA,EAAA,UAAA,GAAA,YAKA,EAAA,EAAA,SAAA,GAAA,aATU,GAAA,GAAe,KAe3B,GAAY,GAAZ,AAAA,UAAY,EAAc,CAIxB,EAAA,EAAA,UAAA,GAAA,YAKA,EAAA,EAAA,OAAA,GAAA,SAKA,EAAA,EAAA,MAAA,GAAA,QAKA,EAAA,EAAA,YAAA,GAAA,gBAnBU,GAAA,GAAc,KC9I1B,OAAuB,OAcjB,aAAuB,QAAI,GAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GAC/B,GAAM,GAAwC,AAAM,eAClD,SAAC,EAAQ,CAEL,EAAyD,QAAU,EAErE,OAAkB,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAM,CAAnB,GAAM,GAAG,EAAA,GACZ,AAAI,MAAO,IAAQ,WACjB,EAAI,GACK,GAEP,GAA8C,QAAU,KAG/D,GAEG,IAGN,MAAO,GAnBO,sBFRhB,GAAM,IAAgB,IAMhB,GAAY,UACZ,GAAa,cAEnB,YACE,EACA,EAA+C,CAMvC,GAAA,GAA+C,EAAK,qBAA9B,EAAyB,EAAK,OAAtB,EAAiB,EAAK,QAAb,EAAQ,EAAK,IAEtD,EAA4B,AAAM,WAAyB,EAAe,WAAzE,EAAS,EAAA,GAAE,EAAY,EAAA,GAG9B,AAAM,kBAAgB,UAAA,CAGpB,EAAa,EAAe,YAC3B,CAAC,IAGJ,AAAM,YAAU,UAAA,CACd,GAAI,IAAc,EAAe,UAAW,CAK1C,GAAM,GAAoB,EAAa,QAClC,GAAO,EAAa,QAAQ,aAAe,GAAK,EAAa,QAAQ,cAAgB,GACrF,EAAa,QAAQ,UAAY,GAAU,KAAK,GACjD,GAEJ,AAAI,GACF,EAAa,EAAe,WAKlC,AAAM,YAAU,UAAA,CACd,GAAoB,MAApB,EAAuB,IAEtB,CAAC,IAEJ,GAAM,GAAgB,AAAM,cAC1B,SAAC,EAA0C,CACzC,GAAM,MAAN,EAAS,GACL,GACF,EAAa,EAAe,SAGhC,CAAC,EAAK,IAGF,EAAe,AAAM,cACzB,SAAC,EAA0C,CACzC,GAAO,MAAP,EAAU,GACV,EAAa,EAAe,QAE9B,CAAC,IAGH,MAAO,CAAC,EAAW,EAAe,GA5D3B,qBA+DF,GAAM,IAAkD,AAAM,aACnE,SAAC,EAAO,EAAY,CAClB,GAAM,GAAe,AAAM,WACrB,EAAe,AAAM,WACrB,EAA2C,GAAa,EAAO,GAA9D,EAAS,EAAA,GAAE,EAAa,EAAA,GAAE,EAAY,EAAA,GAEvC,EAAa,EAA0D,EAAO,GAAe,CACjG,QACA,WAGA,EAaE,EAAK,IAZP,EAYE,EAAK,IAXP,EAWE,EAAK,MAVP,EAUE,EAAK,OATP,EASE,EAAK,aATP,EAAY,IAAA,OAAG,GAAI,EACnB,EAQE,EAAK,mBAPP,EAOE,EAAK,UANP,EAME,EAAK,SALP,EAKE,EAAK,KAJP,EAIE,EAAK,cAHP,EAGE,EAAK,OAFP,EAEE,EAAK,MADP,EACE,EAAK,QACH,EAAa,GAAc,EAAO,EAAW,EAAc,GAC3D,EAAa,GAAc,EAAS,CACxC,MAAO,EACP,UAAS,EACT,MAAK,EACL,OAAM,EACN,cAAa,EACb,aAAY,EACZ,mBAAkB,EAClB,SACE,IAAc,EAAe,QAAW,IAAc,EAAe,WAAa,EAAM,mBAC1F,YAAa,IAAe,EAAgB,UAC5C,SAAU,IAAa,EAAS,OAChC,gBAAiB,IAAa,EAAS,cACvC,cAAe,IAAa,EAAS,YACrC,UAAW,IAAa,EAAS,QACjC,QAAS,IAAa,EAAS,MAC/B,OAAQ,IAAa,EAAS,KAC9B,QAAS,IAAc,EAAe,MACtC,cAAe,IAAa,SAI9B,MACE,AAAA,iBAAA,MAAA,CAAK,UAAW,EAAW,KAAM,MAAO,CAAE,MAAO,EAAO,OAAQ,GAAU,IAAK,GAC7E,AAAA,gBAAA,MAAA,EAAA,GACM,EAAU,CACd,OAAQ,EACR,QAAS,EACT,IAAK,GAAa,EAAM,KAAO,GAC/B,UAAW,EAAW,MACtB,IAAK,GAAc,EAAc,GACjC,IAAK,EACL,IAAK,EACL,KAAM,EACN,QAAS,QAMnB,GAAU,YAAc,YAExB,YACE,EACA,EACA,EACA,EAA6C,CAE7C,GAAM,GAAoB,AAAM,SAAO,GACjC,EAAa,AAAM,WAEzB,MACE,KAAe,QACd,EAAkB,UAAY,EAAe,WAAa,IAAc,EAAe,SAExF,GAAW,QAAU,GAAkB,EAAO,EAAW,EAAc,IAGzE,EAAkB,QAAU,EAErB,EAAW,QAlBX,sBAqBT,YACE,EACA,EACA,EACA,EAA6C,CAErC,GAAA,GAA4B,EAAK,SAAvB,EAAkB,EAAK,MAAhB,EAAW,EAAK,OAGzC,GAAI,EAAM,aAAe,OACvB,MAAO,GAAM,WACR,GACL,IAAc,EAAe,QAC5B,KAAa,EAAS,OACrB,IAAa,EAAS,SACtB,IAAa,EAAS,eACtB,IAAa,EAAS,cACxB,EAAa,SACb,EAAa,QACb,CAGA,GAAI,GAAY,OAChB,AACE,MAAO,IAAU,UACjB,MAAO,IAAW,UAClB,IAAa,EAAS,eACtB,IAAa,EAAS,YAEtB,EAAe,EAAQ,EAEvB,EAAe,EAAa,QAAQ,YAAc,EAAa,QAAQ,aAIzE,GAAM,GAAe,EAAa,QAAQ,aAAe,EAAa,QAAQ,cAG9E,GAAI,EAAe,EACjB,MAAO,GAAgB,UAG3B,MAAO,GAAgB,SA1ChB,0BG/JH,YAA0C,EAAS,CACvD,GAAI,GAAyC,gBAEpC,EAAS,CAChB,GAAI,EAAO,eAAe,GAAY,CACpC,GAAI,GAEJ,OAAO,eAAe,EAAS,EAAW,CACxC,IAAK,UAAA,CACH,MAAI,KAAc,QAEhB,GAAY,GAAY,EAAO,IAAmB,YAE7C,GAET,WAAY,GACZ,aAAc,kBAbpB,OAAS,KAAa,KAAb,GAkBT,MAAO,GArBO,sBCiDhB,GAAM,IAAoB,QAEpB,EAAgB,GAAe,SAAuB,GAAmB,CAC7E,UAAW,CACT,gBAAiB,GACjB,mBAAoB,IAEtB,WAAY,KAIR,GAAa,GAAW,cAE9B,AAAI,IAAc,GAAW,SAC3B,GAAW,QAAQ,UAAA,CACjB,OAAW,KAAQ,GACjB,AAAI,EAAc,eAAe,IAAS,CAAC,CAAE,EAAc,GAAsB,QAC9E,GAAc,GAAsB,OAAO,UAAY,UAahE,GAAM,IAAoB,WAAC,EAAY,CAAa,MAAA,GAAK,eAA/B,qBAOpB,YAAwB,EAAyB,EAA+B,CACpF,GAAI,GAAM,EAAA,EAAA,GACL,GAAU,CACb,aAAc,GACd,UAAW,SAEP,EAAU,EAAU,MAG1B,EAAU,EAAS,EAAA,EAAA,GAAM,EAAc,WAAc,GAAY,EAAc,UAE/E,OAAW,KAAY,GACrB,GAAI,EAAM,eAAe,GAAW,CAClC,GAAM,GAAO,EAAM,GACb,EAAqB,GAAkB,GAE7C,AAAI,EAAc,GAChB,GAAmB,GAEnB,EAAc,GAAsB,CAClC,KAAI,EACJ,OAAM,IArBA,sBAgEV,YAA4B,EAAkB,EAAoB,CACtE,EAAc,WAAW,GAAkB,IAAa,GAAkB,GAD5D,0BAWV,YAAkB,EAAa,CACnC,GAAI,GAAgC,OAC9B,EAAU,EAAc,UAK9B,GAHA,EAAO,EAAO,GAAkB,GAAQ,GACxC,EAAO,EAAc,WAAW,IAAS,EAErC,EAGF,GAFA,EAAO,EAAc,GAEjB,EAAM,CACF,GAAA,GAAW,EAAI,OACrB,AAAI,GAAU,EAAO,UACd,GAAO,cACV,IAAS,EAAO,UAChB,EAAO,aAAe,IAGnB,EAAO,WACV,GAAO,UAAY,GAAY,EAAO,MAAO,CAC3C,WAAY,EAAO,SAAS,WAC5B,WAAY,EAAO,SAAS,YAAc,SAC1C,UAAW,EAAO,SAAS,WAAa,iBAM9C,AAAI,CAAC,EAAQ,iBAAmB,EAAQ,oBACtC,EACE,aAAa,EAAI,mHAMzB,MAAO,GApCO,gBAmDhB,GAAI,GAA0B,GAC1B,GAAyC,OAE7C,YAA4B,EAAgB,CAC1C,GAAM,GAAU,EAAc,UACxB,EAAe,IACf,EAAoB,GAE1B,AAAK,EAAQ,iBACX,GAAc,KAAK,GACf,KAAuB,QACzB,IAAqB,WAAW,UAAA,CAC9B,EACE;EAGE,EAAc,MAAM,EAAG,GAAmB,KAAK,MAC9C,GAAc,OAAS,EAAoB,OAAO,GAAc,OAAS,GAAiB,SAAW,KAE1G,GAAqB,OACrB,EAAgB,IACf,KAlBA,2BCxNF,GAAM,GAAoE,GAAc,ICF/F,GAAM,IAAmB,CACvB,KAAM,WACN,kBAAmB,0BACnB,MAAO,iBACP,YAAa,yBACb,aAAc,0BACd,WAAY,wBACZ,mBAAoB,gCACpB,iBAAkB,8BAClB,UAAW,uBACX,eAAgB,4BAChB,cAAe,4BAGJ,GAAY,WAAC,EAAuB,CAE7C,GAAA,GAiBE,EAAK,UAhBP,EAgBE,EAAK,MAfP,EAeE,EAAK,OAdP,EAcE,EAAK,cAbP,EAaE,EAAK,SAZP,EAYE,EAAK,aAXP,EAWE,EAAK,mBAVP,EAUE,EAAK,YATP,EASE,EAAK,SARP,EAQE,EAAK,UAPP,EAOE,EAAK,QANP,EAME,EAAK,gBALP,EAKE,EAAK,cAJP,EAIE,EAAK,OAHP,EAGE,EAAK,QAFP,EAEE,EAAK,cADP,EACE,EAAK,MAEH,EAAa,GAAoB,GAAkB,GAEnD,EAAyB,CAC7B,SAAU,WACV,KAAM,oBACN,IAAK,MACL,UAAW,wBAIP,EAA6B,KAC7B,EAA6B,IAAW,QAAa,EAAO,UAAU,mBAAqB,OAC3F,EACH,GAAa,GAAiB,GAAW,CAAC,EACvC,CAAE,MAAO,OAAQ,OAAQ,QACzB,CAAE,MAAO,OAAQ,OAAQ,QAE/B,MAAO,CACL,KAAM,CACJ,EAAW,KACX,EAAM,MAAM,OACZ,CACE,SAAU,UAEZ,GAAiB,CACf,EAAW,kBACX,CACE,OAAQ,OACR,MAAO,SAGX,GAAY,GAAgB,CAAC,GAAsB,EAAoB,UACtE,IAAY,GAAa,GAAW,GAAmB,IAAkB,CACxE,SAAU,YAEZ,GAEF,MAAO,CACL,EAAW,MACX,CACE,QAAS,QACT,QAAS,GAEX,GAAY,CACV,YACA,CACE,QAAS,IAGb,GAAY,CAAC,EAAW,YAAa,GACrC,GAAa,CACX,EAAW,aACX,GAAqB,CACnB,MAAO,OACP,OAAQ,OACR,UAAW,WAEb,CAAC,GAAqB,EACtB,CAAC,GAAqB,GAExB,GAAW,CACT,EAAW,WACX,GAAqB,CACnB,MAAO,OACP,OAAQ,OACR,UAAW,SAEb,CAAC,GAAqB,EACtB,CAAC,GAAqB,GAExB,GAAmB,CACjB,EAAW,mBACX,GAAe,CACb,SAAU,QAEZ,CAAC,GAAe,CACd,UAAW,QAEb,GAEF,GAAiB,CACf,EAAW,iBACX,GAAe,CACb,UAAW,QAEb,CAAC,GAAe,CACd,SAAU,QAEZ,GAEF,GAAU,CACR,EAAW,UACX,CACE,MAAO,OACP,OAAQ,SAGZ,GAAiB,CACf,CAAC,CAAC,GACA,CAAC,GAAU,CACT,OAAQ,OACR,MAAO,QAEX,CAAC,GACC,CAAC,CAAC,GAAU,CACV,OAAQ,OACR,MAAO,QAEX,CAAC,CAAC,GACA,CAAC,CAAC,GAAU,CACV,OAAQ,OACR,MAAO,SAGb,GAAe,EAAW,eAC1B,CAAC,GAAe,EAAW,cAC3B,CAAC,GAAY,eACb,GAAgB,YAChB,GAAW,cA3IQ,aCblB,GAAM,IAA8C,EACzD,GACA,GACA,OACA,CACE,MAAO,SAET,IAEF,GAAM,YAAc,QCfpB,OAAuB,OCIhB,GAAM,GAAa,GAAe,CACvC,KAAM,CACJ,QAAS,gBAEX,YAAa,CACX,sBACA,CACE,MAAO,QAGX,MAAO,CACL,yBACA,CACE,SAAU,aAKH,GAAU,UAEV,GAAY,WAAC,EAAsB,CACtC,GAAA,GAA6D,EAAK,UAAvD,EAAkD,EAAK,cAAxC,EAAmC,EAAK,cAAzB,EAAoB,EAAK,QAAhB,EAAW,EAAK,OAE1E,MAAO,CACL,KAAM,CACJ,GAAiB,EAAW,YAC5B,EAAW,KACX,GAAW,EAAW,MACtB,EACA,EACA,GAAU,EAAO,KAEjB,GAAU,EAAO,kBAZE,aDVlB,GAAM,IAAiB,GAC5B,SAAC,EAAiB,CACV,GAAA,GAAuF,GAAQ,IAAa,CAChH,OAAQ,GACR,KAAM,QAFA,EAAI,EAAA,KAAE,EAAM,EAAA,OAKpB,MAAK,GAIE,CACL,SAAU,EACV,cAAe,EAAO,UACtB,WAAY,EAAO,UAAY,EAAO,SAAS,WAC/C,gBAAiB,EAAO,iBAPjB,MAUX,OACA,IAQW,GAAoD,WAAA,EAAK,CAC5D,GAAA,GAAoC,EAAK,SAA/B,EAA0B,EAAK,UAApB,EAAe,EAAK,MAApB,EAAK,IAAA,OAAG,GAAE,EACjC,EAAc,GAAe,IAAa,GACxC,EAAyD,EAAW,cAArD,EAA0C,EAAW,SAA3C,EAAgC,EAAW,WAA/B,EAAoB,EAAW,gBAEtE,EAAc,EAAkD,EAAO,IACvE,EAAiB,EAAM,eAAiB,EAAM,MAC9C,EACJ,EAAM,eAAiB,EAAM,oBAAsB,EAAM,MACrD,CACE,KAAM,EAAkB,OAAY,OAEtC,CACE,cAAe,IAGnB,EAAgB,EAEpB,MAAI,IACE,MAAO,IAAa,UAAY,MAAO,GAAS,OAAU,UAAY,GACxE,GAAgB,AAAM,gBAAa,EAAU,CAAE,IAAK,KAKtD,AAAA,iBAAA,IAAA,EAAA,CAAA,iBACkB,GACZ,EACA,EACC,EACD,CACE,MAAO,OACP,aAAc,QAEhB,GAAG,CACP,UAAW,GAAI,GAAS,EAAW,KAAM,EAAe,CAAC,GAAY,EAAW,YAAa,GAG7F,MAAK,EAAA,CAAI,WAAU,GAAK,KAEvB,IAxC0D,YAoDpD,GAAc,GAAgB,SAAC,EAAkB,EAAoB,EAAkB,CAClG,MAAO,IAAS,CAAE,SAAQ,EAAE,UAAS,EAAE,aAAc,MVhFvD,GAAM,IAAgB,EAAiD,CAIrE,UAAW,MAGb,GAAA,SAAA,EAAA,CAA8B,GAAA,EAAA,GAC5B,WAAY,EAAiB,CAA7B,GAAA,GACE,EAAA,KAAA,KAAM,IAAM,KA8EN,SAAA,2BAA6B,SAAC,EAAqB,CACzD,AAAI,EAAK,MAAM,YAAc,EAAK,MAAM,WAAW,sBACjD,EAAK,MAAM,WAAW,qBAAqB,GAEzC,IAAU,EAAe,OAC3B,EAAK,SAAS,CAAE,eAAgB,MAlFlC,EAAK,MAAQ,CACX,eAAgB,MAHpB,uBAOO,EAAA,UAAA,OAAP,UAAA,CACQ,GAAA,GAAiE,KAAK,MAApE,EAAQ,EAAA,SAAE,EAAS,EAAA,UAAE,EAAM,EAAA,OAAE,EAAQ,EAAA,SAAE,EAAY,EAAA,aAAE,EAAK,EAAA,MAC5D,EAAgB,MAAO,IAAa,UAAY,EAAS,SAAW,EACpE,EAEJ,CAAC,CAAC,KAAK,MAAM,YAAc,KAAK,MAAM,WAAa,EAAS,OAAS,KAAK,MAAM,WAAa,EAAS,MAClG,EAAc,GAAe,IAAa,GACxC,EAAkE,EAAW,cAApD,EAAyC,EAAW,SAA/B,EAAoB,EAAW,gBAE/E,EAAa,GAAc,EAAQ,CACvC,MAAO,EACP,UAAS,EACT,cAAa,EACb,QAAO,EACP,cAAa,IAGT,EAAW,EAAU,OAAS,IAC9B,EAAc,EAAqD,KAAK,MAAO,GAAuB,CAC1G,eAEM,EAAmB,KAAK,MAAK,eAC/B,EAAU,EAAA,EAAA,GACX,KAAK,MAAM,YAAU,CACxB,qBAAsB,KAAK,6BAEvB,EAAa,GAAkB,GAAiB,GAGhD,EAAY,KAAK,MAAM,eAAiB,KAAK,MAAM,UACnD,EAAiB,EAAW,KAAO,GAAa,KAAK,MAAM,MAC3D,EAAU,CAAC,CACf,IACA,KAAK,MAAM,oBACX,EAAW,eACX,EAAW,oBAEP,EAAiB,EACnB,CACE,KAAM,GAAW,EAAkB,OAAY,MAC/C,aAAc,GAAW,EAAkB,OAAY,GAEzD,CACE,cAAe,IAGjB,EAA2B,EAE/B,MAAI,IAAmB,GAAuB,MAAO,IAAwB,UAAY,GACvF,GAA2B,AAAM,eAAa,EAAqB,CACjE,IAAK,KAKP,AAAA,gBAAC,EAAQ,EAAA,CAAA,iBACS,GACZ,EACA,EACC,EACD,CACE,MAAO,OACP,aAAc,QAEhB,GAAG,CACP,UAAW,EAAW,OAErB,EAAU,AAAA,gBAAC,EAAS,EAAA,GAAK,IAAiB,GAAY,IAa/D,GAxFoC,aYV7B,GAAM,IAA4C,EACvD,GACA,GACA,OACA,CACE,MAAO,QAET,IAEF,GAAK,YAAc,OCpBnB,MAAuB,OAwBvB,GAAM,IAAgB,IAgChB,GAAsB,GACtB,EAAiB,YAEjB,GAAmB,SACnB,GAAiB,OAEvB,GAAA,SAAA,EAAA,CACU,GAAA,EAAA,GAsBR,WAAmB,EAAsB,CAAzC,GAAA,GACE,EAAA,KAAA,KAAM,IAAM,KAPN,EAAA,aAAe,AAAM,cAuTrB,EAAA,SAAW,SAAC,EAA4D,CAC9E,AAAI,EAAK,MAAM,SACb,EAAK,MAAM,QAAQ,GAGrB,EAAK,SAAS,CAAE,UAAW,IAAQ,UAAA,CACjC,AAAI,EAAK,MAAM,mBACb,EAAK,UAAU,EAAK,UAKlB,EAAA,QAAU,SAAC,EAA4D,CAC7E,AAAI,EAAK,MAAM,QACb,EAAK,MAAM,OAAO,GAGpB,EAAK,SAAS,CAAE,UAAW,IAAS,UAAA,CAClC,AAAI,EAAK,MAAM,oBACb,EAAK,UAAU,EAAK,UAKlB,EAAA,eAAiB,SAAC,EAAsB,CACtC,GAAA,GAAoB,EAAK,MAAlB,EAAa,EAAK,SAE3B,EAAc,EAAK,YAAY,mBAChC,EAAK,YAAY,mBAAmB,MACrC,OAEJ,MAAI,GAEA,AAAA,gBAAC,GAAK,CAAC,SAAU,EAAU,QAAS,EAAK,IAAK,OAAQ,EAAa,SAAU,EAAM,SAAU,GAAI,EAAK,UACnG,EAAM,OAIN,MAGD,EAAA,qBAAuB,SAAC,EAAsB,CACpD,MAAI,GAAM,YACD,AAAA,gBAAA,OAAA,CAAM,UAAW,EAAK,YAAY,aAAc,EAAM,aAExD,MA6GD,EAAA,qBAAuB,SAAC,EAA0C,CACxE,EAAK,SAAS,SAAA,EAAS,CAAI,MAAC,CAAE,oBAAqB,CAAC,EAAU,wBAGxD,EAAA,eAAiB,SAAC,EAA8D,SAShF,EAAU,EAAM,OAChB,EAAQ,EAAQ,MAKhB,EAAgB,GAAU,EAAK,MAAO,EAAK,QAAU,GAC3D,GAAI,IAAU,QAAa,IAAU,EAAK,kBAAoB,IAAU,EAAe,CACrF,EAAK,iBAAmB,OACxB,OAEF,EAAK,iBAAmB,EAExB,GAAA,GAAA,EAAK,OAAM,YAAQ,MAAA,IAAA,QAAA,EAAA,KAAA,EAAG,EAAO,GAExB,EAAK,eAGR,EAAK,SAAS,CAAE,kBAAmB,KAverC,GAAuB,GACvB,EAAK,OAAS,GAAI,IAAM,GAGtB,GAAsB,EAAgB,EAAO,CAC3C,aAAc,sBAIlB,EAAK,YAAc,GAAM,GACzB,EAAK,eAAiB,GAAM,EAAiB,eAC7C,EAAK,SAAW,GAAM,EAAiB,SAEvC,EAAK,uBAEC,GAAA,GAAuC,EAAK,aAA5C,EAAY,IAAA,OAAG,GAAmB,EACxC,MAAI,OAAO,IAAiB,UAE1B,GAAe,OAAO,IAExB,EAAK,MAAQ,CACX,kBAAmB,EAAK,cAAgB,OAAY,EACpD,UAAW,GACX,aAAc,IAGhB,EAAK,iBAAmB,EAAK,OAAO,SAAS,EAAK,UAAW,EAAK,MAAM,wBACxE,EAAK,gBAAkB,IA9BzB,4BAoCA,OAAA,eAAW,EAAA,UAAA,QAAK,KAAhB,UAAA,CACE,MAAO,IAAU,KAAK,MAAO,KAAK,wCAG7B,EAAA,UAAA,kBAAP,UAAA,CACE,KAAK,qBAED,KAAK,MAAM,gBACb,KAAK,UAAU,KAAK,QAIjB,EAAA,UAAA,qBAAP,UAAA,CACE,KAAK,OAAO,WAGP,EAAA,UAAA,wBAAP,SAA+B,EAA4B,EAA0B,CACnF,MAAO,CACL,UAAW,CAAC,KAAK,eAAgB,KAAK,gBAInC,EAAA,UAAA,mBAAP,SACE,EACA,EACA,EAA4B,CAE5B,GAAM,GAAQ,KAAK,MACX,EAA6B,IAAY,IAAE,UAA3C,EAAS,IAAA,OAAG,CAAC,KAAM,MAAK,EACzB,EAAc,EAAS,GAAhB,EAAO,EAAS,GAE9B,AAAI,CAAC,CAAC,EAAU,WAAc,CAAC,CAAC,EAAM,WAAa,EAAU,WAG3D,MAAK,QACD,IAAU,MAAQ,IAAQ,MAAQ,GAAS,GAAK,GAAO,GACzD,KAAK,kBAAkB,EAAO,IAI9B,EAAU,QAAU,EAAM,OAI5B,MAAK,iBAAmB,QAG1B,GAAM,GAAY,GAAU,EAAW,GACjC,EAAQ,KAAK,MACnB,AAAI,IAAc,GAEhB,MAAK,qBAAqB,GAItB,KAAK,MAAM,cAAgB,CAAC,EAAM,cACpC,KAAK,SAAS,CAAE,aAAc,KAIhC,KAAK,qBAKD,GAA0B,IAC5B,KAAK,iBAAiB,KAKrB,EAAA,UAAA,OAAP,UAAA,CACQ,GAAA,GAwBF,KAAK,MAvBP,EAAU,EAAA,WACV,EAAS,EAAA,UACT,EAAQ,EAAA,SACR,EAAO,EAAA,QACP,EAAS,EAAA,UACT,EAAc,EAAA,eACd,EAAK,EAAA,MACL,EAAS,EAAA,UACT,EAAQ,EAAA,SACR,EAAU,EAAA,WACV,EAAM,EAAA,OACN,EAAS,EAAA,UACT,EAAM,EAAA,OACN,EAAK,EAAA,MACL,EAAM,EAAA,OACN,EAAgB,EAAA,iBAChB,EAAiB,EAAA,kBACjB,EAAuB,EAAA,wBACvB,EAAI,EAAA,KACJ,EAAA,EAAA,eAAA,EAAc,IAAA,OAAG,KAAK,gBAAe,EACrC,EAAA,EAAA,eAAA,EAAc,IAAA,OAAG,KAAK,gBAAe,EACrC,EAAA,EAAA,cAAA,GAAa,IAAA,OAAG,KAAK,eAAc,EACnC,EAAA,EAAA,oBAAA,GAAmB,IAAA,OAAG,KAAK,qBAAoB,EAE3C,EAAqC,KAAK,MAAxC,EAAS,EAAA,UAAE,EAAmB,EAAA,oBAChC,GAAe,KAAK,cACpB,GAAY,MAAO,IAAY,UAAY,EAAU,CAAC,CAAC,GAEvD,GAAkB,CAAC,CAAC,GAAqB,IAAS,YAAc,KAEhE,EAAc,KAAK,YAAc,GAAc,EAAS,CAC5D,MAAO,EACP,UAAS,EACT,SAAQ,EACR,QAAS,EACT,SAAQ,EACR,UAAS,EACT,SAAU,CAAC,CAAC,EACZ,gBAAiB,GACjB,WAAU,EACV,UAAS,EACT,QAAS,CAAC,CAAC,EACX,WAAU,EACV,eAAc,EACd,iBAAgB,EAChB,gBAAe,KAGjB,MAEE,AAAA,iBAAA,MAAA,CAAK,IAAK,KAAK,MAAM,WAAY,UAAW,EAAW,MACrD,AAAA,gBAAA,MAAA,CAAK,UAAW,EAAW,SACxB,GAAc,KAAK,MAAO,KAAK,gBAChC,AAAA,gBAAA,MAAA,CAAK,UAAW,EAAW,YACvB,KAAW,QAAa,KAAK,MAAM,iBACnC,AAAA,gBAAA,MAAA,CAAK,UAAW,EAAW,QAAS,EAAe,KAAK,MAAO,KAAK,kBAErE,EAAY,KAAK,kBAAoB,KAAK,eAC1C,GAAa,AAAA,gBAAC,GAAI,EAAA,CAAC,UAAW,EAAW,MAAU,IACnD,IAEC,AAAA,gBAAA,SAAA,CAAA,aACc,EACZ,UAAW,EAAW,aACtB,QAAS,KAAK,qBAAoB,eACpB,CAAC,CAAC,EAChB,KAAK,UAEL,AAAA,gBAAA,OAAA,CAAM,UAAW,EAAW,YAC1B,AAAA,gBAAC,GAAI,CACH,UAAW,EAAW,WACtB,SAAU,EAAsB,GAAiB,OAKvD,KAAW,QAAa,KAAK,MAAM,iBACnC,AAAA,gBAAA,MAAA,CAAK,UAAW,EAAW,QAAS,EAAe,KAAK,MAAO,KAAK,oBAIzE,KAAK,yBACJ,AAAA,gBAAA,OAAA,CAAM,GAAI,KAAK,gBACZ,GAAoB,KAAK,MAAO,KAAK,sBACrC,IACC,AAAA,gBAAA,MAAA,CAAK,KAAK,SACR,AAAA,gBAAC,GAAa,KAAE,KAAK,2BAY5B,EAAA,UAAA,MAAP,UAAA,CACE,AAAI,KAAK,aAAa,SACpB,KAAK,aAAa,QAAQ,SAOvB,EAAA,UAAA,KAAP,UAAA,CACE,AAAI,KAAK,aAAa,SACpB,KAAK,aAAa,QAAQ,QAOvB,EAAA,UAAA,OAAP,UAAA,CACE,AAAI,KAAK,aAAa,SACpB,KAAK,aAAa,QAAQ,UAOvB,EAAA,UAAA,kBAAP,SAAyB,EAAa,CACpC,AAAI,KAAK,aAAa,SACpB,MAAK,aAAa,QAAQ,eAAiB,IAOxC,EAAA,UAAA,gBAAP,SAAuB,EAAa,CAClC,AAAI,KAAK,aAAa,SACpB,MAAK,aAAa,QAAQ,aAAe,IAO7C,OAAA,eAAW,EAAA,UAAA,iBAAc,KAAzB,UAAA,CACE,MAAO,MAAK,aAAa,QAAU,KAAK,aAAa,QAAQ,eAAiB,oCAMhF,OAAA,eAAW,EAAA,UAAA,eAAY,KAAvB,UAAA,CACE,MAAO,MAAK,aAAa,QAAU,KAAK,aAAa,QAAQ,aAAe,oCAQvE,EAAA,UAAA,kBAAP,SAAyB,EAAe,EAAW,CACjD,AAAI,KAAK,aAAa,SACnB,KAAK,aAAa,QAA6B,kBAAkB,EAAO,IAIrE,EAAA,UAAA,qBAAR,SAA6B,EAA2B,CAEtD,GAAoB,CAClB,YAAa,KAAK,IAClB,cAAe,EACf,MAAO,KAAK,MACZ,SAAU,EACV,UAAW,QACX,iBAAkB,eAClB,aAAc,WACd,aAAc,aAGZ,KAAK,MAAM,QAAU,MAAQ,CAAC,KAAK,qBACrC,MAAK,oBAAsB,GAC3B,EACE,6BAA6B,EAAc,qIAOjD,OAAA,eAAY,EAAA,UAAA,MAAG,KAAf,UAAA,CACE,MAAO,MAAK,MAAM,IAAM,KAAK,6CAG/B,OAAA,eAAY,EAAA,UAAA,gBAAa,KAAzB,UAAA,CACE,MAAO,IAAa,KAAK,MAAO,0CAmD1B,EAAA,UAAA,gBAAR,SAAwB,EAAsB,CACpC,GAAA,GAAW,EAAK,OACxB,MAAO,AAAA,iBAAA,OAAA,CAAM,MAAO,CAAE,cAAe,QAAU,IAGzC,EAAA,UAAA,gBAAR,SAAwB,EAAsB,CACpC,GAAA,GAAW,EAAK,OACxB,MAAO,AAAA,iBAAA,OAAA,CAAM,MAAO,CAAE,cAAe,QAAU,IASjD,OAAA,eAAY,EAAA,UAAA,gBAAa,KAAzB,UAAA,CACU,GAAA,GAA2C,KAAK,MAAK,aAArD,EAAY,IAAA,OAAG,KAAK,MAAM,aAAY,EAC9C,MAAO,IAAgB,oCASjB,EAAA,UAAA,oBAAR,UAAA,CACE,GAAM,GAAe,KAAK,cAE1B,MAAO,GACL,MAAO,IAAiB,SACtB,AAAA,gBAAA,IAAA,CAAG,UAAW,KAAK,YAAY,cAC7B,AAAA,gBAAA,OAAA,CAAA,qBAAyB,iBAAiB,IAG5C,AAAA,gBAAA,MAAA,CAAK,UAAW,KAAK,YAAY,aAAY,qBAAqB,iBAC/D,GAGH,MAON,OAAA,eAAY,EAAA,UAAA,0BAAuB,KAAnC,UAAA,CACE,GAAM,GAAQ,KAAK,MACnB,MAAO,CAAC,CAAE,GAAM,qBAAuB,EAAM,aAAe,KAAK,gDAG3D,EAAA,UAAA,gBAAR,UAAA,CACU,GAAA,GAAmC,KAAK,MAAK,QAA7C,EAAO,IAAA,OAAG,CAAC,CAAC,KAAK,cAAa,EAChC,EAAgB,EACpB,KAAK,MACL,GACA,CAAC,iBAEG,EAAiB,KAAK,MAAM,oBAAuB,MAAK,MAAM,MAAQ,KAAK,SAAW,QAC5F,MACE,AAAA,iBAAA,WAAA,EAAA,CACE,GAAI,KAAK,KACL,EAAa,CACjB,IAAK,KAAK,aACV,MAAO,KAAK,OAAS,GACrB,QAAS,KAAK,eACd,SAAU,KAAK,eACf,UAAW,KAAK,YAAY,MAAK,kBAChB,EAAc,mBACb,KAAK,wBAA0B,KAAK,eAAiB,KAAK,MAAM,oBAAmB,eACvF,EAAO,aACT,KAAK,MAAM,UACvB,SAAU,KAAK,MAAM,SACrB,QAAS,KAAK,SACd,OAAQ,KAAK,YAKX,EAAA,UAAA,aAAR,UAAA,CACQ,GAAA,GAAsE,KAAK,MAAzE,EAAS,EAAA,UAAE,EAAA,EAAA,QAAA,EAAO,IAAA,OAAG,CAAC,CAAC,KAAK,cAAa,EAAE,EAAA,EAAA,KAAA,EAAI,IAAA,OAAG,OAAM,EAAE,EAAK,EAAA,MACjE,EAAU,EAAA,EAAA,CACd,KAAM,KAAK,MAAM,oBAAsB,OAAS,EAChD,GAAI,KAAK,KACN,EAAe,KAAK,MAAO,GAAiB,CAAC,eAAgB,UAAQ,CACxE,kBAAmB,KAAK,MAAM,oBAAuB,GAAQ,KAAK,SAAW,QAC7E,IAAK,KAAK,aACV,MAAO,KAAK,OAAS,GACrB,QAAS,KAAK,eACd,SAAU,KAAK,eACf,UAAW,KAAK,YAAY,MAC5B,aAAc,EACd,mBAAoB,KAAK,wBAA0B,KAAK,eAAiB,KAAK,MAAM,oBACpF,eAAgB,EAChB,QAAS,KAAK,SACd,OAAQ,KAAK,UAGT,EAAgB,WAAC,EAA8D,CACnF,MAAO,AAAA,iBAAA,QAAA,EAAA,GAAW,KADE,iBAGhB,EAAgB,KAAK,MAAM,eAAiB,EAClD,MAAO,GAAc,EAAY,IAsC3B,EAAA,UAAA,UAAR,SAAkB,EAAyB,CAA3C,GAAA,GAAA,KAEE,GAAI,OAAK,uBAAyB,GAAS,GAA0B,KAAK,QAI1E,MAAK,qBAAuB,EAC5B,GAAM,GAAoB,KAAK,MAAM,kBAC/B,EAAS,GAAqB,EAAkB,GAAS,IAE/D,GAAI,IAAW,OACb,GAAI,MAAO,IAAW,UAAY,CAAE,SAAU,IAC5C,KAAK,SAAS,CAAE,aAAc,IAC9B,KAAK,qBAAqB,EAAO,OAC5B,CACL,GAAM,GAA4B,EAAE,KAAK,gBAEzC,EAAO,KAAK,SAAC,EAAkC,CAC7C,AAAI,IAAsB,EAAK,iBAC7B,EAAK,SAAS,CAAE,aAAY,IAE9B,EAAK,qBAAqB,EAAO,SAIrC,MAAK,qBAAqB,EAAO,MAI7B,EAAA,UAAA,qBAAR,SAA6B,EAA2B,EAAkC,CACxF,AAAI,IAAU,KAAK,OAAS,KAAK,MAAM,0BACrC,KAAK,MAAM,yBAAyB,EAAc,IAI9C,EAAA,UAAA,mBAAR,UAAA,CACE,GAAI,KAAK,aAAa,SAAW,KAAK,MAAM,kBAAoB,KAAK,MAAM,UAAW,CACpF,GAAM,GAAY,KAAK,aAAa,QACpC,EAAU,MAAM,OAAS,GACzB,EAAU,MAAM,OAAS,EAAU,aAAe,OAziBxC,EAAA,aAAgC,CAC5C,UAAW,GACX,uBAAwB,IACxB,eAAgB,IAyiBpB,GA9iBgB,aAijBhB,YAAmB,EAAwB,EAAsB,CACvD,GAAA,GAAoC,EAAK,MAAzC,EAAK,IAAA,OAAG,EAAM,kBAAiB,EACvC,MAAI,OAAO,IAAU,SAEZ,OAAO,GAET,EANA,kBAaT,YAAmC,EAAsB,CACvD,MAAO,CAAE,GAAM,mBAAqB,EAAM,oBADnC,kCAKT,GAAI,IAEJ,aAAkC,CAChC,GAAI,MAAO,KAA+B,UAAW,CACnD,GAAM,GAAM,KAEZ,GAAI,GAAG,KAAA,OAAH,EAAK,UAAW,CAElB,GAAM,GAAS,OAAO,KAAK,EAAI,UAAU,WAAa,IAEtD,GAA6B,CAAE,OAAY,OAE3C,IAA6B,GAGjC,MAAO,IAbA,kCCpnBT,GAAM,IAAmB,CACvB,KAAM,eACN,YAAa,2BACb,aAAc,4BACd,MAAO,qBACP,WAAY,0BACZ,OAAQ,sBACR,OAAQ,sBACR,QAAS,uBACT,aAAc,sBAEd,UAAW,0BACX,WAAY,2BACZ,WAAY,2BACZ,YAAa,4BAEb,SAAU,cACV,SAAU,cACV,OAAQ,aAGV,YAAwB,EAA2B,CACzC,GAAA,GAAyC,EAAK,WAAlC,EAA6B,EAAK,SAAxB,EAAmB,EAAK,QAAf,EAAU,EAAK,MAC9C,EAAmB,EAAK,QAAf,EAAU,EAAK,MAEhC,MAAO,WAAA,OAAM,MAAC,CACZ,KAAM,CACJ,GACE,GAAY,CACV,MAAO,EAAQ,iBAEnB,GAAc,CACZ,SAAU,EAAM,OAAO,SACvB,YAAa,EACb,YAAa,GACb,aAAc,EACd,WAAY,OACZ,OAAQ,IAEV,GACE,GAAW,CACT,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,OAAQ,WAtBb,uBA8BH,YAAoB,EAA2B,6BAEjD,EAeE,EAAK,MAdP,EAcE,EAAK,UAbP,EAaE,EAAK,SAZP,EAYE,EAAK,QAXP,EAWE,EAAK,SAVP,EAUE,EAAK,UATP,EASE,EAAK,SARP,EAQE,EAAK,WAPP,EAOE,EAAK,WANP,EAME,EAAK,QALP,EAKE,EAAK,UAJP,EAIE,EAAK,gBAHP,EAGE,EAAK,eAFP,EAEE,EAAK,iBADP,GACE,EAAK,gBAED,EAAmC,EAAK,eAAxB,GAAmB,EAAK,QAAf,EAAU,EAAK,MAE1C,EAAa,GAAoB,GAAkB,GAEnD,EAA4B,CAEhC,WAAY,EAAe,mBAC3B,MAAO,AAAC,EAAiD,EAAe,aAArD,EAAe,qBAClC,QAAS,OACT,WAAY,SACZ,QAAS,SACT,WAAY,EACZ,WAAY,SACZ,WAAY,EACZ,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,WAAY,SACZ,MAAO,EAAW,WAAa,kBAM/B,GAA4B,CAChC,CACE,MAAO,EAAe,qBACtB,QAAS,EACT,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,MAAO,iBAMT,GAAoC,CACxC,MAAO,EAAe,aACtB,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,MAAO,gBAKb,MAAO,CACL,KAAM,CACJ,EAAW,KACX,EAAM,OACN,GAAY,EAAW,SACvB,GAAY,EAAW,SACvB,GAAW,EAAW,OACtB,GAAa,EAAW,UACxB,GAAc,EAAW,WACzB,GAAc,EAAW,WACzB,GACA,CACE,SAAU,YAEZ,GAEF,QAAS,CACP,EAAW,QAEX,GAAc,CACZ,CACE,QAAS,OACT,aAAc,aAAa,CAAC,EAA+C,EAAe,UAA5C,EAAe,aAC7D,MAAO,QAET,GAAY,CACV,kBAAmB,EAAe,mBAClC,UAAS,GAAA,GACP,EAAC,GAAoB,EAAA,CACnB,YAAa,YACV,SAIT,CAAC,GAAY,CACX,UAAW,CACT,SAAU,CACR,kBAAmB,AAAC,EAAsD,EAAe,UAAnD,EAAe,mBACrD,UAAS,GAAA,GACP,EAAC,GAAoB,EAAA,CACnB,kBAAmB,aAChB,WAMb,GAAW,CACT,CACE,SAAU,YAEZ,GACE,AAAC,EAAuD,EAAe,UAApD,EAAe,oBAClC,EACA,mBAKR,WAAY,CACV,EAAW,WACX,GACA,CACE,OAAQ,aAAa,EAAe,YACpC,aAAc,GAAQ,eACtB,WAAY,EAAe,gBAC3B,OAAQ,OACR,OAAQ,GACR,QAAS,OACT,cAAe,MACf,WAAY,UACZ,SAAU,YAEZ,GAAa,CACX,UAAW,OACX,OAAQ,OACR,QAAS,QAGX,CAAC,GACC,CAAC,GAAY,CACX,UAAW,CACT,SAAU,CACR,YAAa,EAAe,mBAC5B,UAAS,GAAA,GACP,EAAC,GAAoB,EAAA,CACnB,YAAa,aACV,WAOf,GACE,CAAC,GACD,GACE,AAAC,EAAuD,EAAe,UAApD,EAAe,oBAClC,GAAQ,gBAEZ,GAAY,CACV,YAAa,EAAe,mBAC5B,UAAS,GAAA,GACP,EAAC,GAAoB,EAAA,CACnB,YAAa,YACV,QAIP,OAAQ,WAEV,GAAc,CACZ,OAAQ,QAEV,GACE,GAAW,CACT,OAAQ,OACR,UAAW,CACT,SAAU,CACR,OAAQ,UAIhB,GAAc,CACZ,KAAM,UACN,OAAQ,OACR,UAAW,QAEb,GACE,GAAY,CACV,gBAAiB,eAGrB,GACE,CAAC,GAAc,CACb,YAAa,EAAe,UAC5B,UAAW,CACT,UAAW,CACT,YAAa,EAAe,aAIpC,CAAC,GACC,GAAY,CACV,UAAS,GAAA,CACP,UAAW,CACT,QAAS,MACT,MAAO,EAAe,UACtB,SAAU,WACV,IAAK,GACL,MAAO,MAET,EAAC,GAAuB,CACtB,UAAW,CACT,UAAW,CACT,MAAO,aACP,MAAO,YAOrB,MAAO,CACL,EAAM,OACN,EAAW,MACX,GACA,CACE,aAAc,EACd,OAAQ,OACR,WAAY,OACZ,gBAAiB,cACjB,MAAO,EAAe,UACtB,QAAS,QACT,MAAO,OACP,SAAU,EACV,aAAc,WACd,QAAS,EACT,UAAS,GAAA,CACP,6BAA8B,CAAE,QAAS,GACzC,cAAe,CACb,QAAS,SAEX,EAAC,GAAuB,CACtB,WAAY,SACZ,MAAO,EAAW,WAAa,kBAIrC,GAAqB,IACrB,GACE,CAAC,GAAa,CACZ,EAAW,YACX,CACE,OAAQ,SAGd,GAAa,CACX,UAAW,UACX,WAAY,GACZ,SAAU,EACV,WAAY,EACZ,cAAe,EACf,SAAU,OACV,MAAO,QAET,GACE,GAAoB,CAClB,SAAU,UAEd,GACE,CAAC,IAAmB,CAClB,aAAc,IAElB,GACE,GAAW,CACT,aAAc,IAElB,GAAY,CACV,CACE,gBAAiB,EAAe,mBAChC,MAAO,EAAe,aACtB,YAAa,EAAe,oBAE9B,GAAqB,KAEvB,GAAc,CACZ,UAAW,QAEb,GACE,CAAC,GAAc,CACb,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,YAAa,GACb,aAAc,QAItB,GACE,GACA,CAAC,GAAc,CACb,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,WAAY,OAIpB,GAEF,KAAM,CACJ,GAAa,CACX,aAAc,GACd,WAAY,YAEd,CACE,cAAe,OACf,SAAU,WACV,OAAQ,EACR,MAAO,EACP,IAAK,OACL,SAAU,GAAc,OACxB,WAAY,IAEd,GAAY,CACV,MAAO,EAAe,eAG1B,YAAa,CACX,EAAW,YACX,CACE,MAAO,EAAe,YACtB,SAAU,EAAM,OAAO,WAG3B,aAAc,CACZ,EAAW,aACX,EAAoB,cACpB,EAAM,MACN,CACE,MAAO,EAAe,UACtB,OAAQ,EACR,WAAY,EACZ,QAAS,OACT,WAAY,WAGhB,OAAQ,CAAC,EAAW,OAAQ,GAC5B,OAAQ,CAAC,EAAW,OAAQ,GAC5B,aAAc,CACZ,EAAW,aACX,YACA,kBACA,GAAc,EAAO,CAAE,MAAO,IAC9B,CACE,OAAQ,GACR,MAAO,GACP,OAAQ,OACR,QAAS,UACT,gBAAiB,cACjB,MAAO,EAAe,KACtB,UAAW,CACT,SAAU,CACR,QAAS,EACT,MAAO,EAAe,+BACtB,gBAAiB,EAAe,wBAChC,UAAS,GAAA,GACP,EAAC,GAAuB,CACtB,YAAa,YACb,MAAO,iBAIb,SAAU,CAAE,QAAS,KAGzB,GAAW,CACT,YAAa,KAGjB,WAAY,CACV,QAAS,OACT,OAAQ,OACR,WAAY,UAEd,WAAY,CACV,OAAQ,UACR,cAAe,OACf,OAAQ,EACR,MAAO,EACP,IAAK,OACL,SAAU,GAAc,OACxB,WAAY,IAEd,mBAAoB,CAClB,MAAO,GAAe,KA7YZ,kBC7DT,GAAM,IAAsD,EAIjE,GAAe,GAAW,OAAW,CACrC,MAAO",
  "names": []
}
