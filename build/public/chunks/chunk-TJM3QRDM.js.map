{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/ProgressIndicator/components/ProgressIndicator/ProgressIndicator.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/ProgressIndicator/components/ProgressIndicator/ProgressIndicator.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/ProgressIndicator/components/ProgressIndicator/ProgressIndicator.tsx"],
  "sourcesContent": ["import * as React from 'react';\nimport { classNamesFunction, getId } from '../../Utilities';\nimport type {\n  IProgressIndicatorProps,\n  IProgressIndicatorStyleProps,\n  IProgressIndicatorStyles,\n} from './ProgressIndicator.types';\n\nconst getClassNames = classNamesFunction<IProgressIndicatorStyleProps, IProgressIndicatorStyles>();\n\n// if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\nconst ZERO_THRESHOLD = 0.01;\n\n/**\n * ProgressIndicator with no default styles.\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\nexport class ProgressIndicatorBase extends React.Component<IProgressIndicatorProps, {}> {\n  public static defaultProps = {\n    label: '',\n    description: '',\n    width: 180,\n  };\n\n  private _labelId: string;\n  private _descriptionId: string;\n\n  constructor(props: IProgressIndicatorProps) {\n    super(props);\n\n    const id = getId('progress-indicator');\n    this._labelId = id + '-label';\n    this._descriptionId = id + '-description';\n  }\n\n  public render() {\n    const {\n      barHeight,\n      className,\n      // eslint-disable-next-line deprecation/deprecation\n      label = this.props.title, // Fall back to deprecated value.\n      description,\n      styles,\n      theme,\n      progressHidden,\n      onRenderProgress = this._onRenderProgress,\n    } = this.props;\n\n    const percentComplete =\n      typeof this.props.percentComplete === 'number'\n        ? Math.min(100, Math.max(0, this.props.percentComplete * 100))\n        : undefined;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      barHeight,\n      indeterminate: percentComplete === undefined ? true : false,\n    });\n\n    return (\n      <div className={classNames.root}>\n        {label ? (\n          <div id={this._labelId} className={classNames.itemName}>\n            {label}\n          </div>\n        ) : null}\n        {!progressHidden\n          ? onRenderProgress(\n              {\n                ...(this.props as IProgressIndicatorProps),\n                percentComplete: percentComplete,\n              },\n              this._onRenderProgress,\n            )\n          : null}\n        {description ? (\n          <div id={this._descriptionId} className={classNames.itemDescription}>\n            {description}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n\n  private _onRenderProgress = (props: IProgressIndicatorProps): JSX.Element => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ariaValueText, barHeight, className, description, label = this.props.title, styles, theme } = this.props;\n\n    const percentComplete =\n      typeof this.props.percentComplete === 'number'\n        ? Math.min(100, Math.max(0, this.props.percentComplete * 100))\n        : undefined;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      barHeight,\n      indeterminate: percentComplete === undefined ? true : false,\n    });\n\n    const progressBarStyles = {\n      width: percentComplete !== undefined ? percentComplete + '%' : undefined,\n      transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined,\n    };\n\n    const ariaValueMin = percentComplete !== undefined ? 0 : undefined;\n    const ariaValueMax = percentComplete !== undefined ? 100 : undefined;\n    const ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete!) : undefined;\n\n    return (\n      <div className={classNames.itemProgress}>\n        <div className={classNames.progressTrack} />\n        <div\n          className={classNames.progressBar}\n          style={progressBarStyles}\n          role=\"progressbar\"\n          aria-describedby={description ? this._descriptionId : undefined}\n          aria-labelledby={label ? this._labelId : undefined}\n          aria-valuemin={ariaValueMin}\n          aria-valuemax={ariaValueMax}\n          aria-valuenow={ariaValueNow}\n          aria-valuetext={ariaValueText}\n        />\n      </div>\n    );\n  };\n}\n", "import {\n  HighContrastSelector,\n  keyframes,\n  noWrap,\n  getGlobalClassNames,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL, memoizeFunction } from '../../Utilities';\nimport type { IRawStyle } from '../../Styling';\nimport type { IProgressIndicatorStyleProps, IProgressIndicatorStyles } from './ProgressIndicator.types';\n\nconst GlobalClassNames = {\n  root: 'ms-ProgressIndicator',\n  itemName: 'ms-ProgressIndicator-itemName',\n  itemDescription: 'ms-ProgressIndicator-itemDescription',\n  itemProgress: 'ms-ProgressIndicator-itemProgress',\n  progressTrack: 'ms-ProgressIndicator-progressTrack',\n  progressBar: 'ms-ProgressIndicator-progressBar',\n};\n\nconst IndeterminateProgress = memoizeFunction(() =>\n  keyframes({\n    '0%': {\n      left: '-30%',\n    },\n    '100%': {\n      left: '100%',\n    },\n  }),\n);\n\nconst IndeterminateProgressRTL = memoizeFunction(() =>\n  keyframes({\n    '100%': {\n      right: '-30%',\n    },\n    '0%': {\n      right: '100%',\n    },\n  }),\n);\n\nexport const getStyles = (props: IProgressIndicatorStyleProps): IProgressIndicatorStyles => {\n  const isRTL = getRTL(props.theme);\n  const { className, indeterminate, theme, barHeight = 2 } = props;\n\n  const { palette, semanticColors, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const marginBetweenText = 8;\n  const textHeight = 18;\n  const progressTrackColor = palette.neutralLight;\n\n  return {\n    root: [classNames.root, fonts.medium, className],\n\n    itemName: [\n      classNames.itemName,\n      noWrap,\n      {\n        color: semanticColors.bodyText,\n        paddingTop: marginBetweenText / 2,\n        lineHeight: textHeight + 2,\n      },\n    ],\n\n    itemDescription: [\n      classNames.itemDescription,\n      {\n        color: semanticColors.bodySubtext,\n        fontSize: fonts.small.fontSize,\n        lineHeight: textHeight,\n      },\n    ],\n\n    itemProgress: [\n      classNames.itemProgress,\n      {\n        position: 'relative',\n        overflow: 'hidden',\n        height: barHeight,\n        padding: `${marginBetweenText}px 0`,\n      },\n    ],\n\n    progressTrack: [\n      classNames.progressTrack,\n      {\n        position: 'absolute',\n        width: '100%',\n        height: barHeight,\n        backgroundColor: progressTrackColor,\n\n        selectors: {\n          [HighContrastSelector]: {\n            borderBottom: '1px solid WindowText',\n          },\n        },\n      },\n    ],\n\n    progressBar: [\n      {\n        backgroundColor: palette.themePrimary,\n        height: barHeight,\n        position: 'absolute',\n        transition: 'width .3s ease',\n        width: 0,\n\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'highlight',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      indeterminate\n        ? ({\n            position: 'absolute',\n            minWidth: '33%',\n            background:\n              `linear-gradient(to right, ${progressTrackColor} 0%, ` +\n              `${palette.themePrimary} 50%, ${progressTrackColor} 100%)`,\n            animation: `${isRTL ? IndeterminateProgressRTL() : IndeterminateProgress()} 3s infinite`,\n            selectors: {\n              [HighContrastSelector]: {\n                background: `highlight`,\n              },\n            },\n          } as IRawStyle)\n        : ({\n            transition: 'width .15s linear',\n          } as IRawStyle),\n      classNames.progressBar,\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ProgressIndicatorBase } from './ProgressIndicator.base';\nimport { getStyles } from './ProgressIndicator.styles';\nimport type {\n  IProgressIndicatorProps,\n  IProgressIndicatorStyleProps,\n  IProgressIndicatorStyles,\n} from './ProgressIndicator.types';\n\n/**\n * ProgressIndicator description\n */\nexport const ProgressIndicator: React.FunctionComponent<IProgressIndicatorProps> = styled<\n  IProgressIndicatorProps,\n  IProgressIndicatorStyleProps,\n  IProgressIndicatorStyles\n>(ProgressIndicatorBase, getStyles, undefined, { scope: 'ProgressIndicator' });\n"],
  "mappings": "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",
  "names": []
}
