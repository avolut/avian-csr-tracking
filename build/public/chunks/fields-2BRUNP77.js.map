{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@fluentui+react-hooks@8.3.6_7ebb500358f89bf998744b75094fbd09/node_modules/@fluentui/react-hooks/lib/useBoolean.ts", "../../../node_modules/.pnpm/@fluentui+react-hooks@8.3.6_7ebb500358f89bf998744b75094fbd09/node_modules/@fluentui/react-hooks/lib/useSetTimeout.ts", "../../../node_modules/.pnpm/@fluentui+react-hooks@8.3.6_7ebb500358f89bf998744b75094fbd09/node_modules/@fluentui/react-hooks/lib/useUnmount.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/TextField/MaskedTextField/components/TextField/MaskedTextField/MaskedTextField.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/TextField/MaskedTextField/components/TextField/MaskedTextField/inputMask.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Modal/components/Modal/Modal.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Modal/components/Modal/Modal.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Overlay/components/Overlay/Overlay.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Overlay/components/Overlay/Overlay.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Overlay/components/Overlay/Overlay.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/utilities/DraggableZone/utilities/DraggableZone/DraggableZone.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/utilities/DraggableZone/utilities/DraggableZone/DraggableZone.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Modal/components/Modal/Modal.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Toggle/components/Toggle/Toggle.base.tsx", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Toggle/components/Toggle/Toggle.styles.ts", "../../../node_modules/.pnpm/@fluentui+react@8.41.4_1cee09e4cba969bb8d4ccbd280d739ab/node_modules/@fluentui/react/lib/components/Toggle/components/Toggle/Toggle.tsx", "../../../pkgs/web/crud/src/form/web/fields/WDate.tsx", "../../../pkgs/web/crud/src/form/web/fields/WDateTime.tsx", "../../../pkgs/web/crud/src/form/web/fields/WText.tsx", "../../../pkgs/web/crud/src/form/web/fields/WUnknown.tsx", "../../../pkgs/web/crud/src/form/web/fields/WSection.tsx", "../../../pkgs/web/crud/src/form/web/fields/WBoolean.tsx", "../../../pkgs/web/crud/src/form/web/fields/WFileUpload.tsx", "../../../pkgs/web/crud/src/form/web/fields/index.tsx"],
  "sourcesContent": ["import * as React from 'react';\nimport { useConst } from './useConst';\n\n/** Updater callbacks returned by `useBoolean`. */\nexport interface IUseBooleanCallbacks {\n  /** Set the value to true. Always has the same identity. */\n  setTrue: () => void;\n  /** Set the value to false. Always has the same identity. */\n  setFalse: () => void;\n  /** Toggle the value. Always has the same identity. */\n  toggle: () => void;\n}\n\n/**\n * Hook to store a value and generate callbacks for setting the value to true or false.\n * The identity of the callbacks will always stay the same.\n *\n * @param initialState - Initial value\n * @returns Array with the current value and an object containing the updater callbacks.\n */\nexport function useBoolean(initialState: boolean): [boolean, IUseBooleanCallbacks] {\n  const [value, setValue] = React.useState(initialState);\n\n  const setTrue = useConst(() => () => {\n    setValue(true);\n  });\n  const setFalse = useConst(() => () => {\n    setValue(false);\n  });\n  const toggle = useConst(() => () => {\n    setValue(currentValue => !currentValue);\n  });\n\n  return [value, { setTrue, setFalse, toggle }];\n}\n", "import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type UseSetTimeoutReturnType = {\n  setTimeout: (callback: () => void, duration: number) => number;\n  clearTimeout: (id: number) => void;\n};\n\n/**\n *  Returns a wrapper function for `setTimeout` which automatically handles disposal.\n */\nexport const useSetTimeout = (): UseSetTimeoutReturnType => {\n  const timeoutIds = useConst<Record<number, number>>({});\n\n  // Cleanup function.\n  React.useEffect(\n    () => () => {\n      for (const id of Object.keys(timeoutIds)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        clearTimeout(id as any);\n      }\n    },\n    // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n    [timeoutIds],\n  );\n\n  // Return wrapper which will auto cleanup.\n  return useConst({\n    setTimeout: (func: () => void, duration: number): number => {\n      const id = (setTimeout(func, duration) as unknown) as number;\n\n      timeoutIds[id] = 1;\n\n      return id;\n    },\n\n    clearTimeout: (id: number): void => {\n      delete timeoutIds[id];\n      clearTimeout(id);\n    },\n  });\n};\n", "import * as React from 'react';\n\n/**\n * Hook which synchronously executes a callback when the component is about to unmount.\n *\n * @param callback - Function to call during unmount.\n */\nexport const useUnmount = (callback: () => void) => {\n  const unmountRef = React.useRef(callback);\n  unmountRef.current = callback;\n  React.useEffect(\n    () => () => {\n      unmountRef.current?.();\n    },\n    [],\n  );\n};\n", "import * as React from 'react';\nimport { TextField } from '../TextField';\nimport { KeyCodes } from '../../../Utilities';\nimport {\n  clearNext,\n  clearPrev,\n  clearRange,\n  DEFAULT_MASK_FORMAT_CHARS,\n  getLeftFormatIndex,\n  getMaskDisplay,\n  getRightFormatIndex,\n  insertString,\n  parseMask,\n} from './inputMask';\nimport { useConst } from '@fluentui/react-hooks';\nimport type { IMaskedTextFieldProps, IMaskedTextField } from '../TextField.types';\nimport type { IRefObject } from '../../../Utilities';\nimport type { IMaskValue } from './inputMask';\n\ninterface IMaskedTextFieldInternalState {\n  maskCharData: IMaskValue[];\n  isFocused: boolean;\n  moveCursorOnMouseUp: boolean;\n  changeSelectionData: {\n    changeType: 'default' | 'backspace' | 'delete' | 'textPasted';\n    selectionStart: number;\n    selectionEnd: number;\n  } | null;\n}\n\nconst COMPONENT_NAME = 'MaskedTextField';\n\nconst useComponentRef = (\n  componentRef: IRefObject<IMaskedTextField> | undefined,\n  internalState: IMaskedTextFieldInternalState,\n  textField: React.RefObject<IMaskedTextField>,\n) => {\n  React.useImperativeHandle(\n    componentRef,\n    (): IMaskedTextField => ({\n      get value() {\n        let value = '';\n\n        for (let i = 0; i < internalState.maskCharData.length; i++) {\n          if (!internalState.maskCharData[i].value) {\n            return undefined;\n          }\n          value += internalState.maskCharData[i].value;\n        }\n        return value;\n      },\n\n      get selectionStart(): number | null {\n        return textField.current && textField.current.selectionStart !== null ? textField.current.selectionStart : -1;\n      },\n\n      get selectionEnd(): number | null {\n        return textField.current && textField.current.selectionEnd ? textField.current.selectionEnd : -1;\n      },\n\n      focus(): void {\n        textField.current && textField.current.focus();\n      },\n\n      blur(): void {\n        textField.current && textField.current.blur();\n      },\n\n      select(): void {\n        textField.current && textField.current.select();\n      },\n\n      setSelectionStart(value: number): void {\n        textField.current && textField.current.setSelectionStart(value);\n      },\n\n      setSelectionEnd(value: number): void {\n        textField.current && textField.current.setSelectionEnd(value);\n      },\n\n      setSelectionRange(start: number, end: number): void {\n        textField.current && textField.current.setSelectionRange(start, end);\n      },\n    }),\n    [internalState, textField],\n  );\n};\n\nexport const DEFAULT_MASK_CHAR = '_';\n\nexport const MaskedTextField: React.FunctionComponent<IMaskedTextFieldProps> = React.forwardRef<\n  HTMLDivElement,\n  IMaskedTextFieldProps\n>((props, ref) => {\n  const textField = React.useRef<IMaskedTextField>(null);\n\n  const {\n    componentRef,\n    onFocus,\n    onBlur,\n    onMouseDown,\n    onMouseUp,\n    onChange,\n    onPaste,\n    onKeyDown,\n    mask,\n    maskChar = DEFAULT_MASK_CHAR,\n    maskFormat = DEFAULT_MASK_FORMAT_CHARS,\n    value,\n  } = props;\n\n  const internalState = useConst<IMaskedTextFieldInternalState>(() => ({\n    maskCharData: parseMask(mask, maskFormat),\n    isFocused: false,\n    moveCursorOnMouseUp: false,\n    changeSelectionData: null,\n  }));\n\n  /** The index into the rendered value of the first unfilled format character */\n  const [maskCursorPosition, setMaskCursorPosition] = React.useState<number | undefined>();\n\n  /**\n   * The mask string formatted with the input value.\n   * This is what is displayed inside the TextField\n   * @example\n   *  `Phone Number: 12_ - 4___`\n   */\n  const [displayValue, setDisplayValue] = React.useState<string>(() =>\n    getMaskDisplay(mask, internalState.maskCharData, maskChar),\n  );\n\n  const setValue = React.useCallback(\n    (newValue: string): void => {\n      let valueIndex = 0;\n      let charDataIndex = 0;\n\n      while (valueIndex < newValue.length && charDataIndex < internalState.maskCharData.length) {\n        // Test if the next character in the new value fits the next format character\n        const testVal = newValue[valueIndex];\n        if (internalState.maskCharData[charDataIndex].format.test(testVal)) {\n          internalState.maskCharData[charDataIndex].value = testVal;\n          charDataIndex++;\n        }\n        valueIndex++;\n      }\n    },\n    [internalState],\n  );\n\n  const handleFocus = React.useCallback(\n    (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      onFocus?.(ev);\n      internalState.isFocused = true;\n\n      // Move the cursor position to the leftmost unfilled position\n      for (let i = 0; i < internalState.maskCharData.length; i++) {\n        if (!internalState.maskCharData[i].value) {\n          setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n          break;\n        }\n      }\n    },\n    [internalState, onFocus],\n  );\n\n  const handleBlur = React.useCallback(\n    (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      onBlur?.(ev);\n      internalState.isFocused = false;\n      internalState.moveCursorOnMouseUp = true;\n    },\n    [internalState, onBlur],\n  );\n\n  const handleMouseDown = React.useCallback(\n    (ev: React.MouseEvent<HTMLInputElement>) => {\n      onMouseDown?.(ev);\n      if (!internalState.isFocused) {\n        internalState.moveCursorOnMouseUp = true;\n      }\n    },\n    [internalState, onMouseDown],\n  );\n\n  const handleMouseUp = React.useCallback(\n    (ev: React.MouseEvent<HTMLInputElement>) => {\n      onMouseUp?.(ev);\n      // Move the cursor on mouseUp after focusing the textField\n      if (internalState.moveCursorOnMouseUp) {\n        internalState.moveCursorOnMouseUp = false;\n        // Move the cursor position to the rightmost unfilled position\n        for (let i = 0; i < internalState.maskCharData.length; i++) {\n          if (!internalState.maskCharData[i].value) {\n            setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n            break;\n          }\n        }\n      }\n    },\n    [internalState, onMouseUp],\n  );\n\n  const handleInputChange = React.useCallback(\n    (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, inputValue: string) => {\n      if (internalState.changeSelectionData === null && textField.current) {\n        internalState.changeSelectionData = {\n          changeType: 'default',\n          selectionStart: textField.current.selectionStart !== null ? textField.current.selectionStart : -1,\n          selectionEnd: textField.current.selectionEnd !== null ? textField.current.selectionEnd : -1,\n        };\n      }\n      if (!internalState.changeSelectionData) {\n        return;\n      }\n\n      // The initial value of cursorPos does not matter\n      let cursorPos = 0;\n      const { changeType, selectionStart, selectionEnd } = internalState.changeSelectionData;\n\n      if (changeType === 'textPasted') {\n        const charsSelected = selectionEnd - selectionStart;\n        const charCount = inputValue.length + charsSelected - displayValue.length;\n        const startPos = selectionStart;\n        const pastedString = inputValue.substr(startPos, charCount);\n\n        // Clear any selected characters\n        if (charsSelected) {\n          internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charsSelected);\n        }\n        cursorPos = insertString(internalState.maskCharData, startPos, pastedString);\n      } else if (changeType === 'delete' || changeType === 'backspace') {\n        // isDel is true If the characters are removed LTR, otherwise RTL\n        const isDel = changeType === 'delete';\n        const charCount = selectionEnd - selectionStart;\n\n        if (charCount) {\n          // charCount is > 0 if range was deleted\n          internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charCount);\n          cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n        } else {\n          // If charCount === 0, there was no selection and a single character was deleted\n          if (isDel) {\n            internalState.maskCharData = clearNext(internalState.maskCharData, selectionStart);\n            cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n          } else {\n            internalState.maskCharData = clearPrev(internalState.maskCharData, selectionStart);\n            cursorPos = getLeftFormatIndex(internalState.maskCharData, selectionStart);\n          }\n        }\n      } else if (inputValue.length > displayValue.length) {\n        // This case is if the user added characters\n        const charCount = inputValue.length - displayValue.length;\n        const startPos = selectionEnd - charCount;\n        const enteredString = inputValue.substr(startPos, charCount);\n\n        cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n      } else if (inputValue.length <= displayValue.length) {\n        /**\n         * This case is reached only if the user has selected a block of 1 or more\n         * characters and input a character replacing the characters they've selected.\n         */\n        const charCount = 1;\n        const selectCount = displayValue.length + charCount - inputValue.length;\n        const startPos = selectionEnd - charCount;\n        const enteredString = inputValue.substr(startPos, charCount);\n\n        // Clear the selected range\n        internalState.maskCharData = clearRange(internalState.maskCharData, startPos, selectCount);\n        // Insert the printed character\n        cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n      }\n\n      internalState.changeSelectionData = null;\n\n      const newValue = getMaskDisplay(mask, internalState.maskCharData, maskChar);\n\n      setDisplayValue(newValue);\n      setMaskCursorPosition(cursorPos);\n\n      // Perform onChange after input has been processed. Return value is expected to be the displayed text\n      onChange?.(ev, newValue);\n    },\n    [displayValue.length, internalState, mask, maskChar, onChange],\n  );\n\n  const handleKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLInputElement>) => {\n      onKeyDown?.(ev);\n\n      internalState.changeSelectionData = null;\n      if (textField.current && textField.current.value) {\n        const { keyCode, ctrlKey, metaKey } = ev;\n\n        // Ignore ctrl and meta keydown\n        if (ctrlKey || metaKey) {\n          return;\n        }\n\n        // On backspace or delete, store the selection and the keyCode\n        if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {\n          const selectionStart = (ev.target as HTMLInputElement).selectionStart;\n          const selectionEnd = (ev.target as HTMLInputElement).selectionEnd;\n\n          // Check if backspace or delete press is valid.\n          if (\n            !(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0) &&\n            !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < textField.current.value.length)\n          ) {\n            return;\n          }\n\n          internalState.changeSelectionData = {\n            changeType: keyCode === KeyCodes.backspace ? 'backspace' : 'delete',\n            selectionStart: selectionStart !== null ? selectionStart : -1,\n            selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n          };\n        }\n      }\n    },\n    [internalState, onKeyDown],\n  );\n\n  const handlePaste = React.useCallback(\n    (ev: React.ClipboardEvent<HTMLInputElement>) => {\n      onPaste?.(ev);\n\n      const selectionStart = (ev.target as HTMLInputElement).selectionStart;\n      const selectionEnd = (ev.target as HTMLInputElement).selectionEnd;\n      // Store the paste selection range\n      internalState.changeSelectionData = {\n        changeType: 'textPasted',\n        selectionStart: selectionStart !== null ? selectionStart : -1,\n        selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n      };\n    },\n    [internalState, onPaste],\n  );\n\n  // Updates the display value if mask or value props change.\n  React.useEffect(() => {\n    internalState.maskCharData = parseMask(mask, maskFormat);\n    value !== undefined && setValue(value);\n    setDisplayValue(getMaskDisplay(mask, internalState.maskCharData, maskChar));\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only update when mask or value changes.\n  }, [mask, value]);\n\n  // Run before browser paint to avoid flickering from selection reset.\n  // eslint-disable-next-line no-restricted-properties\n  React.useLayoutEffect(() => {\n    // Move the cursor to position before paint.\n    if (maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  }, [maskCursorPosition]);\n\n  // Run after browser paint.\n  React.useEffect(() => {\n    // Move the cursor to the start of the mask format after values update.\n    if (internalState.isFocused && maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  });\n\n  useComponentRef(componentRef, internalState, textField);\n\n  return (\n    <TextField\n      {...props}\n      elementRef={ref}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onChange={handleInputChange}\n      onKeyDown={handleKeyDown}\n      onPaste={handlePaste}\n      value={displayValue || ''}\n      componentRef={textField}\n    />\n  );\n});\nMaskedTextField.displayName = COMPONENT_NAME;\n", "export interface IMaskValue {\n  value?: string;\n  /**\n   * This index refers to the index in the displayMask rather than the inputMask.\n   * This means that any escaped characters do not count toward this index.\n   */\n  displayIndex: number;\n  format: RegExp;\n}\n\nexport const DEFAULT_MASK_FORMAT_CHARS: { [key: string]: RegExp } = {\n  '9': /[0-9]/,\n  a: /[a-zA-Z]/,\n  '*': /[a-zA-Z0-9]/,\n};\n\n/**\n * Takes in the mask string and the formatCharacters and returns an array of MaskValues\n * Example:\n * mask = 'Phone Number: (999) - 9999'\n * return = [\n *    { value: undefined, displayIndex: 16, format: /[0-9]/ },\n *    { value: undefined, displayIndex: 17, format: /[0-9]/ },\n *    { value: undefined, displayIndex: 18, format: /[0-9]/ },\n *    { value: undefined, displayIndex: 22, format: /[0-9]/ },\n * ]\n *\n * @param mask The string use to define the format of the displayed maskedValue.\n * @param formatChars An object defining how certain characters in the mask should accept input.\n */\nexport function parseMask(\n  mask: string | undefined,\n  formatChars: { [key: string]: RegExp } = DEFAULT_MASK_FORMAT_CHARS,\n): IMaskValue[] {\n  if (!mask) {\n    return [];\n  }\n\n  const maskCharData: IMaskValue[] = [];\n  // Count the escape characters in the mask string.\n  let escapedChars = 0;\n  for (let i = 0; i + escapedChars < mask.length; i++) {\n    const maskChar = mask.charAt(i + escapedChars);\n    if (maskChar === '\\\\') {\n      escapedChars++;\n    } else {\n      // Check if the maskChar is a format character.\n      const maskFormat = formatChars[maskChar];\n      if (maskFormat) {\n        maskCharData.push({\n          /**\n           * Do not add escapedChars to the displayIndex.\n           * The index refers to a position in the mask's displayValue.\n           * Since the backslashes don't appear in the displayValue,\n           * we do not add them to the charData displayIndex.\n           */\n          displayIndex: i,\n          format: maskFormat,\n        });\n      }\n    }\n  }\n\n  return maskCharData;\n}\n\n/**\n * Takes in the mask string, an array of MaskValues, and the maskCharacter\n * returns the mask string formatted with the input values and maskCharacter.\n * If the maskChar is undefined, the maskDisplay is truncated to the last filled format character.\n * Example:\n * mask = 'Phone Number: (999) 999 - 9999'\n * maskCharData = '12345'\n * maskChar = '_'\n * return = 'Phone Number: (123) 45_ - ___'\n *\n * Example:\n * mask = 'Phone Number: (999) 999 - 9999'\n * value = '12345'\n * maskChar = undefined\n * return = 'Phone Number: (123) 45'\n *\n * @param mask The string use to define the format of the displayed maskedValue.\n * @param maskCharData The input values to insert into the mask string for displaying.\n * @param maskChar? A character to display in place of unfilled mask format characters.\n */\nexport function getMaskDisplay(mask: string | undefined, maskCharData: IMaskValue[], maskChar?: string): string {\n  let maskDisplay = mask;\n\n  if (!maskDisplay) {\n    return '';\n  }\n\n  // Remove all backslashes\n  maskDisplay = maskDisplay.replace(/\\\\/g, '');\n\n  // lastDisplayIndex is is used to truncate the string if necessary.\n  let lastDisplayIndex = 0;\n  if (maskCharData.length > 0) {\n    lastDisplayIndex = maskCharData[0].displayIndex - 1;\n  }\n\n  /**\n   * For each input value, replace the character in the maskDisplay with the value.\n   * If there is no value set for the format character, use the maskChar.\n   */\n  for (const charData of maskCharData) {\n    let nextChar = ' ';\n    if (charData.value) {\n      nextChar = charData.value;\n      if (charData.displayIndex > lastDisplayIndex) {\n        lastDisplayIndex = charData.displayIndex;\n      }\n    } else {\n      if (maskChar) {\n        nextChar = maskChar;\n      }\n    }\n\n    // Insert the character into the maskdisplay at its corresponding index\n    maskDisplay = maskDisplay.slice(0, charData.displayIndex) + nextChar + maskDisplay.slice(charData.displayIndex + 1);\n  }\n\n  // Cut off all mask characters after the last filled format value\n  if (!maskChar) {\n    maskDisplay = maskDisplay.slice(0, lastDisplayIndex + 1);\n  }\n\n  return maskDisplay;\n}\n\n/**\n * Get the next format index right of or at a specified index.\n * If no index exists, returns the rightmost index.\n * @param maskCharData\n * @param index\n */\nexport function getRightFormatIndex(maskCharData: IMaskValue[], index: number): number {\n  for (let i = 0; i < maskCharData.length; i++) {\n    if (maskCharData[i].displayIndex >= index) {\n      return maskCharData[i].displayIndex;\n    }\n  }\n  return maskCharData[maskCharData.length - 1].displayIndex;\n}\n\n/**\n * Get the next format index left of a specified index.\n * If no index exists, returns the leftmost index.\n * @param maskCharData\n * @param index\n */\nexport function getLeftFormatIndex(maskCharData: IMaskValue[], index: number): number {\n  for (let i = maskCharData.length - 1; i >= 0; i--) {\n    if (maskCharData[i].displayIndex < index) {\n      return maskCharData[i].displayIndex;\n    }\n  }\n  return maskCharData[0].displayIndex;\n}\n\n/**\n * Deletes all values in maskCharData with a displayIndex that falls inside the specified range.\n * maskCharData is modified inline and also returned.\n * @param maskCharData\n * @param selectionStart\n * @param selectionCount\n */\nexport function clearRange(maskCharData: IMaskValue[], selectionStart: number, selectionCount: number): IMaskValue[] {\n  for (let i = 0; i < maskCharData.length; i++) {\n    if (maskCharData[i].displayIndex >= selectionStart) {\n      if (maskCharData[i].displayIndex >= selectionStart + selectionCount) {\n        break;\n      }\n      maskCharData[i].value = undefined;\n    }\n  }\n  return maskCharData;\n}\n\n/**\n * Deletes the input character at or after a specified index and returns the new array of charData\n * maskCharData is modified inline and also returned.\n * @param maskCharData\n * @param selectionStart\n */\nexport function clearNext(maskCharData: IMaskValue[], selectionStart: number): IMaskValue[] {\n  for (let i = 0; i < maskCharData.length; i++) {\n    if (maskCharData[i].displayIndex >= selectionStart) {\n      maskCharData[i].value = undefined;\n      break;\n    }\n  }\n  return maskCharData;\n}\n\n/**\n * Deletes the input character before a specified index and returns the new array of charData\n * maskCharData is modified inline and also returned.\n * @param maskCharData\n * @param selectionStart\n */\nexport function clearPrev(maskCharData: IMaskValue[], selectionStart: number): IMaskValue[] {\n  for (let i = maskCharData.length - 1; i >= 0; i--) {\n    if (maskCharData[i].displayIndex < selectionStart) {\n      maskCharData[i].value = undefined;\n      break;\n    }\n  }\n  return maskCharData;\n}\n\n/**\n * Deletes all values in maskCharData with a displayIndex that falls inside the specified range.\n * Modifies the maskCharData inplace with the passed string and returns the display index of the\n * next format character after the inserted string.\n * @param maskCharData\n * @param selectionStart\n * @param selectionCount\n * @return The displayIndex of the next format character\n */\nexport function insertString(maskCharData: IMaskValue[], selectionStart: number, newString: string): number {\n  let stringIndex = 0;\n  let nextIndex = 0;\n  let isStringInserted = false;\n\n  // Iterate through _maskCharData finding values with a displayIndex after the specified range start\n  for (let i = 0; i < maskCharData.length && stringIndex < newString.length; i++) {\n    if (maskCharData[i].displayIndex >= selectionStart) {\n      isStringInserted = true;\n      nextIndex = maskCharData[i].displayIndex;\n      // Find the next character in the newString that matches the format\n      while (stringIndex < newString.length) {\n        // If the character matches the format regexp, set the maskCharData to the new character\n        if (maskCharData[i].format.test(newString.charAt(stringIndex))) {\n          maskCharData[i].value = newString.charAt(stringIndex++);\n          // Set the nextIndex to the display index of the next mask format character.\n          if (i + 1 < maskCharData.length) {\n            nextIndex = maskCharData[i + 1].displayIndex;\n          } else {\n            nextIndex++;\n          }\n          break;\n        }\n        stringIndex++;\n      }\n    }\n  }\n\n  return isStringInserted ? nextIndex : selectionStart;\n}\n", "import * as React from 'react';\nimport {\n  classNamesFunction,\n  allowScrollOnElement,\n  allowOverscrollOnElement,\n  getPropsWithDefaults,\n  KeyCodes,\n  elementContains,\n  EventGroup,\n} from '../../Utilities';\nimport { FocusTrapZone } from '../../FocusTrapZone';\nimport { animationDuration } from './Modal.styles';\nimport { Overlay } from '../../Overlay';\nimport { Layer } from '../../Layer';\nimport { Popup } from '../../Popup';\nimport { ResponsiveMode, useResponsiveMode } from '../../ResponsiveMode';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { Icon } from '../../Icon';\nimport { DraggableZone } from '../../utilities/DraggableZone/index';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport {\n  useBoolean,\n  useMergedRefs,\n  useWarnings,\n  useConst,\n  useSetTimeout,\n  useId,\n  useUnmount,\n} from '@fluentui/react-hooks';\nimport type { IFocusTrapZone } from '../../FocusTrapZone';\nimport type { IDragOptions, IModalProps, IModalStyleProps, IModalStyles } from './Modal.types';\nimport type { ILayerProps } from '../../Layer';\nimport type { ICoordinates, IDragData } from '../../utilities/DraggableZone/index';\n\n// @TODO - need to change this to a panel whenever the breakpoint is under medium (verify the spec)\n\ninterface IModalInternalState {\n  onModalCloseTimer: number;\n  allowTouchBodyScroll?: boolean;\n  scrollableContent: HTMLDivElement | null;\n  lastSetCoordinates: ICoordinates;\n  /** Minimum clamped position, if dragging and clamping (`dragOptions.keepInBounds`) are enabled */\n  minPosition?: ICoordinates;\n  /** Maximum clamped position, if dragging and clamping (`dragOptions.keepInBounds`) are enabled */\n  maxPosition?: ICoordinates;\n  events: EventGroup;\n  /** Ensures we dispose the same keydown callback as was registered */\n  disposeOnKeyDown?: () => void;\n  /** Ensures we dispose the same keyup callback as was registered (also tracks whether keyup has been registered) */\n  disposeOnKeyUp?: () => void;\n  isInKeyboardMoveMode?: boolean;\n  hasBeenOpened?: boolean;\n}\n\nconst ZERO: ICoordinates = { x: 0, y: 0 };\n\nconst DEFAULT_PROPS: Partial<IModalProps> = {\n  isOpen: false,\n  isDarkOverlay: true,\n  className: '',\n  containerClassName: '',\n};\n\nconst getClassNames = classNamesFunction<IModalStyleProps, IModalStyles>();\n\nconst getMoveDelta = (ev: React.KeyboardEvent<HTMLElement>): number => {\n  let delta = 10;\n  if (ev.shiftKey) {\n    if (!ev.ctrlKey) {\n      delta = 50;\n    }\n  } else if (ev.ctrlKey) {\n    delta = 1;\n  }\n\n  return delta;\n};\n\nconst useComponentRef = (props: IModalProps, focusTrapZone: React.RefObject<IFocusTrapZone>) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      focus() {\n        if (focusTrapZone.current) {\n          focusTrapZone.current.focus();\n        }\n      },\n    }),\n    [focusTrapZone],\n  );\n};\n\nexport const ModalBase: React.FunctionComponent<IModalProps> = React.forwardRef<HTMLDivElement, IModalProps>(\n  (propsWithoutDefaults, ref) => {\n    const props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n    const {\n      allowTouchBodyScroll,\n      className,\n      children,\n      containerClassName,\n      scrollableContentClassName,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      ignoreExternalFocusing,\n      isBlocking,\n      isAlert,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      onDismiss,\n      layerProps,\n      overlay,\n      isOpen,\n      titleAriaId,\n      styles,\n      subtitleAriaId,\n      theme,\n      topOffsetFixed,\n      responsiveMode,\n      // eslint-disable-next-line deprecation/deprecation\n      onLayerDidMount,\n      isModeless,\n      dragOptions,\n      onDismissed,\n      enableAriaHiddenSiblings,\n    } = props;\n\n    const rootRef = React.useRef<HTMLDivElement>(null);\n    const focusTrapZone = React.useRef<IFocusTrapZone>(null);\n    const focusTrapZoneElm = React.useRef<HTMLDivElement>(null);\n    const mergedRef = useMergedRefs(rootRef, ref);\n\n    const modalResponsiveMode = useResponsiveMode(mergedRef);\n\n    const focusTrapZoneId = useId('ModalFocusTrapZone');\n\n    const win = useWindow();\n\n    const { setTimeout, clearTimeout } = useSetTimeout();\n\n    const [isModalOpen, setIsModalOpen] = React.useState(isOpen);\n    const [isVisible, setIsVisible] = React.useState(isOpen);\n    const [coordinates, setCoordinates] = React.useState<ICoordinates>(ZERO);\n    const [modalRectangleTop, setModalRectangleTop] = React.useState<number | undefined>();\n\n    const [isModalMenuOpen, { toggle: toggleModalMenuOpen, setFalse: setModalMenuClose }] = useBoolean(false);\n\n    const internalState = useConst<IModalInternalState>(() => ({\n      onModalCloseTimer: 0,\n      allowTouchBodyScroll,\n      scrollableContent: null,\n      lastSetCoordinates: ZERO,\n      events: new EventGroup({}),\n    }));\n\n    const { keepInBounds } = dragOptions || ({} as IDragOptions);\n    const isAlertRole = isAlert ?? (isBlocking && !isModeless);\n\n    const layerClassName = layerProps === undefined ? '' : layerProps.className;\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      containerClassName,\n      scrollableContentClassName,\n      isOpen,\n      isVisible,\n      hasBeenOpened: internalState.hasBeenOpened,\n      modalRectangleTop,\n      topOffsetFixed,\n      isModeless,\n      layerClassName,\n      windowInnerHeight: win?.innerHeight,\n      isDefaultDragHandle: dragOptions && !dragOptions.dragHandleSelector,\n    });\n\n    const mergedLayerProps: ILayerProps = {\n      eventBubblingEnabled: false,\n      ...layerProps,\n      onLayerDidMount: layerProps && layerProps.onLayerDidMount ? layerProps.onLayerDidMount : onLayerDidMount,\n      insertFirst: isModeless,\n      className: classNames.layer,\n    };\n\n    // Allow the user to scroll within the modal but not on the body\n    const allowScrollOnModal = React.useCallback(\n      (elt: HTMLDivElement | null): void => {\n        if (elt) {\n          if (internalState.allowTouchBodyScroll) {\n            allowOverscrollOnElement(elt, internalState.events);\n          } else {\n            allowScrollOnElement(elt, internalState.events);\n          }\n        } else {\n          internalState.events.off(internalState.scrollableContent);\n        }\n        internalState.scrollableContent = elt;\n      },\n      [internalState],\n    );\n\n    const registerInitialModalPosition = (): void => {\n      const dialogMain = focusTrapZoneElm.current;\n      const modalRectangle = dialogMain?.getBoundingClientRect();\n\n      if (modalRectangle) {\n        if (topOffsetFixed) {\n          setModalRectangleTop(modalRectangle.top);\n        }\n\n        if (keepInBounds) {\n          // x/y are unavailable in IE, so use the equivalent left/top\n          internalState.minPosition = { x: -modalRectangle.left, y: -modalRectangle.top };\n          internalState.maxPosition = { x: modalRectangle.left, y: modalRectangle.top };\n        }\n      }\n    };\n\n    /**\n     * Clamps an axis to a specified min and max position.\n     *\n     * @param axis A string that represents the axis (x/y).\n     * @param position The position on the axis.\n     */\n    const getClampedAxis = React.useCallback(\n      (axis: keyof ICoordinates, position: number) => {\n        const { minPosition, maxPosition } = internalState;\n        if (keepInBounds && minPosition && maxPosition) {\n          position = Math.max(minPosition[axis], position);\n          position = Math.min(maxPosition[axis], position);\n        }\n        return position;\n      },\n      [keepInBounds, internalState],\n    );\n\n    const handleModalClose = (): void => {\n      internalState.lastSetCoordinates = ZERO;\n\n      setModalMenuClose();\n      internalState.isInKeyboardMoveMode = false;\n      setIsModalOpen(false);\n      setCoordinates(ZERO);\n\n      internalState.disposeOnKeyUp?.();\n\n      onDismissed?.();\n    };\n\n    const handleDragStart = React.useCallback((): void => {\n      setModalMenuClose();\n      internalState.isInKeyboardMoveMode = false;\n    }, [internalState, setModalMenuClose]);\n\n    const handleDrag = React.useCallback(\n      (ev: React.MouseEvent<HTMLElement> & React.TouchEvent<HTMLElement>, dragData: IDragData): void => {\n        setCoordinates(prevValue => ({\n          x: getClampedAxis('x', prevValue.x + dragData.delta.x),\n          y: getClampedAxis('y', prevValue.y + dragData.delta.y),\n        }));\n      },\n      [getClampedAxis],\n    );\n\n    const handleDragStop = React.useCallback((): void => {\n      if (focusTrapZone.current) {\n        focusTrapZone.current.focus();\n      }\n    }, []);\n\n    const handleEnterKeyboardMoveMode = () => {\n      // We need a global handleKeyDown event when we are in the move mode so that we can\n      // handle the key presses and the components inside the modal do not get the events\n      const handleKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n        if (ev.altKey && ev.ctrlKey && ev.keyCode === KeyCodes.space) {\n          // CTRL + ALT + SPACE is handled during keyUp\n          ev.preventDefault();\n          ev.stopPropagation();\n          return;\n        }\n\n        if (isModalMenuOpen && (ev.altKey || ev.keyCode === KeyCodes.escape)) {\n          setModalMenuClose();\n        }\n\n        if (internalState.isInKeyboardMoveMode && (ev.keyCode === KeyCodes.escape || ev.keyCode === KeyCodes.enter)) {\n          internalState.isInKeyboardMoveMode = false;\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n\n        if (internalState.isInKeyboardMoveMode) {\n          let handledEvent = true;\n          const delta = getMoveDelta(ev);\n\n          switch (ev.keyCode) {\n            /* eslint-disable no-fallthrough */\n            case KeyCodes.escape:\n              setCoordinates(internalState.lastSetCoordinates);\n            case KeyCodes.enter: {\n              // TODO: determine if fallthrough was intentional\n              /* eslint-enable no-fallthrough */\n              internalState.lastSetCoordinates = ZERO;\n              // setIsInKeyboardMoveMode(false);\n              break;\n            }\n            case KeyCodes.up: {\n              setCoordinates(prevValue => ({ x: prevValue.x, y: getClampedAxis('y', prevValue.y - delta) }));\n              break;\n            }\n            case KeyCodes.down: {\n              setCoordinates(prevValue => ({ x: prevValue.x, y: getClampedAxis('y', prevValue.y + delta) }));\n              break;\n            }\n            case KeyCodes.left: {\n              setCoordinates(prevValue => ({ x: getClampedAxis('x', prevValue.x - delta), y: prevValue.y }));\n              break;\n            }\n            case KeyCodes.right: {\n              setCoordinates(prevValue => ({ x: getClampedAxis('x', prevValue.x + delta), y: prevValue.y }));\n              break;\n            }\n            default: {\n              handledEvent = false;\n            }\n          }\n          if (handledEvent) {\n            ev.preventDefault();\n            ev.stopPropagation();\n          }\n        }\n      };\n\n      internalState.lastSetCoordinates = coordinates;\n      setModalMenuClose();\n      internalState.isInKeyboardMoveMode = true;\n\n      internalState.events.on(win, 'keydown', handleKeyDown, true /* useCapture */);\n      internalState.disposeOnKeyDown = () => {\n        internalState.events.off(win, 'keydown', handleKeyDown, true /* useCapture */);\n        internalState.disposeOnKeyDown = undefined;\n      };\n    };\n\n    const handleExitKeyboardMoveMode = () => {\n      internalState.lastSetCoordinates = ZERO;\n      internalState.isInKeyboardMoveMode = false;\n      internalState.disposeOnKeyDown?.();\n    };\n\n    const registerForKeyUp = (): void => {\n      const handleKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n        // Needs to handle the CTRL + ALT + SPACE key during keyup due to FireFox bug:\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1220143\n        if (ev.altKey && ev.ctrlKey && ev.keyCode === KeyCodes.space) {\n          if (elementContains(internalState.scrollableContent, ev.target as HTMLElement)) {\n            toggleModalMenuOpen();\n            ev.preventDefault();\n            ev.stopPropagation();\n          }\n        }\n      };\n\n      if (!internalState.disposeOnKeyUp) {\n        internalState.events.on(win, 'keyup', handleKeyUp, true /* useCapture */);\n        internalState.disposeOnKeyUp = () => {\n          internalState.events.off(win, 'keyup', handleKeyUp, true /* useCapture */);\n          internalState.disposeOnKeyUp = undefined;\n        };\n      }\n    };\n\n    React.useEffect(() => {\n      clearTimeout(internalState.onModalCloseTimer);\n      // Opening the dialog\n      if (isOpen) {\n        // This must be done after the modal content has rendered\n        requestAnimationFrame(() => setTimeout(registerInitialModalPosition, 0));\n\n        setIsModalOpen(true);\n\n        // Add a keyUp handler for all key up events once the dialog is open.\n        if (dragOptions) {\n          registerForKeyUp();\n        }\n\n        internalState.hasBeenOpened = true;\n        setIsVisible(true);\n      }\n\n      // Closing the dialog\n      if (!isOpen && isModalOpen) {\n        internalState.onModalCloseTimer = setTimeout(handleModalClose, parseFloat(animationDuration) * 1000);\n        setIsVisible(false);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run if isModalOpen or isOpen mutates.\n    }, [isModalOpen, isOpen]);\n\n    useUnmount(() => {\n      internalState.events.dispose();\n    });\n\n    useComponentRef(props, focusTrapZone);\n    useDebugWarnings(props);\n\n    const modalContent = (\n      <FocusTrapZone\n        id={focusTrapZoneId}\n        ref={focusTrapZoneElm}\n        componentRef={focusTrapZone}\n        className={classNames.main}\n        elementToFocusOnDismiss={elementToFocusOnDismiss}\n        isClickableOutsideFocusTrap={isModeless || isClickableOutsideFocusTrap || !isBlocking}\n        ignoreExternalFocusing={ignoreExternalFocusing}\n        forceFocusInsideTrap={isModeless ? !isModeless : forceFocusInsideTrap}\n        firstFocusableSelector={firstFocusableSelector}\n        focusPreviouslyFocusedInnerElement\n        onBlur={internalState.isInKeyboardMoveMode ? handleExitKeyboardMoveMode : undefined}\n        enableAriaHiddenSiblings={enableAriaHiddenSiblings}\n      >\n        {dragOptions && internalState.isInKeyboardMoveMode && (\n          <div className={classNames.keyboardMoveIconContainer}>\n            {dragOptions.keyboardMoveIconProps ? (\n              <Icon {...dragOptions.keyboardMoveIconProps} />\n            ) : (\n              <Icon iconName=\"move\" className={classNames.keyboardMoveIcon} />\n            )}\n          </div>\n        )}\n        <div ref={allowScrollOnModal} className={classNames.scrollableContent} data-is-scrollable>\n          {dragOptions && isModalMenuOpen && (\n            <dragOptions.menu\n              items={[\n                { key: 'move', text: dragOptions.moveMenuItemText, onClick: handleEnterKeyboardMoveMode },\n                { key: 'close', text: dragOptions.closeMenuItemText, onClick: handleModalClose },\n              ]}\n              onDismiss={setModalMenuClose}\n              alignTargetEdge\n              coverTarget\n              directionalHint={DirectionalHint.topLeftEdge}\n              directionalHintFixed\n              shouldFocusOnMount\n              target={internalState.scrollableContent}\n            />\n          )}\n          {children}\n        </div>\n      </FocusTrapZone>\n    );\n\n    return (\n      (isModalOpen && modalResponsiveMode! >= (responsiveMode || ResponsiveMode.small) && (\n        <Layer ref={mergedRef} {...mergedLayerProps}>\n          <Popup\n            role={isAlertRole ? 'alertdialog' : 'dialog'}\n            aria-modal={!isModeless}\n            ariaLabelledBy={titleAriaId}\n            ariaDescribedBy={subtitleAriaId}\n            onDismiss={onDismiss}\n            shouldRestoreFocus={!ignoreExternalFocusing}\n          >\n            <div className={classNames.root} role={!isModeless ? 'document' : undefined}>\n              {!isModeless && (\n                <Overlay\n                  aria-hidden={true}\n                  isDarkThemed={isDarkOverlay}\n                  onClick={isBlocking ? undefined : onDismiss}\n                  allowTouchBodyScroll={allowTouchBodyScroll}\n                  {...overlay}\n                />\n              )}\n              {dragOptions ? (\n                <DraggableZone\n                  handleSelector={dragOptions.dragHandleSelector || `#${focusTrapZoneId}`}\n                  preventDragSelector=\"button\"\n                  onStart={handleDragStart}\n                  onDragChange={handleDrag}\n                  onStop={handleDragStop}\n                  position={coordinates}\n                >\n                  {modalContent}\n                </DraggableZone>\n              ) : (\n                modalContent\n              )}\n            </div>\n          </Popup>\n        </Layer>\n      )) ||\n      null\n    );\n  },\n);\nModalBase.displayName = 'Modal';\n\nfunction useDebugWarnings(props: IModalProps) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: 'Modal',\n      props,\n      deprecations: { onLayerDidMount: 'layerProps.onLayerDidMount' },\n    });\n  }\n}\n", "import { AnimationVariables, getGlobalClassNames, ZIndexes } from '../../Styling';\nimport type { IModalStyleProps, IModalStyles } from './Modal.types';\n\nexport const animationDuration = AnimationVariables.durationValue2;\n\nconst globalClassNames = {\n  root: 'ms-Modal',\n  main: 'ms-Dialog-main',\n  scrollableContent: 'ms-Modal-scrollableContent',\n  isOpen: 'is-open',\n  layer: 'ms-Modal-Layer',\n};\n\nexport const getStyles = (props: IModalStyleProps): IModalStyles => {\n  const {\n    className,\n    containerClassName,\n    scrollableContentClassName,\n    isOpen,\n    isVisible,\n    hasBeenOpened,\n    modalRectangleTop,\n    theme,\n    topOffsetFixed,\n    isModeless,\n    layerClassName,\n    isDefaultDragHandle,\n    windowInnerHeight,\n  } = props;\n  const { palette, effects, fonts } = theme;\n\n  const classNames = getGlobalClassNames(globalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      {\n        backgroundColor: 'transparent',\n        position: isModeless ? 'absolute' : 'fixed',\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        opacity: 0,\n        pointerEvents: 'none',\n        transition: `opacity ${animationDuration}`,\n      },\n      topOffsetFixed &&\n        typeof modalRectangleTop === 'number' &&\n        hasBeenOpened && {\n          alignItems: 'flex-start',\n        },\n      isOpen && classNames.isOpen,\n      isVisible && {\n        opacity: 1,\n        pointerEvents: 'auto',\n      },\n      className,\n    ],\n    main: [\n      classNames.main,\n      {\n        boxShadow: effects.elevation64,\n        borderRadius: effects.roundedCorner2,\n        backgroundColor: palette.white,\n        boxSizing: 'border-box',\n        position: 'relative',\n        textAlign: 'left',\n        outline: '3px solid transparent',\n        maxHeight: 'calc(100% - 32px)',\n        maxWidth: 'calc(100% - 32px)',\n        minHeight: '176px',\n        minWidth: '288px',\n        overflowY: 'auto',\n        zIndex: isModeless ? ZIndexes.Layer : undefined,\n      },\n      topOffsetFixed &&\n        typeof modalRectangleTop === 'number' &&\n        hasBeenOpened && {\n          top: modalRectangleTop,\n        },\n      isDefaultDragHandle && {\n        cursor: 'move',\n      },\n      containerClassName,\n    ],\n    scrollableContent: [\n      classNames.scrollableContent,\n      {\n        overflowY: 'auto',\n        flexGrow: 1,\n        maxHeight: '100vh',\n        selectors: {\n          ['@supports (-webkit-overflow-scrolling: touch)']: {\n            maxHeight: windowInnerHeight,\n          },\n        },\n      },\n      scrollableContentClassName,\n    ],\n    layer: isModeless && [\n      layerClassName,\n      classNames.layer,\n      {\n        position: 'static',\n        width: 'unset',\n        height: 'unset',\n      },\n    ],\n    keyboardMoveIconContainer: {\n      position: 'absolute',\n      display: 'flex',\n      justifyContent: 'center',\n      width: '100%',\n      padding: '3px 0px',\n    },\n    keyboardMoveIcon: {\n      // eslint-disable-next-line deprecation/deprecation\n      fontSize: fonts.xLargePlus.fontSize,\n      width: '24px',\n    },\n  };\n};\n", "import * as React from 'react';\nimport {\n  classNamesFunction,\n  getNativeProps,\n  divProperties,\n  enableBodyScroll,\n  disableBodyScroll,\n  initializeComponentRef,\n} from '../../Utilities';\nimport type { IOverlayProps, IOverlayStyleProps, IOverlayStyles } from './Overlay.types';\n\nconst getClassNames = classNamesFunction<IOverlayStyleProps, IOverlayStyles>();\n\nexport class OverlayBase extends React.Component<IOverlayProps, {}> {\n  private _allowTouchBodyScroll: boolean;\n\n  constructor(props: IOverlayProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    const { allowTouchBodyScroll = false } = this.props;\n    this._allowTouchBodyScroll = allowTouchBodyScroll;\n  }\n\n  public componentDidMount(): void {\n    !this._allowTouchBodyScroll && disableBodyScroll();\n  }\n\n  public componentWillUnmount(): void {\n    !this._allowTouchBodyScroll && enableBodyScroll();\n  }\n\n  public render(): JSX.Element {\n    const { isDarkThemed: isDark, className, theme, styles } = this.props;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isDark,\n    });\n\n    return <div {...divProps} className={classNames.root} />;\n  }\n}\n", "import { HighContrastSelector, getGlobalClassNames } from '../../Styling';\nimport type { IOverlayStyleProps, IOverlayStyles } from './Overlay.types';\n\nconst GlobalClassNames = {\n  root: 'ms-Overlay',\n  rootDark: 'ms-Overlay--dark',\n};\n\nexport const getStyles = (props: IOverlayStyleProps): IOverlayStyles => {\n  const { className, theme, isNone, isDark } = props;\n\n  const { palette } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        backgroundColor: palette.whiteTranslucent40,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        position: 'absolute',\n\n        selectors: {\n          [HighContrastSelector]: {\n            border: '1px solid WindowText',\n            opacity: 0,\n          },\n        },\n      },\n\n      isNone && {\n        visibility: 'hidden',\n      },\n\n      isDark && [\n        classNames.rootDark,\n        {\n          backgroundColor: palette.blackTranslucent40,\n        },\n      ],\n\n      className,\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { OverlayBase } from './Overlay.base';\nimport { getStyles } from './Overlay.styles';\nimport type { IOverlayProps, IOverlayStyleProps, IOverlayStyles } from './Overlay.types';\n\nexport const Overlay: React.FunctionComponent<IOverlayProps> = styled<\n  IOverlayProps,\n  IOverlayStyleProps,\n  IOverlayStyles\n>(OverlayBase, getStyles, undefined, {\n  scope: 'Overlay',\n});\n", "import * as React from 'react';\nimport { getClassNames } from './DraggableZone.styles';\nimport { on } from '../../Utilities';\nimport type { IDraggableZoneProps, ICoordinates, IDragData } from './DraggableZone.types';\n\nexport interface IDraggableZoneState {\n  isDragging: boolean;\n  position: ICoordinates;\n  lastPosition?: ICoordinates;\n}\n\nconst eventMapping = {\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    stop: 'touchend',\n  },\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    stop: 'mouseup',\n  },\n};\n\n// These are needed so that we can generalize the events\n// and so we have access to clientX and clientY in the touch events\ntype MouseTouchEvent<T> = React.MouseEvent<T> & React.TouchEvent<T> & Event;\n\nexport class DraggableZone extends React.Component<IDraggableZoneProps, IDraggableZoneState> {\n  private _touchId?: number;\n  private _currentEventType = eventMapping.mouse;\n  private _events: (() => void)[] = [];\n\n  constructor(props: IDraggableZoneProps) {\n    super(props);\n\n    this.state = {\n      isDragging: false,\n      position: this.props.position || { x: 0, y: 0 },\n      lastPosition: undefined,\n    };\n  }\n\n  public componentDidUpdate(prevProps: IDraggableZoneProps) {\n    if (this.props.position && (!prevProps.position || this.props.position !== prevProps.position)) {\n      this.setState({ position: this.props.position });\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.forEach(dispose => dispose());\n  }\n\n  public render() {\n    const child: any = React.Children.only(this.props.children);\n    const { props } = child;\n    const { position } = this.props;\n    const { position: statePosition, isDragging } = this.state;\n    let x = statePosition.x;\n    let y = statePosition.y;\n\n    if (position && !isDragging) {\n      x = position.x;\n      y = position.y;\n    }\n\n    return React.cloneElement(child, {\n      style: {\n        ...props.style,\n        transform: `translate(${x}px, ${y}px)`,\n      },\n      className: getClassNames(props.className, this.state.isDragging).root,\n      onMouseDown: this._onMouseDown,\n      onMouseUp: this._onMouseUp,\n      onTouchStart: this._onTouchStart,\n      onTouchEnd: this._onTouchEnd,\n    });\n  }\n\n  private _onMouseDown = (event: MouseTouchEvent<HTMLElement>) => {\n    const onMouseDown = (React.Children.only(this.props.children) as any).props.onMouseDown;\n    if (onMouseDown) {\n      onMouseDown(event);\n    }\n\n    this._currentEventType = eventMapping.mouse;\n    return this._onDragStart(event);\n  };\n\n  private _onMouseUp = (event: MouseTouchEvent<HTMLElement>) => {\n    const onMouseUp = (React.Children.only(this.props.children) as any).props.onMouseUp;\n    if (onMouseUp) {\n      onMouseUp(event);\n    }\n\n    this._currentEventType = eventMapping.mouse;\n    return this._onDragStop(event);\n  };\n\n  private _onTouchStart = (event: MouseTouchEvent<HTMLElement>) => {\n    const onTouchStart = (React.Children.only(this.props.children) as any).props.onTouchStart;\n    if (onTouchStart) {\n      onTouchStart(event);\n    }\n\n    this._currentEventType = eventMapping.touch;\n    return this._onDragStart(event);\n  };\n\n  private _onTouchEnd = (event: MouseTouchEvent<HTMLElement>) => {\n    const onTouchEnd = (React.Children.only(this.props.children) as any).props.onTouchEnd;\n    if (onTouchEnd) {\n      onTouchEnd(event);\n    }\n\n    this._currentEventType = eventMapping.touch;\n    this._onDragStop(event);\n  };\n\n  private _onDragStart = (event: MouseTouchEvent<HTMLElement>) => {\n    // Only handle left click for dragging\n    if (typeof event.button === 'number' && event.button !== 0) {\n      return false;\n    }\n\n    // If the target doesn't match the handleSelector OR\n    // if the target does match the preventDragSelector, bail out\n    if (\n      (this.props.handleSelector && !this._matchesSelector(event.target as HTMLElement, this.props.handleSelector)) ||\n      (this.props.preventDragSelector &&\n        this._matchesSelector(event.target as HTMLElement, this.props.preventDragSelector))\n    ) {\n      return;\n    }\n\n    // Remember the touch identifier if this is a touch event so we can\n    // distinguish between individual touches in multitouch scenarios\n    // by remembering which touch point we were given\n    this._touchId = this._getTouchId(event);\n\n    const position = this._getControlPosition(event);\n    if (position === undefined) {\n      return;\n    }\n\n    const dragData = this._createDragDataFromPosition(position);\n    this.props.onStart && this.props.onStart(event, dragData);\n\n    this.setState({\n      isDragging: true,\n      lastPosition: position,\n    });\n\n    // hook up the appropriate mouse/touch events to the body to ensure\n    // smooth dragging\n    this._events = [\n      on(document.body, this._currentEventType.move, this._onDrag, true /* use capture phase */),\n      on(document.body, this._currentEventType.stop, this._onDragStop, true /* use capture phase */),\n    ];\n  };\n\n  private _onDrag = (event: MouseTouchEvent<HTMLElement>) => {\n    // Prevent scrolling on mobile devices\n    if (event.type === 'touchmove') {\n      event.preventDefault();\n    }\n\n    const position = this._getControlPosition(event);\n    if (!position) {\n      return;\n    }\n\n    // create the updated drag data from the position data\n    const updatedData = this._createUpdatedDragData(this._createDragDataFromPosition(position));\n    const updatedPosition = updatedData.position;\n\n    this.props.onDragChange && this.props.onDragChange(event, updatedData);\n\n    this.setState({\n      position: updatedPosition,\n      lastPosition: position,\n    });\n  };\n\n  private _onDragStop = (event: MouseTouchEvent<HTMLElement>) => {\n    if (!this.state.isDragging) {\n      return;\n    }\n\n    const position = this._getControlPosition(event);\n    if (!position) {\n      return;\n    }\n\n    const baseDragData = this._createDragDataFromPosition(position);\n\n    // Set dragging to false and reset the lastPosition\n    this.setState({\n      isDragging: false,\n      lastPosition: undefined,\n    });\n\n    this.props.onStop && this.props.onStop(event, baseDragData);\n\n    if (this.props.position) {\n      this.setState({\n        position: this.props.position,\n      });\n    }\n\n    // Remove event handlers\n    this._events.forEach(dispose => dispose());\n  };\n\n  /**\n   * Get the control position based off the event that fired\n   * @param event - The event to get offsets from\n   */\n  private _getControlPosition(event: MouseTouchEvent<HTMLElement>): ICoordinates | undefined {\n    const touchObj = this._getActiveTouch(event);\n\n    // did we get the right touch?\n    if (this._touchId !== undefined && !touchObj) {\n      return undefined;\n    }\n\n    const eventToGetOffset = touchObj || event;\n    return {\n      x: eventToGetOffset.clientX,\n      y: eventToGetOffset.clientY,\n    };\n  }\n\n  /**\n   * Get the active touch point that we have saved from the event's TouchList\n   * @param event - The event used to get the TouchList for the active touch point\n   */\n  private _getActiveTouch(event: MouseTouchEvent<HTMLElement>): React.Touch | undefined {\n    return (\n      (event.targetTouches && this._findTouchInTouchList(event.targetTouches)) ||\n      (event.changedTouches && this._findTouchInTouchList(event.changedTouches))\n    );\n  }\n\n  /**\n   * Get the initial touch identifier associated with the given event\n   * @param event - The event that contains the TouchList\n   */\n  private _getTouchId(event: MouseTouchEvent<HTMLElement>): number | undefined {\n    const touch: React.Touch | undefined =\n      (event.targetTouches && event.targetTouches[0]) || (event.changedTouches && event.changedTouches[0]);\n\n    if (touch) {\n      return touch.identifier;\n    }\n  }\n\n  /**\n   * Returns if an element (or any of the element's parents) match the given selector\n   */\n  private _matchesSelector(element: HTMLElement | null, selector: string): boolean {\n    if (!element || element === document.body) {\n      return false;\n    }\n\n    const matchesSelectorFn: Function =\n      element.matches || element.webkitMatchesSelector || (element as any).msMatchesSelector; /* for IE */\n\n    if (!matchesSelectorFn) {\n      return false;\n    }\n\n    return matchesSelectorFn.call(element, selector) || this._matchesSelector(element.parentElement, selector);\n  }\n\n  /**\n   * Attempts to find the Touch that matches the identifier  we stored in dragStart\n   * @param touchList The TouchList to look for the stored identifier from dragStart\n   */\n  private _findTouchInTouchList(touchList: React.TouchList): React.Touch | undefined {\n    if (this._touchId === undefined) {\n      return;\n    }\n\n    for (let i = 0; i < touchList.length; i++) {\n      if (touchList[i].identifier === this._touchId) {\n        return touchList[i];\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Create DragData based off of the last known position and the new position passed in\n   * @param position The new position as part of the drag\n   */\n  private _createDragDataFromPosition(position: ICoordinates): IDragData {\n    const { lastPosition } = this.state;\n\n    // If we have no lastPosition, use the given position\n    // for last position\n    if (lastPosition === undefined) {\n      return {\n        delta: { x: 0, y: 0 },\n        lastPosition: position,\n        position,\n      };\n    }\n\n    return {\n      delta: {\n        x: position.x - lastPosition.x,\n        y: position.y - lastPosition.y,\n      },\n      lastPosition,\n      position,\n    };\n  }\n\n  /**\n   * Creates an updated DragData based off the current position and given baseDragData\n   * @param baseDragData The base DragData (from _createDragDataFromPosition) used to calculate the updated positions\n   */\n  private _createUpdatedDragData(baseDragData: IDragData): IDragData {\n    const { position } = this.state;\n    return {\n      position: {\n        x: position.x + baseDragData.delta.x,\n        y: position.y + baseDragData.delta.y,\n      },\n      delta: baseDragData.delta,\n      lastPosition: position,\n    };\n  }\n}\n", "import { memoizeFunction } from '../../Utilities';\nimport { mergeStyles } from '../../Styling';\n\nexport interface IDraggableZoneStyles {\n  root: string;\n}\n\nexport const getClassNames = memoizeFunction(\n  (className: string, isDragging: boolean): IDraggableZoneStyles => {\n    return {\n      root: mergeStyles(\n        className,\n        isDragging && {\n          touchAction: 'none',\n          selectors: {\n            '& *': {\n              userSelect: 'none',\n            },\n          },\n        },\n      ),\n    };\n  },\n);\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ModalBase } from './Modal.base';\nimport { getStyles } from './Modal.styles';\nimport type { IModalProps, IModalStyleProps, IModalStyles } from './Modal.types';\n\nexport const Modal: React.FunctionComponent<IModalProps> = styled<IModalProps, IModalStyleProps, IModalStyles>(\n  ModalBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Modal',\n    fields: ['theme', 'styles', 'enableAriaHiddenSiblings'],\n  },\n);\nModal.displayName = 'Modal';\n", "import * as React from 'react';\nimport { useControllableValue, useId, useWarnings } from '@fluentui/react-hooks';\nimport { classNamesFunction, getNativeProps, inputProperties, useFocusRects } from '@fluentui/utilities';\nimport { Label } from '../Label/Label';\nimport type { IToggleProps, IToggleStyleProps, IToggleStyles, IToggle } from './Toggle.types';\n\nconst getClassNames = classNamesFunction<IToggleStyleProps, IToggleStyles>();\n\nconst COMPONENT_NAME = 'Toggle';\n\nexport const ToggleBase: React.FunctionComponent<IToggleProps> = React.forwardRef<HTMLElement, IToggleProps>(\n  (props, forwardedRef) => {\n    const {\n      as: RootType = 'div',\n      ariaLabel,\n      checked: controlledChecked,\n      className,\n      defaultChecked = false,\n      disabled,\n      inlineLabel,\n      label,\n      // eslint-disable-next-line deprecation/deprecation\n      offAriaLabel,\n      offText,\n      // eslint-disable-next-line deprecation/deprecation\n      onAriaLabel,\n      onChange,\n      // eslint-disable-next-line deprecation/deprecation\n      onChanged,\n      onClick: onToggleClick,\n      onText,\n      role,\n      styles,\n      theme,\n    } = props;\n\n    const [checked, setChecked] = useControllableValue(\n      controlledChecked,\n      defaultChecked,\n      React.useCallback(\n        (ev: React.MouseEvent<HTMLElement>, isChecked: boolean) => {\n          onChange?.(ev, isChecked);\n          onChanged?.(isChecked);\n        },\n        [onChange, onChanged],\n      ),\n    );\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      checked,\n      inlineLabel,\n      onOffMissing: !onText && !offText,\n    });\n    const badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    const id = useId(COMPONENT_NAME, props.id);\n    const labelId = `${id}-label`;\n    const stateTextId = `${id}-stateText`;\n    const stateText = checked ? onText : offText;\n    const toggleNativeProps = getNativeProps<React.HTMLAttributes<HTMLButtonElement>>(props, inputProperties, [\n      'defaultChecked',\n    ]);\n\n    // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label, if existent\n\n    let labelledById: string | undefined = undefined;\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      }\n      if (stateText && !labelledById) {\n        labelledById = stateTextId;\n      }\n    }\n\n    const toggleButton = React.useRef<HTMLButtonElement>(null);\n    useFocusRects(toggleButton);\n    useComponentRef(props, checked, toggleButton);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n      useWarnings({\n        name: COMPONENT_NAME,\n        props,\n        deprecations: {\n          offAriaLabel: undefined,\n          onAriaLabel: 'ariaLabel',\n          onChanged: 'onChange',\n        },\n        mutuallyExclusive: { checked: 'defaultChecked' },\n      });\n    }\n\n    const onClick = (ev: React.MouseEvent<HTMLElement>) => {\n      if (!disabled) {\n        setChecked(!checked, ev);\n        if (onToggleClick) {\n          onToggleClick(ev);\n        }\n      }\n    };\n\n    const slotProps = {\n      root: {\n        className: classNames.root,\n        hidden: toggleNativeProps.hidden,\n      },\n      label: {\n        children: label,\n        className: classNames.label,\n        htmlFor: id,\n        id: labelId,\n      },\n      container: {\n        className: classNames.container,\n      },\n      pill: {\n        ...toggleNativeProps,\n        'aria-disabled': disabled,\n        'aria-checked': checked,\n        'aria-label': ariaLabel ? ariaLabel : badAriaLabel,\n        'aria-labelledby': labelledById,\n        className: classNames.pill,\n        'data-is-focusable': true,\n        'data-ktp-target': true,\n        disabled: disabled,\n        id: id,\n        onClick: onClick,\n        ref: toggleButton,\n        role: role ? role : 'switch',\n        type: 'button' as React.ButtonHTMLAttributes<HTMLButtonElement>['type'],\n      },\n      thumb: {\n        className: classNames.thumb,\n      },\n      stateText: {\n        children: stateText,\n        className: classNames.text,\n        htmlFor: id,\n        id: stateTextId,\n      },\n    };\n\n    return (\n      <RootType ref={forwardedRef as React.Ref<HTMLDivElement>} {...slotProps.root}>\n        {label && <Label {...slotProps.label} />}\n        <div {...slotProps.container}>\n          <button {...slotProps.pill}>\n            <span {...slotProps.thumb} />\n          </button>\n          {((checked && onText) || offText) && <Label {...slotProps.stateText} />}\n        </div>\n      </RootType>\n    );\n  },\n);\n\nToggleBase.displayName = COMPONENT_NAME + 'Base';\n\nconst useComponentRef = (\n  props: IToggleProps,\n  isChecked: boolean | undefined,\n  toggleButtonRef: React.RefObject<IToggle>,\n) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      get checked() {\n        return !!isChecked;\n      },\n      focus() {\n        if (toggleButtonRef.current) {\n          toggleButtonRef.current.focus();\n        }\n      },\n    }),\n    [isChecked, toggleButtonRef],\n  );\n};\n", "import {\n  HighContrastSelector,\n  getFocusStyle,\n  FontWeights,\n  getHighContrastNoAdjustStyle,\n} from '@fluentui/style-utilities';\nimport type { IToggleStyleProps, IToggleStyles } from './Toggle.types';\n\nconst DEFAULT_PILL_WIDTH = 40;\nconst DEFAULT_PILL_HEIGHT = 20;\nconst DEFAULT_THUMB_SIZE = 12;\n\nexport const getStyles = (props: IToggleStyleProps): IToggleStyles => {\n  const { theme, className, disabled, checked, inlineLabel, onOffMissing } = props;\n  const { semanticColors, palette } = theme;\n\n  // Tokens\n  const pillUncheckedBackground = semanticColors.bodyBackground;\n  const pillCheckedBackground = semanticColors.inputBackgroundChecked;\n  const pillCheckedHoveredBackground = semanticColors.inputBackgroundCheckedHovered;\n  const thumbUncheckedHoveredBackground = palette.neutralDark;\n  const pillCheckedDisabledBackground = semanticColors.disabledBodySubtext;\n  const thumbBackground = semanticColors.smallInputBorder;\n  const thumbCheckedBackground = semanticColors.inputForegroundChecked;\n  const thumbDisabledBackground = semanticColors.disabledBodySubtext;\n  const thumbCheckedDisabledBackground = semanticColors.disabledBackground;\n  const pillBorderColor = semanticColors.smallInputBorder;\n  const pillBorderHoveredColor = semanticColors.inputBorderHovered;\n  const pillBorderDisabledColor = semanticColors.disabledBodySubtext;\n  const textDisabledColor = semanticColors.disabledText;\n\n  return {\n    root: [\n      'ms-Toggle',\n      checked && 'is-checked',\n      !disabled && 'is-enabled',\n      disabled && 'is-disabled',\n      theme.fonts.medium,\n      {\n        marginBottom: '8px',\n      },\n      inlineLabel && {\n        display: 'flex',\n        alignItems: 'center',\n      },\n      className,\n    ],\n\n    label: [\n      'ms-Toggle-label',\n      { display: 'inline-block' },\n      disabled && {\n        color: textDisabledColor,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n          },\n        },\n      },\n      inlineLabel &&\n        !onOffMissing && {\n          marginRight: 16,\n        },\n      onOffMissing &&\n        inlineLabel && {\n          order: 1,\n          marginLeft: 16,\n        },\n      inlineLabel && { wordBreak: 'break-word' },\n    ],\n\n    container: [\n      'ms-Toggle-innerContainer',\n      {\n        display: 'flex',\n        position: 'relative',\n      },\n    ],\n\n    pill: [\n      'ms-Toggle-background',\n      getFocusStyle(theme, { inset: -3 }),\n      {\n        fontSize: '20px',\n        boxSizing: 'border-box',\n        width: DEFAULT_PILL_WIDTH,\n        height: DEFAULT_PILL_HEIGHT,\n        borderRadius: DEFAULT_PILL_HEIGHT / 2,\n        transition: 'all 0.1s ease',\n        border: `1px solid ${pillBorderColor}`,\n        background: pillUncheckedBackground,\n        cursor: 'pointer',\n        display: 'flex',\n        alignItems: 'center',\n        padding: '0 3px',\n      },\n      !disabled && [\n        !checked && {\n          selectors: {\n            ':hover': [\n              {\n                borderColor: pillBorderHoveredColor,\n              },\n            ],\n            ':hover .ms-Toggle-thumb': [\n              {\n                backgroundColor: thumbUncheckedHoveredBackground,\n                selectors: {\n                  [HighContrastSelector]: {\n                    borderColor: 'Highlight',\n                  },\n                },\n              },\n            ],\n          },\n        },\n        checked && [\n          {\n            background: pillCheckedBackground,\n            borderColor: 'transparent',\n            justifyContent: 'flex-end',\n          },\n          {\n            selectors: {\n              ':hover': [\n                {\n                  backgroundColor: pillCheckedHoveredBackground,\n                  borderColor: 'transparent',\n                  selectors: {\n                    [HighContrastSelector]: {\n                      backgroundColor: 'Highlight',\n                    },\n                  },\n                },\n              ],\n              [HighContrastSelector]: {\n                backgroundColor: 'Highlight',\n                ...getHighContrastNoAdjustStyle(),\n              },\n            },\n          },\n        ],\n      ],\n      disabled && [\n        {\n          cursor: 'default',\n        },\n        !checked && [\n          {\n            borderColor: pillBorderDisabledColor,\n          },\n        ],\n        checked && [\n          {\n            backgroundColor: pillCheckedDisabledBackground,\n            borderColor: 'transparent',\n            justifyContent: 'flex-end',\n          },\n        ],\n      ],\n      !disabled && {\n        selectors: {\n          '&:hover': {\n            selectors: {\n              [HighContrastSelector]: {\n                borderColor: 'Highlight',\n              },\n            },\n          },\n        },\n      },\n    ],\n\n    thumb: [\n      'ms-Toggle-thumb',\n      {\n        display: 'block',\n        width: DEFAULT_THUMB_SIZE,\n        height: DEFAULT_THUMB_SIZE,\n        borderRadius: '50%',\n        transition: 'all 0.1s ease',\n        backgroundColor: thumbBackground,\n        /* Border is added to handle high contrast mode for Firefox */\n        borderColor: 'transparent',\n        borderWidth: DEFAULT_THUMB_SIZE / 2,\n        borderStyle: 'solid',\n        boxSizing: 'border-box',\n      },\n      !disabled &&\n        checked && [\n          {\n            backgroundColor: thumbCheckedBackground,\n            selectors: {\n              [HighContrastSelector]: {\n                backgroundColor: 'Window',\n                borderColor: 'Window',\n              },\n            },\n          },\n        ],\n      disabled && [\n        !checked && [\n          {\n            backgroundColor: thumbDisabledBackground,\n          },\n        ],\n        checked && [\n          {\n            backgroundColor: thumbCheckedDisabledBackground,\n          },\n        ],\n      ],\n    ],\n\n    text: [\n      'ms-Toggle-stateText',\n      {\n        selectors: {\n          // Workaround: make rules more specific than Label rules.\n          '&&': {\n            padding: '0',\n            margin: '0 8px',\n            userSelect: 'none',\n            fontWeight: FontWeights.regular,\n          },\n        },\n      },\n      disabled && {\n        selectors: {\n          '&&': {\n            color: textDisabledColor,\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'GrayText',\n              },\n            },\n          },\n        },\n      },\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '@fluentui/utilities';\nimport { ToggleBase } from './Toggle.base';\nimport { getStyles } from './Toggle.styles';\nimport type { IToggleProps, IToggleStyleProps, IToggleStyles } from './Toggle.types';\n\nexport const Toggle: React.FunctionComponent<IToggleProps> = styled<IToggleProps, IToggleStyleProps, IToggleStyles>(\n  ToggleBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Toggle',\n  },\n);\n", "/** @jsx jsx */\nimport { jsx } from '@emotion/react'\nimport { DatePicker } from '@fluentui/react'\nimport { parseISO } from 'date-fns/esm'\nimport { useContext } from 'react'\nimport { BaseWindow } from 'web-init/src/window'\nimport { shortFormatDate } from 'web-utils/src/formatDate'\nimport { IBaseFieldProps } from '../../../../../ext/types/__form'\nimport set from 'lodash.set'\ndeclare const window: BaseWindow\n\nexport const WDate = ({ name, internalChange, ctx }: IBaseFieldProps) => {\n  const form = useContext(ctx)\n  const field = form.config.fields[name]\n\n  if (!field) return null\n  const state = field.state\n\n  let type = 'text'\n  if (['number'].indexOf(state.type) >= 0) type = state.type\n\n  let date = state.value\n  if (!(date instanceof Date)) {\n    date = parseISO(date)\n  }\n  if (isNaN(date as any)) {\n    date = new Date()\n  }\n\n  return (\n    <DatePicker\n      value={date}\n      formatDate={(date: any) => {\n        if (date instanceof Date && !isNaN(date as any)) {\n          return shortFormatDate(date)\n        }\n      }}\n      onSelectDate={(value) => {\n        set(form.db.data, name, value)\n        if (typeof state.onChange === 'function')\n          state.onChange(value, {\n            state: form,\n            row: form.db.data,\n            col: name,\n          })\n        internalChange(value)\n        state.render()\n      }}\n    />\n  )\n}\n", "/** @jsx jsx */\nimport { jsx } from '@emotion/react'\nimport { DatePicker, MaskedTextField } from '@fluentui/react'\nimport { parseISO } from 'date-fns/esm'\nimport set from 'lodash.set'\nimport { useContext, useEffect, useRef } from 'react'\nimport type { BaseWindow } from 'web-init/src/window'\nimport { shortFormatDate } from 'web-utils/src/formatDate'\nimport { useRender } from 'web-utils/src/useRender'\nimport type { IBaseFieldProps } from '../../../../../ext/types/__form'\ndeclare const window: BaseWindow\n\nexport const WDateTime = ({ name, internalChange, ctx }: IBaseFieldProps) => {\n  const render = useRender()\n  const form = useContext(ctx)\n  const field = form.config.fields[name]\n\n  if (!field) return null\n  const state = field.state\n\n  const fieldProps = !!state.fieldProps ? state.fieldProps : {}\n  const readOnly = !!fieldProps.readOnly ? fieldProps.readOnly : false\n\n  const _ = useRef({\n    date: new Date(),\n    time: '00:00',\n  })\n  const meta = _.current\n\n  useEffect(() => {\n    const date = state.value\n    if (!!date && !(date instanceof Date)) {\n      meta.date = parseISO(date)\n      meta.time = `${String(meta.date.getHours()).padStart(2, '0')}:${String(\n        meta.date.getMinutes()\n      ).padStart(2, '0')}`\n    } else if (!!date && date instanceof Date) {\n      meta.date = date\n      meta.time = `${String(meta.date.getHours()).padStart(2, '0')}:${String(\n        meta.date.getMinutes()\n      ).padStart(2, '0')}`\n    }\n\n    render()\n  }, [state.value])\n\n  return (\n    <div className=\"flex\">\n      <div className=\"w-full\">\n        <DatePicker\n          value={!state.value ? null : meta.date}\n          formatDate={(date: any) => {\n            if (date instanceof Date && !isNaN(date as any)) {\n              return shortFormatDate(date)\n            }\n          }}\n          onSelectDate={(value) => {\n            set(form.db.data, name, value)\n            if (typeof state.onChange === 'function')\n              state.onChange(value, {\n                state: form,\n                row: form.db.data,\n                col: name,\n              })\n            internalChange(value)\n            state.render()\n          }}\n          disabled={readOnly}\n        />\n      </div>\n      <div className=\"ml-2\" style={{ width: 62 }}>\n        <MaskedTextField\n          className=\"text-center\"\n          mask=\"99:99\"\n          value={meta.time}\n          onBlur={(e: any) => {\n            let val = e.target.value.replace('_', 0)\n\n            let times = val.split(':')\n\n            if (Number(times[0]) > 23) times[0] = 23\n            if (Number(times[1]) > 59) times[1] = 59\n\n            meta.time = times.join(':')\n\n            meta.date.setHours(Number(times[0]))\n            meta.date.setMinutes(Number(times[1]))\n\n            set(form.db.data, name, meta.date)\n            if (typeof state.onChange === 'function')\n              state.onChange(meta.date, {\n                state: form,\n                row: form.db.data,\n                col: name,\n              })\n\n            internalChange(meta.date)\n            state.render()\n          }}\n          disabled={readOnly}\n        />\n      </div>\n    </div>\n  )\n}\n", "/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { TextField } from '@fluentui/react'\nimport { useContext, useEffect, useRef } from 'react'\nimport type { BaseWindow } from 'web-init/src/window'\nimport { useRender } from 'web-utils/src/useRender'\nimport type { IBaseFieldProps } from '../../../../../ext/types/__form'\nimport set from 'lodash.set'\nimport get from 'lodash.get'\n\ndeclare const window: BaseWindow\n\nexport const WText = ({ name, internalChange, ctx }: IBaseFieldProps) => {\n  const _ = useRef({\n    init: false,\n    value: '',\n  })\n  const meta = _.current\n  const form = useContext(ctx)\n  const field = form.config.fields[name]\n  const render = useRender()\n  if (!field) {\n    return null\n  }\n  const state = field.state\n\n  useEffect(() => {\n    meta.value = state.value || ''\n    if (state.type === 'money' && meta.init === false) {\n      meta.value = money(meta.value)\n    }\n    meta.init = true\n    render()\n  }, [state.value])\n\n  let type = 'text'\n  let rows = 1\n  let autoAdjustHeight = true\n  if (state.type === 'password') type = 'password'\n  if (!meta.init) return <>not init</>\n\n  return (\n    <>\n      <TextField\n        name={name}\n        css={css`\n          .ms-TextField-fieldGroup,\n          textarea {\n            min-height: 30px !important;\n          }\n        `}\n        {...state.fieldProps}\n        value={meta.value}\n        type={type}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter' && state.type !== 'multiline') {\n            e.stopPropagation()\n            e.preventDefault()\n            state.parent?.db.save()\n          }\n        }}\n        multiline={state.type === 'multiline'}\n        autoAdjustHeight={autoAdjustHeight}\n        rows={rows}\n        onBlur={() => {\n          if (state.type === 'money') {\n            meta.value = money(meta.value)\n            state.render()\n          }\n        }}\n        canRevealPassword={true}\n        onFocus={() => {\n          if (state.type === 'money') {\n            meta.value = meta.value.replace(/\\D/g, '')\n            state.render()\n          }\n        }}\n        onChange={(_, text) => {\n          set(form.db.data, name, text)\n          const value = get(form.db.data, name)\n\n          if (typeof state.onChange === 'function')\n            state.onChange(value, {\n              state: form,\n              row: form.db.data,\n              col: name,\n            })\n\n          if (value && ['number', 'money'].indexOf(state.type) >= 0) {\n            let cols = Number(value.replace(/\\D/g, ''))\n            set(form.db.data, name, cols)\n          }\n\n          if (value && ['decimal'].indexOf(state.type) >= 0) {\n            // let cols = value.replace(/[^\\d,-]/g, '')\n            let cols = value\n              .replace(',', '.')\n              .replace(/[^\\d\\.]/g, '')\n              .replace(/\\./, 'x')\n              .replace(/\\./g, '')\n              .replace(/x/, '.')\n            set(form.db.data, name, cols)\n            // console.log(cols, 'masuk', typeof res, cols === value)\n          }\n          internalChange(value)\n        }}\n      />\n    </>\n  )\n}\n\nexport const money = (angka: string | number) => {\n  let rupiah = ''\n\n  if (!angka) return '-'\n  const angkarev = angka.toString().split('').reverse().join('')\n  for (var i = 0; i < angkarev.length; i++)\n    if (i % 3 == 0) rupiah += angkarev.substr(i, 3) + '.'\n  return rupiah\n    .split('', rupiah.length - 1)\n    .reverse()\n    .join('')\n}\n", "/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { useContext } from 'react'\nimport { IBaseFieldProps } from '../../../../../ext/types/__form'\nimport { WBox } from './Winfo'\n\nexport const WUnknown = ({ ctx, name }: IBaseFieldProps) => {\n  const form = useContext(ctx)\n  const field = form.config.fields[name]\n\n  if (!field) return null\n  const state = field.state\n\n  return (\n    <WBox>\n      <span className=\"opacity-50\">\n        Field type <span className=\"text-red-700\">[{state.type}]</span> dalam\n        pengerjaan\n      </span>\n    </WBox>\n  )\n}\n", "/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { Label } from '@fluentui/react'\nimport { useContext } from 'react'\nimport { niceCase } from 'web-utils/src/niceCase'\nimport { IBaseFieldProps } from '../../../../../ext/types/__form'\n\nexport const WSection = ({ ctx, name }: IBaseFieldProps) => {\n  const form = useContext(ctx)\n  const field = form.config.fields[name]\n\n  if (!field) return null\n  const state = field.state\n\n  return (\n    <>\n      <div\n        className=\"flex self-stretch items-stretch select-none relative px-1 -mx-2\"\n        css={css`\n          padding-top: 10px;\n          min-height: 36px;\n        `}\n      >\n        <div className=\"absolute z-0 inset-x-0 border-b mt-4 border-gray-300\"></div>\n        <Label className=\"absolute bg-white z-10 px-1 text-sm text-gray-400\">\n          {niceCase(name)}\n        </Label>\n      </div>\n    </>\n  )\n}\n", "/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { Toggle } from '@fluentui/react'\nimport set from 'lodash.set'\nimport { useContext } from 'react'\nimport { BaseWindow } from 'web-init/src/window'\nimport { IBaseFieldProps } from '../../../../../ext/types/__form'\ndeclare const window: BaseWindow\nexport const WBoolean = ({ name, internalChange, ctx }: IBaseFieldProps) => {\n  const form = useContext(ctx)\n  const field = form.config.fields[name]\n\n  if (!field) return null\n  const state = field.state\n\n  return (\n    <Toggle\n      css={css`\n        margin: 0px;\n        padding: 0px 0px;\n        height: 34px;\n\n        align-items: center;\n        display: flex;\n        border-radius: 2px;\n      `}\n      defaultChecked={!!state.value}\n      onText=\"Yes\"\n      offText=\"No\"\n      \n      onChange={(_, value) => {\n        set(form.db.data, name, value)\n        if (typeof state.onChange === 'function')\n          state.onChange(value, {\n            state: form,\n            row: form.db.data,\n            col: name,\n          })\n        internalChange(value)\n        state.render()\n      }}\n    />\n  )\n}\n", "/** @jsx jsx */\nimport { css, jsx } from '@emotion/react'\nimport {\n  Icon,\n  Modal,\n  ProgressIndicator,\n} from '@fluentui/react'\nimport { Fragment, useContext, useEffect, useRef } from 'react'\nimport { useRender } from 'web-utils/src/useRender'\nimport { IBaseFieldProps } from '../../../../../ext/types/__form'\nimport set from 'lodash.set'\n\nexport const WFileUpload = (props: IBaseFieldProps) => {\n  const render = useRender()\n  const form = useContext(props.ctx)\n  const field = form.config.fields[props.name]\n  if (!field) {\n    return null\n  }\n  const state = field.state\n\n  const _ = useRef({\n    value: '',\n    get isImage() {\n      if (\n        meta.value &&\n        typeof meta.value === 'string' &&\n        meta.value.match(/[^/]+(jpg|png|gif|jpeg|svg)$/)\n      ) {\n        return true\n      }\n      return false\n    },\n    modal: false,\n    progress: 100,\n    showBrowse: false,\n    loading: false\n  })\n\n  const meta = _.current\n  const fieldProps = state.fieldProps\n\n  useEffect(() => {\n    meta.value = state.value;\n    render()\n  }, [state.value])\n\n\n  const _onChange = async (e) => {\n    if (e.target.files.length) {\n      if (e.target.files.length) {\n        const files = e.target.files\n        const ext = files[0].name.split('.').pop()\n\n        let directory = 'public'\n        if (form.db.tableName) {\n          directory = `${form.db.tableName}/${props.name}`\n        }\n        const file = new File(\n          [files[0].slice(0, files[0].size, files[0].type)],\n          `${getUuid()}.${ext}`,\n          {\n            type: files[0].type,\n          }\n        )\n        const url = `/upload/${directory}/${file.name}`\n        const formData = new FormData()\n        formData.append(directory, file)\n\n        meta.loading = true\n        render();\n\n        await request(\n          '/__upload',\n          {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n            body: formData,\n          },\n          (event) => {\n            const percent = (event.loaded / event.total) * 100\n            meta.progress = percent\n            render()\n          }\n        )\n\n        meta.loading = false\n        meta.value = url\n        render()\n\n        set(form.db.data, props.name, url)\n        if (typeof state.onChange === 'function')\n          state.onChange(url, {\n            state: form,\n            row: form.db.data,\n            col: props.name,\n          })\n        props.internalChange(url)\n      }\n    }\n  }\n  return (\n    <div className=\"flex flex-col items-stretch\">\n      <div\n        className=\"relative\"\n        css={css`\n                min-height: 25px;\n                border: 1px dashed #ccc;\n                border-bottom: 0px;\n              `}\n      >\n        <div\n          className=\"absolute w-full t-0 x-0\"\n          css={css`\n                  div {\n                    padding: 0px;\n                  }\n                `}\n        >\n          {meta.progress < 100 && (\n            <ProgressIndicator\n              percentComplete={\n                meta.progress <= 0 ? undefined : meta.progress / 100\n              }\n            />\n          )}\n        </div>\n        {!meta.value && (\n          <div\n            className=\"absolute inset-0 flex items-center justify-center text-xs font-medium text-gray-400\"\n            css={css`\n                    font-size: 9px;\n                  `}\n          >\n            Empty\n          </div>\n        )}\n        {typeof meta.value === 'string' && meta.value && (\n          <Fragment>\n            {meta.isImage ? (\n              <Fragment>\n                <div\n                  className=\"flex flex-col items-stretch p-1 cursor-pointer\"\n                  onClick={() => {\n                    meta.modal = true\n                    render();\n                  }}\n                  css={css`\n                          background-image: linear-gradient(\n                              45deg,\n                              #d1d1d1 25%,\n                              transparent 25%\n                            ),\n                            linear-gradient(\n                              -45deg,\n                              #d1d1d1 25%,\n                              transparent 25%\n                            ),\n                            linear-gradient(45deg, transparent 75%, #d1d1d1 75%),\n                            linear-gradient(\n                              -45deg,\n                              transparent 75%,\n                              #d1d1d1 75%\n                            );\n                          background-size: 20px 20px;\n                          background-position: 0 0, 0 10px, 10px -10px,\n                            -10px 0px;\n                        `}\n                >\n                  <img\n                    css={css`\n                            max-height: 90px;\n                            object-fit: scale-down;\n                            object-position: center;\n                          `}\n                    src={meta.value}\n                    alt={props.name}\n                  />\n                </div>\n                <Modal\n                  isOpen={meta.modal}\n                  onDismiss={() => {\n                    meta.modal = false\n                    render()\n                  }}\n                  styles={{\n                    scrollableContent: {\n                      maxHeight: 'auto',\n                    },\n                  }}\n                  allowTouchBodyScroll={true}\n                >\n                  <img\n                    css={css`\n                            background-image: linear-gradient(\n                                45deg,\n                                #d1d1d1 25%,\n                                transparent 25%\n                              ),\n                              linear-gradient(\n                                -45deg,\n                                #d1d1d1 25%,\n                                transparent 25%\n                              ),\n                              linear-gradient(\n                                45deg,\n                                transparent 75%,\n                                #d1d1d1 75%\n                              ),\n                              linear-gradient(\n                                -45deg,\n                                transparent 75%,\n                                #d1d1d1 75%\n                              );\n                            background-size: 20px 20px;\n                            background-position: 0 0, 0 10px, 10px -10px,\n                              -10px 0px;\n                          `}\n                    onClick={() => {\n                      meta.modal = false\n                      render()\n                    }}\n                    src={meta.value}\n                    alt={props.name}\n                    className=\"object-fill max-h-screen cursor-pointer\"\n                  />\n                </Modal>\n              </Fragment>\n            ) : (\n              <a\n                href={meta.value}\n                target=\"_blank\"\n                className=\"flex flex-row justify-center px-1 py-4 font-semibold text-blue-800 cursor-pointer\"\n                css={css`\n                        font-size: 12px;\n                      `}\n              >\n                Download{' '}\n                {(meta.value.split('.').pop() || '').toUpperCase()} File{' '}\n                <Icon className=\"ml-1\" iconName=\"Download\" />\n              </a>\n            )}\n          </Fragment>\n        )}\n      </div>\n      <div\n        className=\"flex flex-row items-center justify-between font-semibold select-none \"\n        css={css`\n                min-height: 32px;\n                border: 1px dashed #ccc;\n                font-size: 12px;\n                ${false ? \"display: none\" : \"\"}\n              `}\n      >\n        <div\n          className=\"relative flex-1 text-gray-500 hover:text-blue-500\"\n          css={css`\n                  min-height: 32px;\n                `}\n        >\n          <div\n            className={`absolute \n                 inset-0 flex items-center pl-3 w-full h-full\n                  pointer-events-none ${meta.value ? 'pl-3' : 'justify-center'\n              }`}\n          >\n            Click here to upload\n          </div>\n          <input\n            multiple={false}\n            type=\"file\"\n            className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n            onChange={_onChange}\n            accept={!!fieldProps ? fieldProps.acceptFile : null}\n          />\n        </div>\n\n        {meta.value && (\n          <div\n            className=\"px-4 text-xs text-red-400 cursor-pointer\"\n            onClick={() => {\n              if (confirm('Are you sure want to clear uploaded file?')) {\n                meta.value = null\n                render()\n\n                set(form.db.data, props.name, null)\n                if (typeof state.onChange === 'function')\n                  state.onChange(null, {\n                    state: form,\n                    row: form.db.data,\n                    col: props.name,\n                  })\n                props.internalChange(null)\n              }\n            }}\n          >\n            Clear\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\n\nfunction request(\n  url: string,\n  opts: {\n    method?: 'POST' | 'GET'\n    headers?: any\n    body?: Parameters<XMLHttpRequest['send']>[0]\n  } = {},\n  onProgress: XMLHttpRequest['upload']['onprogress']\n) {\n  return new Promise((res, rej) => {\n    const xhr = new XMLHttpRequest()\n    xhr.open(opts.method || 'get', url, true)\n\n    Object.keys(opts.headers || {}).forEach((headerKey) => {\n      xhr.setRequestHeader(headerKey, opts.headers[headerKey])\n    })\n\n    xhr.onload = (e: any) => res(e.target.responseText)\n\n    xhr.onerror = rej\n\n    if (xhr.upload && onProgress) {\n      xhr.upload.onprogress = onProgress // event.loaded / event.total * 100 ; //event.lengthComputable\n    }\n\n    xhr.send(opts.body)\n  })\n}\nconst getUuid = (a: string = ''): string =>\n  a\n    ? /* eslint-disable no-bitwise */\n    ((Number(a) ^ (Math.random() * 16)) >> (Number(a) / 4)).toString(16)\n    : `${1e7}-${1e3}-${4e3}-${8e3}-${1e11}`.replace(/[018]/g, getUuid)\n", "import { WBelongsTo } from './WBelongsTo'\nimport { WDate } from './WDate'\nimport { WDateTime } from './WDateTime'\nimport { WInfo } from './Winfo'\nimport { WSelect } from './WSelect'\nimport { WText } from './WText'\nimport { WUnknown } from './WUnknown'\nimport { WSection } from './WSection'\nimport { WBoolean } from './WBoolean'\nimport { WFileUpload } from './WFileUpload'\n\nexport default {\n  number: WText,\n  string: WText,\n  text: WText,\n  password: WText,\n  money: WText,\n  multiline: WText,\n  date: WDate,\n  datetime: WDateTime,\n  select: WSelect,\n  boolean: WBoolean,\n  'belongs-to': WBelongsTo,\n  unknown: WUnknown,\n  info: WInfo,\n  section: WSection,\n  decimal: WText,\n  file: WFileUpload,\n}\n"],
  "mappings": "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",
  "names": []
}
